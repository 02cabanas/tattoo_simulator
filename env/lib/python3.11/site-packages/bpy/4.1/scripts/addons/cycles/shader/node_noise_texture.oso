OpenShadingLanguage 1.00
# Compiled by oslc 1.13.7.0dev
# options: -q -O2 -I/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders -I/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders -o /Users/blender/git/blender-v410/build_arm64_release/intern/cycles/kernel/osl/shaders/node_noise_texture.oso
shader node_noise_texture
param	int	use_mapping	0		%read{1,1} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{2,2} %write{2147483647,-1}
param	string	dimensions	"3D"		%read{9,2719} %write{2147483647,-1}
param	string	type	"fBM"		%read{30,3867} %write{2147483647,-1}
param	int	use_normalize	1		%read{114,3724} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{0,0} %write{2147483647,-1}
param	float	W	0		%read{8,8} %write{2147483647,-1}
param	float	Scale	5		%read{7,8} %write{2147483647,-1}
param	float	Detail	2		%read{4,4} %write{2147483647,-1}
param	float	Roughness	0.5		%read{6,6} %write{2147483647,-1}
param	float	Offset	0		%read{159,3936} %write{2147483647,-1}
param	float	Gain	1		%read{164,3844} %write{2147483647,-1}
param	float	Lacunarity	2		%read{52,3916} %write{2147483647,-1}
param	float	Distortion	0		%read{13,2839} %write{2147483647,-1}
oparam	float	Fac	0		%read{2147483647,-1} %write{838,3947}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{837,3946}
local	float	___464_f	%read{22,826} %write{21,821}
local	float	___466_f	%read{860,1814} %write{859,1809}
local	float	___468_f	%read{1847,2706} %write{1846,2701}
local	float	___470_f	%read{2753,3935} %write{2752,3930}
local	float	___472_p	%read{82,646} %write{75,617}
local	float	___472_fscale	%read{82,646} %write{76,641}
local	float	___472_amp	%read{82,661} %write{77,641}
local	float	___472_maxamp	%read{82,669} %write{78,641}
local	float	___472_sum	%read{82,671} %write{79,641}
local	int	___473_i	%read{82,641} %write{81,641}
local	float	___474_t	%read{82,641} %write{82,641}
local	float	___472_rmd	%read{102,665} %write{101,643}
local	float	___475_t	%read{112,654} %write{109,653}
local	float	___475_sum2	%read{118,665} %write{113,655}
local	float	___477_p.x	%read{947,1610} %write{939,1571} %mystruct{___477_p} %mystructfield{0}
local	float	___477_p.y	%read{947,1611} %write{940,1572} %mystruct{___477_p} %mystructfield{1}
local	float	___477_fscale	%read{947,1608} %write{941,1601}
local	float	___477_amp	%read{947,1626} %write{942,1601}
local	float	___477_maxamp	%read{947,1634} %write{943,1601}
local	float	___477_sum	%read{947,1636} %write{944,1601}
local	int	___478_i	%read{947,1601} %write{946,1601}
local	float	___479_t	%read{947,1601} %write{947,1601}
local	float	___477_rmd	%read{972,1630} %write{971,1603}
local	float	___480_t	%read{987,1619} %write{984,1618}
local	float	___480_sum2	%read{993,1630} %write{988,1620}
local	point	___482_p	%read{1948,2526} %write{1941,2497}
local	float	___482_fscale	%read{1948,2526} %write{1942,2521}
local	float	___482_amp	%read{1948,2541} %write{1943,2521}
local	float	___482_maxamp	%read{1948,2549} %write{1944,2521}
local	float	___482_sum	%read{1948,2551} %write{1945,2521}
local	int	___483_i	%read{1948,2521} %write{1947,2521}
local	float	___484_t	%read{1948,2521} %write{1948,2521}
local	float	___482_rmd	%read{1968,2545} %write{1967,2523}
local	float	___485_t	%read{1978,2534} %write{1975,2533}
local	float	___485_sum2	%read{1984,2545} %write{1979,2535}
local	float	___487_p.x	%read{2915,3699} %write{2905,3651} %mystruct{___487_p} %mystructfield{0}
local	float	___487_p.y	%read{2915,3700} %write{2906,3652} %mystruct{___487_p} %mystructfield{1}
local	float	___487_p.z	%read{2915,3701} %write{2907,3653} %mystruct{___487_p} %mystructfield{2}
local	float	___487_p.w	%read{2915,3702} %write{2908,3654} %mystruct{___487_p} %mystructfield{3}
local	float	___487_fscale	%read{2915,3697} %write{2909,3688}
local	float	___487_amp	%read{2915,3718} %write{2910,3688}
local	float	___487_maxamp	%read{2915,3726} %write{2911,3688}
local	float	___487_sum	%read{2915,3728} %write{2912,3688}
local	int	___488_i	%read{2915,3688} %write{2914,3688}
local	float	___489_t	%read{2915,3688} %write{2915,3688}
local	float	___487_rmd	%read{2945,3722} %write{2944,3690}
local	float	___490_t	%read{2965,3711} %write{2962,3710}
local	float	___490_sum2	%read{2971,3722} %write{2966,3712}
local	float	___492_p	%read{38,603} %write{33,596}
local	float	___492_value	%read{38,612} %write{34,611}
local	float	___492_pwr	%read{38,601} %write{35,596}
local	int	___493_i	%read{38,596} %write{37,596}
local	float	___492_rmd	%read{57,601} %write{56,598}
local	float	___496_p.x	%read{897,1557} %write{891,1550} %mystruct{___496_p} %mystructfield{0}
local	float	___496_p.y	%read{897,1557} %write{892,1550} %mystruct{___496_p} %mystructfield{1}
local	float	___496_value	%read{897,1566} %write{893,1565}
local	float	___496_pwr	%read{897,1555} %write{894,1550}
local	int	___497_i	%read{897,1550} %write{896,1550}
local	float	___496_rmd	%read{921,1555} %write{920,1552}
local	point	___500_p	%read{1904,2483} %write{1899,2476}
local	float	___500_value	%read{1904,2492} %write{1900,2491}
local	float	___500_pwr	%read{1904,2481} %write{1901,2476}
local	int	___501_i	%read{1904,2476} %write{1903,2476}
local	float	___500_rmd	%read{1923,2481} %write{1922,2478}
local	float	___504_p.x	%read{2857,3636} %write{2849,3629} %mystruct{___504_p} %mystructfield{0}
local	float	___504_p.y	%read{2857,3636} %write{2850,3629} %mystruct{___504_p} %mystructfield{1}
local	float	___504_p.z	%read{2857,3636} %write{2851,3629} %mystruct{___504_p} %mystructfield{2}
local	float	___504_p.w	%read{2857,3637} %write{2852,3629} %mystruct{___504_p} %mystructfield{3}
local	float	___504_value	%read{2857,3646} %write{2853,3645}
local	float	___504_pwr	%read{2857,3634} %write{2854,3629}
local	int	___505_i	%read{2857,3629} %write{2856,3629}
local	float	___504_rmd	%read{2886,3634} %write{2885,3631}
local	float	___508_p	%read{246,821} %write{243,815}
local	float	___508_pwr	%read{256,828} %write{244,815}
local	float	___508_value	%read{256,832} %write{252,831}
local	int	___509_i	%read{256,815} %write{255,815}
local	float	___510_increment	%read{256,815} %write{256,815}
local	float	___508_rmd	%read{276,830} %write{275,817}
local	float	___511_increment	%read{288,830} %write{287,829}
local	float	___512_p.x	%read{1134,1809} %write{1130,1803} %mystruct{___512_p} %mystructfield{0}
local	float	___512_p.y	%read{1134,1809} %write{1131,1803} %mystruct{___512_p} %mystructfield{1}
local	float	___512_pwr	%read{1149,1816} %write{1132,1803}
local	float	___512_value	%read{1149,1820} %write{1140,1819}
local	int	___513_i	%read{1149,1803} %write{1148,1803}
local	float	___514_increment	%read{1149,1803} %write{1149,1803}
local	float	___512_rmd	%read{1174,1818} %write{1173,1805}
local	float	___515_increment	%read{1186,1818} %write{1185,1817}
local	point	___516_p	%read{2112,2701} %write{2109,2695}
local	float	___516_pwr	%read{2122,2708} %write{2110,2695}
local	float	___516_value	%read{2122,2712} %write{2118,2711}
local	int	___517_i	%read{2122,2695} %write{2121,2695}
local	float	___518_increment	%read{2122,2695} %write{2122,2695}
local	float	___516_rmd	%read{2142,2710} %write{2141,2697}
local	float	___519_increment	%read{2154,2710} %write{2153,2709}
local	float	___520_p.x	%read{3130,3929} %write{3124,3923} %mystruct{___520_p} %mystructfield{0}
local	float	___520_p.y	%read{3130,3929} %write{3125,3923} %mystruct{___520_p} %mystructfield{1}
local	float	___520_p.z	%read{3130,3929} %write{3126,3923} %mystruct{___520_p} %mystructfield{2}
local	float	___520_p.w	%read{3131,3930} %write{3127,3923} %mystruct{___520_p} %mystructfield{3}
local	float	___520_pwr	%read{3150,3937} %write{3128,3923}
local	float	___520_value	%read{3150,3941} %write{3137,3940}
local	int	___521_i	%read{3150,3923} %write{3149,3923}
local	float	___522_increment	%read{3150,3923} %write{3150,3923}
local	float	___520_rmd	%read{3180,3939} %write{3179,3925}
local	float	___523_increment	%read{3193,3939} %write{3192,3938}
local	float	___524_p	%read{141,724} %write{135,710}
local	float	___524_pwr	%read{141,731} %write{136,710}
local	float	___524_value	%read{141,735} %write{137,734}
local	float	___524_weight	%read{141,732} %write{138,722}
local	int	___525_i	%read{141,710} %write{140,710}
local	float	___526_signal	%read{141,710} %write{141,710}
local	float	___524_rmd	%read{171,732} %write{170,712}
local	float	___528_signal	%read{191,733} %write{189,731}
local	float	___530_p.x	%read{1017,1695} %write{1010,1681} %mystruct{___530_p} %mystructfield{0}
local	float	___530_p.y	%read{1017,1695} %write{1011,1681} %mystruct{___530_p} %mystructfield{1}
local	float	___530_pwr	%read{1017,1702} %write{1012,1681}
local	float	___530_value	%read{1017,1706} %write{1013,1705}
local	float	___530_weight	%read{1017,1703} %write{1014,1693}
local	int	___531_i	%read{1017,1681} %write{1016,1681}
local	float	___532_signal	%read{1017,1681} %write{1017,1681}
local	float	___530_rmd	%read{1052,1703} %write{1051,1683}
local	float	___534_signal	%read{1072,1704} %write{1070,1702}
local	point	___536_p	%read{2007,2604} %write{2001,2590}
local	float	___536_pwr	%read{2007,2611} %write{2002,2590}
local	float	___536_value	%read{2007,2615} %write{2003,2614}
local	float	___536_weight	%read{2007,2612} %write{2004,2602}
local	int	___537_i	%read{2007,2590} %write{2006,2590}
local	float	___538_signal	%read{2007,2590} %write{2007,2590}
local	float	___536_rmd	%read{2037,2612} %write{2036,2592}
local	float	___540_signal	%read{2057,2613} %write{2055,2611}
local	float	___542_p.x	%read{2997,3794} %write{2988,3780} %mystruct{___542_p} %mystructfield{0}
local	float	___542_p.y	%read{2997,3794} %write{2989,3780} %mystruct{___542_p} %mystructfield{1}
local	float	___542_p.z	%read{2997,3794} %write{2990,3780} %mystruct{___542_p} %mystructfield{2}
local	float	___542_p.w	%read{2997,3795} %write{2991,3780} %mystruct{___542_p} %mystructfield{3}
local	float	___542_pwr	%read{2997,3802} %write{2992,3780}
local	float	___542_value	%read{2997,3806} %write{2993,3805}
local	float	___542_weight	%read{2997,3803} %write{2994,3792}
local	int	___543_i	%read{2997,3780} %write{2996,3780}
local	float	___544_signal	%read{2997,3780} %write{2997,3780}
local	float	___542_rmd	%read{3037,3803} %write{3036,3782}
local	float	___546_signal	%read{3058,3804} %write{3056,3802}
local	float	___548_p	%read{201,779} %write{198,779}
local	float	___548_pwr	%read{214,779} %write{199,779}
local	float	___548_signal	%read{209,779} %write{208,779}
local	float	___548_value	%read{214,780} %write{210,779}
local	float	___548_weight	%read{214,779} %write{211,779}
local	int	___549_i	%read{214,779} %write{213,779}
local	float	___551_p.x	%read{1083,1756} %write{1079,1756} %mystruct{___551_p} %mystructfield{0}
local	float	___551_p.y	%read{1083,1756} %write{1080,1756} %mystruct{___551_p} %mystructfield{1}
local	float	___551_pwr	%read{1096,1756} %write{1081,1756}
local	float	___551_signal	%read{1091,1756} %write{1090,1756}
local	float	___551_value	%read{1096,1757} %write{1092,1756}
local	float	___551_weight	%read{1096,1756} %write{1093,1756}
local	int	___552_i	%read{1096,1756} %write{1095,1756}
local	point	___554_p	%read{2067,2659} %write{2064,2659}
local	float	___554_pwr	%read{2080,2659} %write{2065,2659}
local	float	___554_signal	%read{2075,2659} %write{2074,2659}
local	float	___554_value	%read{2080,2660} %write{2076,2659}
local	float	___554_weight	%read{2080,2659} %write{2077,2659}
local	int	___555_i	%read{2080,2659} %write{2079,2659}
local	float	___557_p.x	%read{3071,3864} %write{3065,3864} %mystruct{___557_p} %mystructfield{0}
local	float	___557_p.y	%read{3071,3864} %write{3066,3864} %mystruct{___557_p} %mystructfield{1}
local	float	___557_p.z	%read{3071,3864} %write{3067,3864} %mystruct{___557_p} %mystructfield{2}
local	float	___557_p.w	%read{3072,3864} %write{3068,3864} %mystruct{___557_p} %mystructfield{3}
local	float	___557_pwr	%read{3085,3864} %write{3069,3864}
local	float	___557_signal	%read{3080,3864} %write{3079,3864}
local	float	___557_value	%read{3085,3865} %write{3081,3864}
local	float	___557_weight	%read{3085,3864} %write{3082,3864}
local	int	___558_i	%read{3085,3864} %write{3084,3864}
local	float	___609_p	%read{19,570} %write{12,28}
local	float	___609_value	%read{837,838} %write{70,293}
local	float	___611_p.x	%read{856,1517} %write{844,885} %mystruct{___611_p} %mystructfield{0}
local	float	___611_p.y	%read{857,1518} %write{845,886} %mystruct{___611_p} %mystructfield{1}
local	float	___611_value	%read{1825,1826} %write{934,1191}
local	point	___613_p	%read{1844,2450} %write{1830,1894}
local	float	___613_value	%read{2717,2718} %write{1936,2159}
local	float	___615_p.x	%read{2746,3587} %write{2726,2841} %mystruct{___615_p} %mystructfield{0}
local	float	___615_p.y	%read{2747,3588} %write{2727,2842} %mystruct{___615_p} %mystructfield{1}
local	float	___615_p.z	%read{2748,3589} %write{2728,2843} %mystruct{___615_p} %mystructfield{2}
local	float	___615_p.w	%read{2749,3590} %write{2729,2844} %mystruct{___615_p} %mystructfield{3}
local	float	___615_value	%read{3946,3947} %write{2900,3198}
local	point	p	%read{2,2723} %write{0,7}
local	float	detail	%read{38,3925} %write{5,5}
local	float	roughness	%read{38,3923} %write{6,6}
local	float	w	%read{12,2724} %write{8,8}
const	float	$const1	0		%read{5,3944} %write{2147483647,-1}
const	float	$const2	15		%read{4,4} %write{2147483647,-1}
const	string	$const3	"clamp"		%read{3,3845} %write{2147483647,-1}
temp	float	$tmp1	%read{5,5} %write{4,4}
const	string	$const4	"1D"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp2	%read{10,10} %write{9,9}
const	string	$const5	"noise_texture"		%read{11,2725} %write{2147483647,-1}
temp	int	$tmp3	%read{14,14} %write{13,13}
temp	float	$tmp4	%read{27,27} %write{24,26}
temp	float	$tmp5	%read{19,19} %write{18,18}
const	string	$const6	"random_float_offset"		%read{15,566} %write{2147483647,-1}
const	float	$const7	100		%read{17,3585} %write{2147483647,-1}
temp	float	$tmp6	%read{17,17} %write{16,16}
const	string	$const8	"hash"		%read{16,3583} %write{2147483647,-1}
temp	float	$tmp7	%read{18,18} %write{17,17}
temp	float	$tmp8	%read{21,21} %write{19,19}
const	string	$const9	"safe_snoise"		%read{20,3928} %write{2147483647,-1}
const	string	$const10	"snoise"		%read{21,3930} %write{2147483647,-1}
temp	int	$tmp9	%read{23,23} %write{22,22}
temp	float	$tmp10	%read{28,28} %write{27,27}
const	string	$const11	"noise_select"		%read{29,3591} %write{2147483647,-1}
const	string	$const12	"multifractal"		%read{30,3592} %write{2147483647,-1}
temp	int	$tmp11	%read{31,31} %write{30,30}
const	string	$const13	"noise_multi_fractal"		%read{32,3594} %write{2147483647,-1}
const	float	$const14	1		%read{34,3846} %write{2147483647,-1}
const	int	$const15	0		%read{37,3898} %write{2147483647,-1}
temp	int	$tmp12	%read{38,54} %write{38,54}
temp	int	$tmp13	%read{38,54} %write{38,54}
temp	int	$tmp14	%read{36,54} %write{37,54}
temp	float	$tmp15	%read{38,54} %write{38,54}
temp	int	$tmp16	%read{38,54} %write{38,54}
temp	float	$tmp17	%read{38,54} %write{38,54}
temp	float	$tmp18	%read{38,54} %write{38,54}
const	int	$const16	1		%read{54,3923} %write{2147483647,-1}
temp	int	$tmp19	%read{2147483647,-1} %write{38,54}
temp	float	$tmp20	%read{56,56} %write{55,55}
temp	int	$tmp21	%read{58,58} %write{57,57}
temp	float	$tmp22	%read{67,67} %write{59,59}
temp	float	$tmp23	%read{67,67} %write{64,66}
temp	int	$tmp24	%read{63,63} %write{62,62}
temp	float	$tmp25	%read{68,68} %write{67,67}
temp	float	$tmp26	%read{69,69} %write{68,68}
const	string	$const17	"fBM"		%read{72,3648} %write{2147483647,-1}
temp	int	$tmp27	%read{73,73} %write{72,72}
const	string	$const18	"noise_fbm"		%read{74,3650} %write{2147483647,-1}
temp	int	$tmp28	%read{82,99} %write{82,99}
temp	int	$tmp29	%read{82,99} %write{82,99}
temp	int	$tmp30	%read{80,99} %write{81,99}
temp	float	$tmp31	%read{82,99} %write{82,99}
temp	int	$tmp32	%read{82,99} %write{82,99}
temp	float	$tmp33	%read{82,99} %write{82,99}
temp	int	$tmp34	%read{2147483647,-1} %write{82,99}
temp	float	$tmp35	%read{101,101} %write{100,100}
temp	int	$tmp36	%read{103,103} %write{102,102}
temp	float	$tmp37	%read{106,106} %write{104,104}
temp	int	$tmp38	%read{108,108} %write{107,107}
temp	float	$tmp39	%read{113,113} %write{112,112}
const	float	$const19	0.5		%read{115,3727} %write{2147483647,-1}
temp	float	$tmp40	%read{116,116} %write{115,115}
temp	float	$tmp41	%read{117,117} %write{116,116}
temp	float	$tmp42	%read{122,122} %write{117,117}
temp	float	$tmp43	%read{120,120} %write{118,118}
temp	float	$tmp44	%read{120,120} %write{119,119}
temp	float	$tmp45	%read{121,121} %write{120,120}
temp	float	$tmp46	%read{122,122} %write{121,121}
temp	float	$tmp47	%read{127,127} %write{126,126}
temp	float	$tmp48	%read{128,128} %write{127,127}
const	string	$const20	"hybrid_multifractal"		%read{132,3731} %write{2147483647,-1}
temp	int	$tmp49	%read{133,133} %write{132,132}
const	string	$const21	"noise_hybrid_multi_fractal"		%read{134,3733} %write{2147483647,-1}
const	float	$const22	0.00100000005		%read{141,3786} %write{2147483647,-1}
temp	int	$tmp50	%read{141,168} %write{141,168}
temp	int	$tmp51	%read{141,168} %write{141,168}
temp	int	$tmp52	%read{141,168} %write{141,168}
temp	int	$tmp53	%read{141,168} %write{141,168}
temp	int	$tmp54	%read{141,168} %write{141,168}
temp	int	$tmp55	%read{139,168} %write{140,168}
temp	int	$tmp56	%read{141,168} %write{141,168}
temp	float	$tmp57	%read{141,168} %write{141,168}
temp	int	$tmp58	%read{141,168} %write{141,168}
temp	float	$tmp59	%read{141,168} %write{141,168}
temp	float	$tmp60	%read{141,168} %write{141,168}
temp	float	$tmp61	%read{141,168} %write{141,168}
temp	int	$tmp62	%read{2147483647,-1} %write{141,168}
temp	float	$tmp63	%read{170,170} %write{169,169}
temp	int	$tmp64	%read{172,172} %write{171,171}
temp	int	$tmp65	%read{173,177} %write{172,176}
temp	int	$tmp66	%read{175,175} %write{174,174}
temp	int	$tmp67	%read{176,176} %write{175,175}
temp	int	$tmp68	%read{179,179} %write{178,178}
temp	float	$tmp69	%read{188,188} %write{185,187}
temp	int	$tmp70	%read{184,184} %write{183,183}
temp	float	$tmp71	%read{189,189} %write{188,188}
temp	float	$tmp72	%read{191,191} %write{190,190}
temp	float	$tmp73	%read{192,192} %write{191,191}
const	string	$const23	"ridged_multifractal"		%read{195,3808} %write{2147483647,-1}
temp	int	$tmp74	%read{196,196} %write{195,195}
const	string	$const24	"noise_ridged_multi_fractal"		%read{197,3810} %write{2147483647,-1}
temp	float	$tmp75	%read{208,208} %write{207,207}
temp	float	$tmp76	%read{207,207} %write{204,206}
temp	int	$tmp77	%read{203,203} %write{202,202}
temp	int	$tmp78	%read{214,237} %write{214,237}
temp	int	$tmp79	%read{214,237} %write{214,237}
temp	int	$tmp80	%read{212,237} %write{213,237}
temp	float	$tmp81	%read{214,237} %write{214,237}
temp	float	$tmp82	%read{214,237} %write{214,237}
temp	float	$tmp83	%read{214,237} %write{214,237}
temp	float	$tmp84	%read{214,237} %write{214,237}
temp	int	$tmp85	%read{214,237} %write{214,237}
temp	float	$tmp86	%read{214,237} %write{214,237}
temp	int	$tmp87	%read{2147483647,-1} %write{214,237}
const	string	$const25	"hetero_terrain"		%read{240,3867} %write{2147483647,-1}
temp	int	$tmp88	%read{241,241} %write{240,240}
const	string	$const26	"noise_hetero_terrain"		%read{242,3869} %write{2147483647,-1}
temp	float	$tmp89	%read{252,252} %write{249,251}
temp	int	$tmp90	%read{248,248} %write{247,247}
temp	int	$tmp91	%read{256,273} %write{256,273}
temp	int	$tmp92	%read{256,273} %write{256,273}
temp	int	$tmp93	%read{254,273} %write{255,273}
temp	float	$tmp94	%read{256,273} %write{256,273}
temp	int	$tmp95	%read{256,273} %write{256,273}
temp	float	$tmp96	%read{256,273} %write{256,273}
temp	float	$tmp97	%read{256,273} %write{256,273}
temp	int	$tmp98	%read{2147483647,-1} %write{256,273}
temp	float	$tmp99	%read{275,275} %write{274,274}
temp	int	$tmp100	%read{277,277} %write{276,276}
temp	float	$tmp101	%read{285,285} %write{282,284}
temp	int	$tmp102	%read{281,281} %write{280,280}
temp	float	$tmp103	%read{286,286} %write{285,285}
temp	float	$tmp104	%read{287,287} %write{286,286}
temp	float	$tmp105	%read{289,289} %write{288,288}
const	string	$const27	"Unknown Type!"		%read{292,3943} %write{2147483647,-1}
temp	float	$tmp106	%read{837,837} %write{341,564}
temp	float	$tmp107	%read{299,299} %write{298,298}
temp	float	$tmp108	%read{297,297} %write{296,296}
temp	float	$tmp109	%read{298,298} %write{297,297}
temp	float	$tmp110	%read{304,514} %write{299,299}
temp	int	$tmp111	%read{302,302} %write{301,301}
temp	int	$tmp112	%read{309,325} %write{309,325}
temp	int	$tmp113	%read{309,325} %write{309,325}
temp	int	$tmp114	%read{307,325} %write{308,325}
temp	float	$tmp115	%read{309,325} %write{309,325}
temp	int	$tmp116	%read{309,325} %write{309,325}
temp	float	$tmp117	%read{309,325} %write{309,325}
temp	float	$tmp118	%read{309,325} %write{309,325}
temp	int	$tmp119	%read{2147483647,-1} %write{309,325}
temp	float	$tmp120	%read{327,327} %write{326,326}
temp	int	$tmp121	%read{329,329} %write{328,328}
temp	float	$tmp122	%read{338,338} %write{330,330}
temp	float	$tmp123	%read{338,338} %write{335,337}
temp	int	$tmp124	%read{334,334} %write{333,333}
temp	float	$tmp125	%read{339,339} %write{338,338}
temp	float	$tmp126	%read{340,340} %write{339,339}
temp	int	$tmp127	%read{344,344} %write{343,343}
temp	int	$tmp128	%read{353,370} %write{353,370}
temp	int	$tmp129	%read{353,370} %write{353,370}
temp	int	$tmp130	%read{351,370} %write{352,370}
temp	float	$tmp131	%read{353,370} %write{353,370}
temp	int	$tmp132	%read{353,370} %write{353,370}
temp	float	$tmp133	%read{353,370} %write{353,370}
temp	int	$tmp134	%read{2147483647,-1} %write{353,370}
temp	float	$tmp135	%read{372,372} %write{371,371}
temp	int	$tmp136	%read{374,374} %write{373,373}
temp	float	$tmp137	%read{377,377} %write{375,375}
temp	int	$tmp138	%read{379,379} %write{378,378}
temp	float	$tmp139	%read{384,384} %write{383,383}
temp	float	$tmp140	%read{387,387} %write{386,386}
temp	float	$tmp141	%read{388,388} %write{387,387}
temp	float	$tmp142	%read{393,393} %write{388,388}
temp	float	$tmp143	%read{391,391} %write{389,389}
temp	float	$tmp144	%read{391,391} %write{390,390}
temp	float	$tmp145	%read{392,392} %write{391,391}
temp	float	$tmp146	%read{393,393} %write{392,392}
temp	float	$tmp147	%read{398,398} %write{397,397}
temp	float	$tmp148	%read{399,399} %write{398,398}
temp	int	$tmp149	%read{404,404} %write{403,403}
temp	int	$tmp150	%read{412,439} %write{412,439}
temp	int	$tmp151	%read{412,439} %write{412,439}
temp	int	$tmp152	%read{412,439} %write{412,439}
temp	int	$tmp153	%read{412,439} %write{412,439}
temp	int	$tmp154	%read{412,439} %write{412,439}
temp	int	$tmp155	%read{410,439} %write{411,439}
temp	int	$tmp156	%read{412,439} %write{412,439}
temp	float	$tmp157	%read{412,439} %write{412,439}
temp	int	$tmp158	%read{412,439} %write{412,439}
temp	float	$tmp159	%read{412,439} %write{412,439}
temp	float	$tmp160	%read{412,439} %write{412,439}
temp	float	$tmp161	%read{412,439} %write{412,439}
temp	int	$tmp162	%read{2147483647,-1} %write{412,439}
temp	float	$tmp163	%read{441,441} %write{440,440}
temp	int	$tmp164	%read{443,443} %write{442,442}
temp	int	$tmp165	%read{444,448} %write{443,447}
temp	int	$tmp166	%read{446,446} %write{445,445}
temp	int	$tmp167	%read{447,447} %write{446,446}
temp	int	$tmp168	%read{450,450} %write{449,449}
temp	float	$tmp169	%read{459,459} %write{456,458}
temp	int	$tmp170	%read{455,455} %write{454,454}
temp	float	$tmp171	%read{460,460} %write{459,459}
temp	float	$tmp172	%read{462,462} %write{461,461}
temp	float	$tmp173	%read{463,463} %write{462,462}
temp	int	$tmp174	%read{467,467} %write{466,466}
temp	float	$tmp175	%read{479,479} %write{478,478}
temp	float	$tmp176	%read{478,478} %write{475,477}
temp	int	$tmp177	%read{474,474} %write{473,473}
temp	int	$tmp178	%read{485,508} %write{485,508}
temp	int	$tmp179	%read{485,508} %write{485,508}
temp	int	$tmp180	%read{483,508} %write{484,508}
temp	float	$tmp181	%read{485,508} %write{485,508}
temp	float	$tmp182	%read{485,508} %write{485,508}
temp	float	$tmp183	%read{485,508} %write{485,508}
temp	float	$tmp184	%read{485,508} %write{485,508}
temp	int	$tmp185	%read{485,508} %write{485,508}
temp	float	$tmp186	%read{485,508} %write{485,508}
temp	int	$tmp187	%read{2147483647,-1} %write{485,508}
temp	int	$tmp188	%read{512,512} %write{511,511}
temp	float	$tmp189	%read{523,523} %write{520,522}
temp	int	$tmp190	%read{519,519} %write{518,518}
temp	int	$tmp191	%read{527,544} %write{527,544}
temp	int	$tmp192	%read{527,544} %write{527,544}
temp	int	$tmp193	%read{525,544} %write{526,544}
temp	float	$tmp194	%read{527,544} %write{527,544}
temp	int	$tmp195	%read{527,544} %write{527,544}
temp	float	$tmp196	%read{527,544} %write{527,544}
temp	float	$tmp197	%read{527,544} %write{527,544}
temp	int	$tmp198	%read{2147483647,-1} %write{527,544}
temp	float	$tmp199	%read{546,546} %write{545,545}
temp	int	$tmp200	%read{548,548} %write{547,547}
temp	float	$tmp201	%read{556,556} %write{553,555}
temp	int	$tmp202	%read{552,552} %write{551,551}
temp	float	$tmp203	%read{557,557} %write{556,556}
temp	float	$tmp204	%read{558,558} %write{557,557}
temp	float	$tmp205	%read{560,560} %write{559,559}
temp	float	$tmp206	%read{837,837} %write{612,835}
temp	float	$tmp207	%read{570,570} %write{569,569}
const	float	$const28	2		%read{567,3580} %write{2147483647,-1}
temp	float	$tmp208	%read{568,568} %write{567,567}
temp	float	$tmp209	%read{569,569} %write{568,568}
temp	float	$tmp210	%read{575,785} %write{570,570}
temp	int	$tmp211	%read{573,573} %write{572,572}
temp	int	$tmp212	%read{580,596} %write{580,596}
temp	int	$tmp213	%read{580,596} %write{580,596}
temp	int	$tmp214	%read{578,596} %write{579,596}
temp	float	$tmp215	%read{580,596} %write{580,596}
temp	int	$tmp216	%read{580,596} %write{580,596}
temp	float	$tmp217	%read{580,596} %write{580,596}
temp	float	$tmp218	%read{580,596} %write{580,596}
temp	int	$tmp219	%read{2147483647,-1} %write{580,596}
temp	float	$tmp220	%read{598,598} %write{597,597}
temp	int	$tmp221	%read{600,600} %write{599,599}
temp	float	$tmp222	%read{609,609} %write{601,601}
temp	float	$tmp223	%read{609,609} %write{606,608}
temp	int	$tmp224	%read{605,605} %write{604,604}
temp	float	$tmp225	%read{610,610} %write{609,609}
temp	float	$tmp226	%read{611,611} %write{610,610}
temp	int	$tmp227	%read{615,615} %write{614,614}
temp	int	$tmp228	%read{624,641} %write{624,641}
temp	int	$tmp229	%read{624,641} %write{624,641}
temp	int	$tmp230	%read{622,641} %write{623,641}
temp	float	$tmp231	%read{624,641} %write{624,641}
temp	int	$tmp232	%read{624,641} %write{624,641}
temp	float	$tmp233	%read{624,641} %write{624,641}
temp	int	$tmp234	%read{2147483647,-1} %write{624,641}
temp	float	$tmp235	%read{643,643} %write{642,642}
temp	int	$tmp236	%read{645,645} %write{644,644}
temp	float	$tmp237	%read{648,648} %write{646,646}
temp	int	$tmp238	%read{650,650} %write{649,649}
temp	float	$tmp239	%read{655,655} %write{654,654}
temp	float	$tmp240	%read{658,658} %write{657,657}
temp	float	$tmp241	%read{659,659} %write{658,658}
temp	float	$tmp242	%read{664,664} %write{659,659}
temp	float	$tmp243	%read{662,662} %write{660,660}
temp	float	$tmp244	%read{662,662} %write{661,661}
temp	float	$tmp245	%read{663,663} %write{662,662}
temp	float	$tmp246	%read{664,664} %write{663,663}
temp	float	$tmp247	%read{669,669} %write{668,668}
temp	float	$tmp248	%read{670,670} %write{669,669}
temp	int	$tmp249	%read{675,675} %write{674,674}
temp	int	$tmp250	%read{683,710} %write{683,710}
temp	int	$tmp251	%read{683,710} %write{683,710}
temp	int	$tmp252	%read{683,710} %write{683,710}
temp	int	$tmp253	%read{683,710} %write{683,710}
temp	int	$tmp254	%read{683,710} %write{683,710}
temp	int	$tmp255	%read{681,710} %write{682,710}
temp	int	$tmp256	%read{683,710} %write{683,710}
temp	float	$tmp257	%read{683,710} %write{683,710}
temp	int	$tmp258	%read{683,710} %write{683,710}
temp	float	$tmp259	%read{683,710} %write{683,710}
temp	float	$tmp260	%read{683,710} %write{683,710}
temp	float	$tmp261	%read{683,710} %write{683,710}
temp	int	$tmp262	%read{2147483647,-1} %write{683,710}
temp	float	$tmp263	%read{712,712} %write{711,711}
temp	int	$tmp264	%read{714,714} %write{713,713}
temp	int	$tmp265	%read{715,719} %write{714,718}
temp	int	$tmp266	%read{717,717} %write{716,716}
temp	int	$tmp267	%read{718,718} %write{717,717}
temp	int	$tmp268	%read{721,721} %write{720,720}
temp	float	$tmp269	%read{730,730} %write{727,729}
temp	int	$tmp270	%read{726,726} %write{725,725}
temp	float	$tmp271	%read{731,731} %write{730,730}
temp	float	$tmp272	%read{733,733} %write{732,732}
temp	float	$tmp273	%read{734,734} %write{733,733}
temp	int	$tmp274	%read{738,738} %write{737,737}
temp	float	$tmp275	%read{750,750} %write{749,749}
temp	float	$tmp276	%read{749,749} %write{746,748}
temp	int	$tmp277	%read{745,745} %write{744,744}
temp	int	$tmp278	%read{756,779} %write{756,779}
temp	int	$tmp279	%read{756,779} %write{756,779}
temp	int	$tmp280	%read{754,779} %write{755,779}
temp	float	$tmp281	%read{756,779} %write{756,779}
temp	float	$tmp282	%read{756,779} %write{756,779}
temp	float	$tmp283	%read{756,779} %write{756,779}
temp	float	$tmp284	%read{756,779} %write{756,779}
temp	int	$tmp285	%read{756,779} %write{756,779}
temp	float	$tmp286	%read{756,779} %write{756,779}
temp	int	$tmp287	%read{2147483647,-1} %write{756,779}
temp	int	$tmp288	%read{783,783} %write{782,782}
temp	float	$tmp289	%read{794,794} %write{791,793}
temp	int	$tmp290	%read{790,790} %write{789,789}
temp	int	$tmp291	%read{798,815} %write{798,815}
temp	int	$tmp292	%read{798,815} %write{798,815}
temp	int	$tmp293	%read{796,815} %write{797,815}
temp	float	$tmp294	%read{798,815} %write{798,815}
temp	int	$tmp295	%read{798,815} %write{798,815}
temp	float	$tmp296	%read{798,815} %write{798,815}
temp	float	$tmp297	%read{798,815} %write{798,815}
temp	int	$tmp298	%read{2147483647,-1} %write{798,815}
temp	float	$tmp299	%read{817,817} %write{816,816}
temp	int	$tmp300	%read{819,819} %write{818,818}
temp	float	$tmp301	%read{827,827} %write{824,826}
temp	int	$tmp302	%read{823,823} %write{822,822}
temp	float	$tmp303	%read{828,828} %write{827,827}
temp	float	$tmp304	%read{829,829} %write{828,828}
temp	float	$tmp305	%read{831,831} %write{830,830}
const	string	$const29	"2D"		%read{839,839} %write{2147483647,-1}
temp	int	$tmp306	%read{840,840} %write{839,839}
temp	float	$tmp307.x	%read{844,844} %write{841,841}
temp	float	$tmp307.y	%read{845,845} %write{842,842}
temp	int	$tmp308	%read{847,847} %write{846,846}
temp	float	$tmp309.x	%read{885,885} %write{865,865}
temp	float	$tmp309.y	%read{886,886} %write{883,883}
temp	float	$tmp310	%read{865,865} %write{862,864}
temp	float	$tmp311.x	%read{859,859} %write{856,856}
temp	float	$tmp311.y	%read{859,859} %write{857,857}
temp	float	$tmp312.x	%read{856,856} %write{851,851}
temp	float	$tmp312.y	%read{857,857} %write{854,854}
const	string	$const30	"random_vector2_offset"		%read{848,1509} %write{2147483647,-1}
temp	float	$tmp313	%read{850,850} %write{849,849}
temp	float	$tmp314	%read{851,851} %write{850,850}
temp	float	$tmp315	%read{853,853} %write{852,852}
temp	float	$tmp316	%read{854,854} %write{853,853}
const	string	$const31	"__operator__add__"		%read{855,3586} %write{2147483647,-1}
temp	int	$tmp317	%read{861,861} %write{860,860}
temp	float	$tmp318	%read{883,883} %write{880,882}
temp	float	$tmp319.x	%read{877,877} %write{874,874}
temp	float	$tmp319.y	%read{877,877} %write{875,875}
temp	float	$tmp320.x	%read{874,874} %write{869,869}
temp	float	$tmp320.y	%read{875,875} %write{872,872}
temp	float	$tmp321	%read{868,868} %write{867,867}
temp	float	$tmp322	%read{869,869} %write{868,868}
temp	float	$tmp323	%read{871,871} %write{870,870}
temp	float	$tmp324	%read{872,872} %write{871,871}
temp	int	$tmp325	%read{879,879} %write{878,878}
temp	int	$tmp326	%read{889,889} %write{888,888}
temp	int	$tmp327	%read{897,918} %write{897,918}
temp	int	$tmp328	%read{897,918} %write{897,918}
temp	int	$tmp329	%read{895,918} %write{896,918}
temp	float	$tmp330	%read{897,918} %write{897,918}
temp	int	$tmp331	%read{897,918} %write{897,918}
temp	float	$tmp332	%read{897,918} %write{897,918}
temp	float	$tmp333	%read{897,918} %write{897,918}
const	string	$const32	"__operator__mul__"		%read{911,3917} %write{2147483647,-1}
temp	float	$tmp334.x	%read{897,918} %write{897,918}
temp	float	$tmp334.y	%read{897,918} %write{897,918}
temp	int	$tmp335	%read{2147483647,-1} %write{897,918}
temp	float	$tmp336	%read{920,920} %write{919,919}
temp	int	$tmp337	%read{922,922} %write{921,921}
temp	float	$tmp338	%read{931,931} %write{923,923}
temp	float	$tmp339	%read{931,931} %write{928,930}
temp	int	$tmp340	%read{927,927} %write{926,926}
temp	float	$tmp341	%read{932,932} %write{931,931}
temp	float	$tmp342	%read{933,933} %write{932,932}
temp	int	$tmp343	%read{937,937} %write{936,936}
temp	int	$tmp344	%read{947,969} %write{947,969}
temp	int	$tmp345	%read{947,969} %write{947,969}
temp	int	$tmp346	%read{945,969} %write{946,969}
temp	float	$tmp347.x	%read{947,969} %write{947,969}
temp	float	$tmp347.y	%read{947,969} %write{947,969}
temp	float	$tmp348.x	%read{947,969} %write{947,969}
temp	float	$tmp348.y	%read{947,969} %write{947,969}
temp	int	$tmp349	%read{947,969} %write{947,969}
temp	float	$tmp350	%read{947,969} %write{947,969}
temp	int	$tmp351	%read{2147483647,-1} %write{947,969}
temp	float	$tmp352	%read{971,971} %write{970,970}
temp	int	$tmp353	%read{973,973} %write{972,972}
temp	float	$tmp354.x	%read{981,981} %write{978,978}
temp	float	$tmp354.y	%read{981,981} %write{979,979}
temp	float	$tmp355.x	%read{978,978} %write{975,975}
temp	float	$tmp355.y	%read{979,979} %write{976,976}
temp	int	$tmp356	%read{983,983} %write{982,982}
temp	float	$tmp357	%read{988,988} %write{987,987}
temp	float	$tmp358	%read{991,991} %write{990,990}
temp	float	$tmp359	%read{992,992} %write{991,991}
temp	float	$tmp360	%read{997,997} %write{992,992}
temp	float	$tmp361	%read{995,995} %write{993,993}
temp	float	$tmp362	%read{995,995} %write{994,994}
temp	float	$tmp363	%read{996,996} %write{995,995}
temp	float	$tmp364	%read{997,997} %write{996,996}
temp	float	$tmp365	%read{1002,1002} %write{1001,1001}
temp	float	$tmp366	%read{1003,1003} %write{1002,1002}
temp	int	$tmp367	%read{1008,1008} %write{1007,1007}
temp	int	$tmp368	%read{1017,1049} %write{1017,1049}
temp	int	$tmp369	%read{1017,1049} %write{1017,1049}
temp	int	$tmp370	%read{1017,1049} %write{1017,1049}
temp	int	$tmp371	%read{1017,1049} %write{1017,1049}
temp	int	$tmp372	%read{1017,1049} %write{1017,1049}
temp	int	$tmp373	%read{1015,1049} %write{1016,1049}
temp	int	$tmp374	%read{1017,1049} %write{1017,1049}
temp	float	$tmp375	%read{1017,1049} %write{1017,1049}
temp	int	$tmp376	%read{1017,1049} %write{1017,1049}
temp	float	$tmp377	%read{1017,1049} %write{1017,1049}
temp	float	$tmp378	%read{1017,1049} %write{1017,1049}
temp	float	$tmp379	%read{1017,1049} %write{1017,1049}
temp	float	$tmp380.x	%read{1017,1049} %write{1017,1049}
temp	float	$tmp380.y	%read{1017,1049} %write{1017,1049}
temp	int	$tmp381	%read{2147483647,-1} %write{1017,1049}
temp	float	$tmp382	%read{1051,1051} %write{1050,1050}
temp	int	$tmp383	%read{1053,1053} %write{1052,1052}
temp	int	$tmp384	%read{1054,1058} %write{1053,1057}
temp	int	$tmp385	%read{1056,1056} %write{1055,1055}
temp	int	$tmp386	%read{1057,1057} %write{1056,1056}
temp	int	$tmp387	%read{1060,1060} %write{1059,1059}
temp	float	$tmp388	%read{1069,1069} %write{1066,1068}
temp	int	$tmp389	%read{1065,1065} %write{1064,1064}
temp	float	$tmp390	%read{1070,1070} %write{1069,1069}
temp	float	$tmp391	%read{1072,1072} %write{1071,1071}
temp	float	$tmp392	%read{1073,1073} %write{1072,1072}
temp	int	$tmp393	%read{1077,1077} %write{1076,1076}
temp	float	$tmp394	%read{1090,1090} %write{1089,1089}
temp	float	$tmp395	%read{1089,1089} %write{1086,1088}
temp	int	$tmp396	%read{1085,1085} %write{1084,1084}
temp	int	$tmp397	%read{1096,1124} %write{1096,1124}
temp	int	$tmp398	%read{1096,1124} %write{1096,1124}
temp	int	$tmp399	%read{1094,1124} %write{1095,1124}
temp	float	$tmp400.x	%read{1096,1124} %write{1096,1124}
temp	float	$tmp400.y	%read{1096,1124} %write{1096,1124}
temp	float	$tmp401	%read{1096,1124} %write{1096,1124}
temp	float	$tmp402	%read{1096,1124} %write{1096,1124}
temp	float	$tmp403	%read{1096,1124} %write{1096,1124}
temp	float	$tmp404	%read{1096,1124} %write{1096,1124}
temp	int	$tmp405	%read{1096,1124} %write{1096,1124}
temp	float	$tmp406	%read{1096,1124} %write{1096,1124}
temp	int	$tmp407	%read{2147483647,-1} %write{1096,1124}
temp	int	$tmp408	%read{1128,1128} %write{1127,1127}
temp	float	$tmp409	%read{1140,1140} %write{1137,1139}
temp	int	$tmp410	%read{1136,1136} %write{1135,1135}
temp	float	$tmp411.x	%read{1145,1145} %write{1142,1142}
temp	float	$tmp411.y	%read{1146,1146} %write{1143,1143}
temp	int	$tmp412	%read{1149,1171} %write{1149,1171}
temp	int	$tmp413	%read{1149,1171} %write{1149,1171}
temp	int	$tmp414	%read{1147,1171} %write{1148,1171}
temp	float	$tmp415	%read{1149,1171} %write{1149,1171}
temp	int	$tmp416	%read{1149,1171} %write{1149,1171}
temp	float	$tmp417	%read{1149,1171} %write{1149,1171}
temp	float	$tmp418	%read{1149,1171} %write{1149,1171}
temp	float	$tmp419.x	%read{1149,1171} %write{1149,1171}
temp	float	$tmp419.y	%read{1149,1171} %write{1149,1171}
temp	int	$tmp420	%read{2147483647,-1} %write{1149,1171}
temp	float	$tmp421	%read{1173,1173} %write{1172,1172}
temp	int	$tmp422	%read{1175,1175} %write{1174,1174}
temp	float	$tmp423	%read{1183,1183} %write{1180,1182}
temp	int	$tmp424	%read{1179,1179} %write{1178,1178}
temp	float	$tmp425	%read{1184,1184} %write{1183,1183}
temp	float	$tmp426	%read{1185,1185} %write{1184,1184}
temp	float	$tmp427	%read{1187,1187} %write{1186,1186}
temp	float	$tmp428	%read{1825,1825} %write{1250,1507}
temp	float	$tmp429.x	%read{1207,1446} %write{1201,1201}
temp	float	$tmp429.y	%read{1208,1447} %write{1202,1202}
temp	float	$tmp430.x	%read{1201,1201} %write{1196,1196}
temp	float	$tmp430.y	%read{1202,1202} %write{1199,1199}
temp	float	$tmp431	%read{1195,1195} %write{1194,1194}
temp	float	$tmp432	%read{1196,1196} %write{1195,1195}
temp	float	$tmp433	%read{1198,1198} %write{1197,1197}
temp	float	$tmp434	%read{1199,1199} %write{1198,1198}
temp	int	$tmp435	%read{1205,1205} %write{1204,1204}
temp	int	$tmp436	%read{1213,1234} %write{1213,1234}
temp	int	$tmp437	%read{1213,1234} %write{1213,1234}
temp	int	$tmp438	%read{1211,1234} %write{1212,1234}
temp	float	$tmp439	%read{1213,1234} %write{1213,1234}
temp	int	$tmp440	%read{1213,1234} %write{1213,1234}
temp	float	$tmp441	%read{1213,1234} %write{1213,1234}
temp	float	$tmp442	%read{1213,1234} %write{1213,1234}
temp	float	$tmp443.x	%read{1213,1234} %write{1213,1234}
temp	float	$tmp443.y	%read{1213,1234} %write{1213,1234}
temp	int	$tmp444	%read{2147483647,-1} %write{1213,1234}
temp	float	$tmp445	%read{1236,1236} %write{1235,1235}
temp	int	$tmp446	%read{1238,1238} %write{1237,1237}
temp	float	$tmp447	%read{1247,1247} %write{1239,1239}
temp	float	$tmp448	%read{1247,1247} %write{1244,1246}
temp	int	$tmp449	%read{1243,1243} %write{1242,1242}
temp	float	$tmp450	%read{1248,1248} %write{1247,1247}
temp	float	$tmp451	%read{1249,1249} %write{1248,1248}
temp	int	$tmp452	%read{1253,1253} %write{1252,1252}
temp	int	$tmp453	%read{1263,1285} %write{1263,1285}
temp	int	$tmp454	%read{1263,1285} %write{1263,1285}
temp	int	$tmp455	%read{1261,1285} %write{1262,1285}
temp	float	$tmp456.x	%read{1263,1285} %write{1263,1285}
temp	float	$tmp456.y	%read{1263,1285} %write{1263,1285}
temp	float	$tmp457.x	%read{1263,1285} %write{1263,1285}
temp	float	$tmp457.y	%read{1263,1285} %write{1263,1285}
temp	int	$tmp458	%read{1263,1285} %write{1263,1285}
temp	float	$tmp459	%read{1263,1285} %write{1263,1285}
temp	int	$tmp460	%read{2147483647,-1} %write{1263,1285}
temp	float	$tmp461	%read{1287,1287} %write{1286,1286}
temp	int	$tmp462	%read{1289,1289} %write{1288,1288}
temp	float	$tmp463.x	%read{1297,1297} %write{1294,1294}
temp	float	$tmp463.y	%read{1297,1297} %write{1295,1295}
temp	float	$tmp464.x	%read{1294,1294} %write{1291,1291}
temp	float	$tmp464.y	%read{1295,1295} %write{1292,1292}
temp	int	$tmp465	%read{1299,1299} %write{1298,1298}
temp	float	$tmp466	%read{1304,1304} %write{1303,1303}
temp	float	$tmp467	%read{1307,1307} %write{1306,1306}
temp	float	$tmp468	%read{1308,1308} %write{1307,1307}
temp	float	$tmp469	%read{1313,1313} %write{1308,1308}
temp	float	$tmp470	%read{1311,1311} %write{1309,1309}
temp	float	$tmp471	%read{1311,1311} %write{1310,1310}
temp	float	$tmp472	%read{1312,1312} %write{1311,1311}
temp	float	$tmp473	%read{1313,1313} %write{1312,1312}
temp	float	$tmp474	%read{1318,1318} %write{1317,1317}
temp	float	$tmp475	%read{1319,1319} %write{1318,1318}
temp	int	$tmp476	%read{1324,1324} %write{1323,1323}
temp	int	$tmp477	%read{1333,1365} %write{1333,1365}
temp	int	$tmp478	%read{1333,1365} %write{1333,1365}
temp	int	$tmp479	%read{1333,1365} %write{1333,1365}
temp	int	$tmp480	%read{1333,1365} %write{1333,1365}
temp	int	$tmp481	%read{1333,1365} %write{1333,1365}
temp	int	$tmp482	%read{1331,1365} %write{1332,1365}
temp	int	$tmp483	%read{1333,1365} %write{1333,1365}
temp	float	$tmp484	%read{1333,1365} %write{1333,1365}
temp	int	$tmp485	%read{1333,1365} %write{1333,1365}
temp	float	$tmp486	%read{1333,1365} %write{1333,1365}
temp	float	$tmp487	%read{1333,1365} %write{1333,1365}
temp	float	$tmp488	%read{1333,1365} %write{1333,1365}
temp	float	$tmp489.x	%read{1333,1365} %write{1333,1365}
temp	float	$tmp489.y	%read{1333,1365} %write{1333,1365}
temp	int	$tmp490	%read{2147483647,-1} %write{1333,1365}
temp	float	$tmp491	%read{1367,1367} %write{1366,1366}
temp	int	$tmp492	%read{1369,1369} %write{1368,1368}
temp	int	$tmp493	%read{1370,1374} %write{1369,1373}
temp	int	$tmp494	%read{1372,1372} %write{1371,1371}
temp	int	$tmp495	%read{1373,1373} %write{1372,1372}
temp	int	$tmp496	%read{1376,1376} %write{1375,1375}
temp	float	$tmp497	%read{1385,1385} %write{1382,1384}
temp	int	$tmp498	%read{1381,1381} %write{1380,1380}
temp	float	$tmp499	%read{1386,1386} %write{1385,1385}
temp	float	$tmp500	%read{1388,1388} %write{1387,1387}
temp	float	$tmp501	%read{1389,1389} %write{1388,1388}
temp	int	$tmp502	%read{1393,1393} %write{1392,1392}
temp	float	$tmp503	%read{1406,1406} %write{1405,1405}
temp	float	$tmp504	%read{1405,1405} %write{1402,1404}
temp	int	$tmp505	%read{1401,1401} %write{1400,1400}
temp	int	$tmp506	%read{1412,1440} %write{1412,1440}
temp	int	$tmp507	%read{1412,1440} %write{1412,1440}
temp	int	$tmp508	%read{1410,1440} %write{1411,1440}
temp	float	$tmp509.x	%read{1412,1440} %write{1412,1440}
temp	float	$tmp509.y	%read{1412,1440} %write{1412,1440}
temp	float	$tmp510	%read{1412,1440} %write{1412,1440}
temp	float	$tmp511	%read{1412,1440} %write{1412,1440}
temp	float	$tmp512	%read{1412,1440} %write{1412,1440}
temp	float	$tmp513	%read{1412,1440} %write{1412,1440}
temp	int	$tmp514	%read{1412,1440} %write{1412,1440}
temp	float	$tmp515	%read{1412,1440} %write{1412,1440}
temp	int	$tmp516	%read{2147483647,-1} %write{1412,1440}
temp	int	$tmp517	%read{1444,1444} %write{1443,1443}
temp	float	$tmp518	%read{1456,1456} %write{1453,1455}
temp	int	$tmp519	%read{1452,1452} %write{1451,1451}
temp	float	$tmp520.x	%read{1461,1461} %write{1458,1458}
temp	float	$tmp520.y	%read{1462,1462} %write{1459,1459}
temp	int	$tmp521	%read{1465,1487} %write{1465,1487}
temp	int	$tmp522	%read{1465,1487} %write{1465,1487}
temp	int	$tmp523	%read{1463,1487} %write{1464,1487}
temp	float	$tmp524	%read{1465,1487} %write{1465,1487}
temp	int	$tmp525	%read{1465,1487} %write{1465,1487}
temp	float	$tmp526	%read{1465,1487} %write{1465,1487}
temp	float	$tmp527	%read{1465,1487} %write{1465,1487}
temp	float	$tmp528.x	%read{1465,1487} %write{1465,1487}
temp	float	$tmp528.y	%read{1465,1487} %write{1465,1487}
temp	int	$tmp529	%read{2147483647,-1} %write{1465,1487}
temp	float	$tmp530	%read{1489,1489} %write{1488,1488}
temp	int	$tmp531	%read{1491,1491} %write{1490,1490}
temp	float	$tmp532	%read{1499,1499} %write{1496,1498}
temp	int	$tmp533	%read{1495,1495} %write{1494,1494}
temp	float	$tmp534	%read{1500,1500} %write{1499,1499}
temp	float	$tmp535	%read{1501,1501} %write{1500,1500}
temp	float	$tmp536	%read{1503,1503} %write{1502,1502}
temp	float	$tmp537	%read{1825,1825} %write{1566,1823}
temp	float	$tmp538.x	%read{1523,1762} %write{1517,1517}
temp	float	$tmp538.y	%read{1524,1763} %write{1518,1518}
temp	float	$tmp539.x	%read{1517,1517} %write{1512,1512}
temp	float	$tmp539.y	%read{1518,1518} %write{1515,1515}
const	float	$const33	3		%read{1510,3583} %write{2147483647,-1}
temp	float	$tmp540	%read{1511,1511} %write{1510,1510}
temp	float	$tmp541	%read{1512,1512} %write{1511,1511}
temp	float	$tmp542	%read{1514,1514} %write{1513,1513}
temp	float	$tmp543	%read{1515,1515} %write{1514,1514}
temp	int	$tmp544	%read{1521,1521} %write{1520,1520}
temp	int	$tmp545	%read{1529,1550} %write{1529,1550}
temp	int	$tmp546	%read{1529,1550} %write{1529,1550}
temp	int	$tmp547	%read{1527,1550} %write{1528,1550}
temp	float	$tmp548	%read{1529,1550} %write{1529,1550}
temp	int	$tmp549	%read{1529,1550} %write{1529,1550}
temp	float	$tmp550	%read{1529,1550} %write{1529,1550}
temp	float	$tmp551	%read{1529,1550} %write{1529,1550}
temp	float	$tmp552.x	%read{1529,1550} %write{1529,1550}
temp	float	$tmp552.y	%read{1529,1550} %write{1529,1550}
temp	int	$tmp553	%read{2147483647,-1} %write{1529,1550}
temp	float	$tmp554	%read{1552,1552} %write{1551,1551}
temp	int	$tmp555	%read{1554,1554} %write{1553,1553}
temp	float	$tmp556	%read{1563,1563} %write{1555,1555}
temp	float	$tmp557	%read{1563,1563} %write{1560,1562}
temp	int	$tmp558	%read{1559,1559} %write{1558,1558}
temp	float	$tmp559	%read{1564,1564} %write{1563,1563}
temp	float	$tmp560	%read{1565,1565} %write{1564,1564}
temp	int	$tmp561	%read{1569,1569} %write{1568,1568}
temp	int	$tmp562	%read{1579,1601} %write{1579,1601}
temp	int	$tmp563	%read{1579,1601} %write{1579,1601}
temp	int	$tmp564	%read{1577,1601} %write{1578,1601}
temp	float	$tmp565.x	%read{1579,1601} %write{1579,1601}
temp	float	$tmp565.y	%read{1579,1601} %write{1579,1601}
temp	float	$tmp566.x	%read{1579,1601} %write{1579,1601}
temp	float	$tmp566.y	%read{1579,1601} %write{1579,1601}
temp	int	$tmp567	%read{1579,1601} %write{1579,1601}
temp	float	$tmp568	%read{1579,1601} %write{1579,1601}
temp	int	$tmp569	%read{2147483647,-1} %write{1579,1601}
temp	float	$tmp570	%read{1603,1603} %write{1602,1602}
temp	int	$tmp571	%read{1605,1605} %write{1604,1604}
temp	float	$tmp572.x	%read{1613,1613} %write{1610,1610}
temp	float	$tmp572.y	%read{1613,1613} %write{1611,1611}
temp	float	$tmp573.x	%read{1610,1610} %write{1607,1607}
temp	float	$tmp573.y	%read{1611,1611} %write{1608,1608}
temp	int	$tmp574	%read{1615,1615} %write{1614,1614}
temp	float	$tmp575	%read{1620,1620} %write{1619,1619}
temp	float	$tmp576	%read{1623,1623} %write{1622,1622}
temp	float	$tmp577	%read{1624,1624} %write{1623,1623}
temp	float	$tmp578	%read{1629,1629} %write{1624,1624}
temp	float	$tmp579	%read{1627,1627} %write{1625,1625}
temp	float	$tmp580	%read{1627,1627} %write{1626,1626}
temp	float	$tmp581	%read{1628,1628} %write{1627,1627}
temp	float	$tmp582	%read{1629,1629} %write{1628,1628}
temp	float	$tmp583	%read{1634,1634} %write{1633,1633}
temp	float	$tmp584	%read{1635,1635} %write{1634,1634}
temp	int	$tmp585	%read{1640,1640} %write{1639,1639}
temp	int	$tmp586	%read{1649,1681} %write{1649,1681}
temp	int	$tmp587	%read{1649,1681} %write{1649,1681}
temp	int	$tmp588	%read{1649,1681} %write{1649,1681}
temp	int	$tmp589	%read{1649,1681} %write{1649,1681}
temp	int	$tmp590	%read{1649,1681} %write{1649,1681}
temp	int	$tmp591	%read{1647,1681} %write{1648,1681}
temp	int	$tmp592	%read{1649,1681} %write{1649,1681}
temp	float	$tmp593	%read{1649,1681} %write{1649,1681}
temp	int	$tmp594	%read{1649,1681} %write{1649,1681}
temp	float	$tmp595	%read{1649,1681} %write{1649,1681}
temp	float	$tmp596	%read{1649,1681} %write{1649,1681}
temp	float	$tmp597	%read{1649,1681} %write{1649,1681}
temp	float	$tmp598.x	%read{1649,1681} %write{1649,1681}
temp	float	$tmp598.y	%read{1649,1681} %write{1649,1681}
temp	int	$tmp599	%read{2147483647,-1} %write{1649,1681}
temp	float	$tmp600	%read{1683,1683} %write{1682,1682}
temp	int	$tmp601	%read{1685,1685} %write{1684,1684}
temp	int	$tmp602	%read{1686,1690} %write{1685,1689}
temp	int	$tmp603	%read{1688,1688} %write{1687,1687}
temp	int	$tmp604	%read{1689,1689} %write{1688,1688}
temp	int	$tmp605	%read{1692,1692} %write{1691,1691}
temp	float	$tmp606	%read{1701,1701} %write{1698,1700}
temp	int	$tmp607	%read{1697,1697} %write{1696,1696}
temp	float	$tmp608	%read{1702,1702} %write{1701,1701}
temp	float	$tmp609	%read{1704,1704} %write{1703,1703}
temp	float	$tmp610	%read{1705,1705} %write{1704,1704}
temp	int	$tmp611	%read{1709,1709} %write{1708,1708}
temp	float	$tmp612	%read{1722,1722} %write{1721,1721}
temp	float	$tmp613	%read{1721,1721} %write{1718,1720}
temp	int	$tmp614	%read{1717,1717} %write{1716,1716}
temp	int	$tmp615	%read{1728,1756} %write{1728,1756}
temp	int	$tmp616	%read{1728,1756} %write{1728,1756}
temp	int	$tmp617	%read{1726,1756} %write{1727,1756}
temp	float	$tmp618.x	%read{1728,1756} %write{1728,1756}
temp	float	$tmp618.y	%read{1728,1756} %write{1728,1756}
temp	float	$tmp619	%read{1728,1756} %write{1728,1756}
temp	float	$tmp620	%read{1728,1756} %write{1728,1756}
temp	float	$tmp621	%read{1728,1756} %write{1728,1756}
temp	float	$tmp622	%read{1728,1756} %write{1728,1756}
temp	int	$tmp623	%read{1728,1756} %write{1728,1756}
temp	float	$tmp624	%read{1728,1756} %write{1728,1756}
temp	int	$tmp625	%read{2147483647,-1} %write{1728,1756}
temp	int	$tmp626	%read{1760,1760} %write{1759,1759}
temp	float	$tmp627	%read{1772,1772} %write{1769,1771}
temp	int	$tmp628	%read{1768,1768} %write{1767,1767}
temp	float	$tmp629.x	%read{1777,1777} %write{1774,1774}
temp	float	$tmp629.y	%read{1778,1778} %write{1775,1775}
temp	int	$tmp630	%read{1781,1803} %write{1781,1803}
temp	int	$tmp631	%read{1781,1803} %write{1781,1803}
temp	int	$tmp632	%read{1779,1803} %write{1780,1803}
temp	float	$tmp633	%read{1781,1803} %write{1781,1803}
temp	int	$tmp634	%read{1781,1803} %write{1781,1803}
temp	float	$tmp635	%read{1781,1803} %write{1781,1803}
temp	float	$tmp636	%read{1781,1803} %write{1781,1803}
temp	float	$tmp637.x	%read{1781,1803} %write{1781,1803}
temp	float	$tmp637.y	%read{1781,1803} %write{1781,1803}
temp	int	$tmp638	%read{2147483647,-1} %write{1781,1803}
temp	float	$tmp639	%read{1805,1805} %write{1804,1804}
temp	int	$tmp640	%read{1807,1807} %write{1806,1806}
temp	float	$tmp641	%read{1815,1815} %write{1812,1814}
temp	int	$tmp642	%read{1811,1811} %write{1810,1810}
temp	float	$tmp643	%read{1816,1816} %write{1815,1815}
temp	float	$tmp644	%read{1817,1817} %write{1816,1816}
temp	float	$tmp645	%read{1819,1819} %write{1818,1818}
const	string	$const34	"3D"		%read{1827,1827} %write{2147483647,-1}
temp	int	$tmp646	%read{1828,1828} %write{1827,1827}
temp	int	$tmp647	%read{1832,1832} %write{1831,1831}
temp	point	$tmp648	%read{1894,1894} %write{1893,1893}
temp	float	$tmp649	%read{1852,1852} %write{1849,1851}
temp	point	$tmp650	%read{1844,1844} %write{1843,1843}
const	string	$const35	"random_vector3_offset"		%read{1833,2439} %write{2147483647,-1}
temp	float	$tmp651	%read{1835,1835} %write{1834,1834}
temp	float	$tmp652	%read{1836,1836} %write{1835,1835}
temp	float	$tmp653	%read{1843,1843} %write{1836,1836}
temp	float	$tmp654	%read{1838,1838} %write{1837,1837}
temp	float	$tmp655	%read{1839,1839} %write{1838,1838}
temp	float	$tmp656	%read{1843,1843} %write{1839,1839}
temp	float	$tmp657	%read{1841,1841} %write{1840,1840}
temp	float	$tmp658	%read{1842,1842} %write{1841,1841}
temp	float	$tmp659	%read{1843,1843} %write{1842,1842}
temp	point	$tmp660	%read{1846,1846} %write{1844,1844}
temp	int	$tmp661	%read{1848,1848} %write{1847,1847}
temp	float	$tmp662	%read{1893,1893} %write{1852,1852}
temp	float	$tmp663	%read{1872,1872} %write{1869,1871}
temp	point	$tmp664	%read{1864,1864} %write{1863,1863}
temp	float	$tmp665	%read{1855,1855} %write{1854,1854}
temp	float	$tmp666	%read{1856,1856} %write{1855,1855}
temp	float	$tmp667	%read{1863,1863} %write{1856,1856}
temp	float	$tmp668	%read{1858,1858} %write{1857,1857}
temp	float	$tmp669	%read{1859,1859} %write{1858,1858}
temp	float	$tmp670	%read{1863,1863} %write{1859,1859}
temp	float	$tmp671	%read{1861,1861} %write{1860,1860}
temp	float	$tmp672	%read{1862,1862} %write{1861,1861}
temp	float	$tmp673	%read{1863,1863} %write{1862,1862}
temp	point	$tmp674	%read{1866,1866} %write{1864,1864}
temp	int	$tmp675	%read{1868,1868} %write{1867,1867}
temp	float	$tmp676	%read{1893,1893} %write{1872,1872}
temp	float	$tmp677	%read{1892,1892} %write{1889,1891}
temp	point	$tmp678	%read{1884,1884} %write{1883,1883}
temp	float	$tmp679	%read{1875,1875} %write{1874,1874}
temp	float	$tmp680	%read{1876,1876} %write{1875,1875}
temp	float	$tmp681	%read{1883,1883} %write{1876,1876}
temp	float	$tmp682	%read{1878,1878} %write{1877,1877}
temp	float	$tmp683	%read{1879,1879} %write{1878,1878}
temp	float	$tmp684	%read{1883,1883} %write{1879,1879}
temp	float	$tmp685	%read{1881,1881} %write{1880,1880}
temp	float	$tmp686	%read{1882,1882} %write{1881,1881}
temp	float	$tmp687	%read{1883,1883} %write{1882,1882}
temp	point	$tmp688	%read{1886,1886} %write{1884,1884}
temp	int	$tmp689	%read{1888,1888} %write{1887,1887}
temp	float	$tmp690	%read{1893,1893} %write{1892,1892}
temp	int	$tmp691	%read{1897,1897} %write{1896,1896}
temp	int	$tmp692	%read{1904,1920} %write{1904,1920}
temp	int	$tmp693	%read{1904,1920} %write{1904,1920}
temp	int	$tmp694	%read{1902,1920} %write{1903,1920}
temp	float	$tmp695	%read{1904,1920} %write{1904,1920}
temp	int	$tmp696	%read{1904,1920} %write{1904,1920}
temp	float	$tmp697	%read{1904,1920} %write{1904,1920}
temp	float	$tmp698	%read{1904,1920} %write{1904,1920}
temp	int	$tmp699	%read{2147483647,-1} %write{1904,1920}
temp	float	$tmp700	%read{1922,1922} %write{1921,1921}
temp	int	$tmp701	%read{1924,1924} %write{1923,1923}
temp	float	$tmp702	%read{1933,1933} %write{1925,1925}
temp	float	$tmp703	%read{1933,1933} %write{1930,1932}
temp	int	$tmp704	%read{1929,1929} %write{1928,1928}
temp	float	$tmp705	%read{1934,1934} %write{1933,1933}
temp	float	$tmp706	%read{1935,1935} %write{1934,1934}
temp	int	$tmp707	%read{1939,1939} %write{1938,1938}
temp	int	$tmp708	%read{1948,1965} %write{1948,1965}
temp	int	$tmp709	%read{1948,1965} %write{1948,1965}
temp	int	$tmp710	%read{1946,1965} %write{1947,1965}
temp	point	$tmp711	%read{1948,1965} %write{1948,1965}
temp	int	$tmp712	%read{1948,1965} %write{1948,1965}
temp	float	$tmp713	%read{1948,1965} %write{1948,1965}
temp	int	$tmp714	%read{2147483647,-1} %write{1948,1965}
temp	float	$tmp715	%read{1967,1967} %write{1966,1966}
temp	int	$tmp716	%read{1969,1969} %write{1968,1968}
temp	point	$tmp717	%read{1972,1972} %write{1970,1970}
temp	int	$tmp718	%read{1974,1974} %write{1973,1973}
temp	float	$tmp719	%read{1979,1979} %write{1978,1978}
temp	float	$tmp720	%read{1982,1982} %write{1981,1981}
temp	float	$tmp721	%read{1983,1983} %write{1982,1982}
temp	float	$tmp722	%read{1988,1988} %write{1983,1983}
temp	float	$tmp723	%read{1986,1986} %write{1984,1984}
temp	float	$tmp724	%read{1986,1986} %write{1985,1985}
temp	float	$tmp725	%read{1987,1987} %write{1986,1986}
temp	float	$tmp726	%read{1988,1988} %write{1987,1987}
temp	float	$tmp727	%read{1993,1993} %write{1992,1992}
temp	float	$tmp728	%read{1994,1994} %write{1993,1993}
temp	int	$tmp729	%read{1999,1999} %write{1998,1998}
temp	int	$tmp730	%read{2007,2034} %write{2007,2034}
temp	int	$tmp731	%read{2007,2034} %write{2007,2034}
temp	int	$tmp732	%read{2007,2034} %write{2007,2034}
temp	int	$tmp733	%read{2007,2034} %write{2007,2034}
temp	int	$tmp734	%read{2007,2034} %write{2007,2034}
temp	int	$tmp735	%read{2005,2034} %write{2006,2034}
temp	int	$tmp736	%read{2007,2034} %write{2007,2034}
temp	float	$tmp737	%read{2007,2034} %write{2007,2034}
temp	int	$tmp738	%read{2007,2034} %write{2007,2034}
temp	float	$tmp739	%read{2007,2034} %write{2007,2034}
temp	float	$tmp740	%read{2007,2034} %write{2007,2034}
temp	float	$tmp741	%read{2007,2034} %write{2007,2034}
temp	int	$tmp742	%read{2147483647,-1} %write{2007,2034}
temp	float	$tmp743	%read{2036,2036} %write{2035,2035}
temp	int	$tmp744	%read{2038,2038} %write{2037,2037}
temp	int	$tmp745	%read{2039,2043} %write{2038,2042}
temp	int	$tmp746	%read{2041,2041} %write{2040,2040}
temp	int	$tmp747	%read{2042,2042} %write{2041,2041}
temp	int	$tmp748	%read{2045,2045} %write{2044,2044}
temp	float	$tmp749	%read{2054,2054} %write{2051,2053}
temp	int	$tmp750	%read{2050,2050} %write{2049,2049}
temp	float	$tmp751	%read{2055,2055} %write{2054,2054}
temp	float	$tmp752	%read{2057,2057} %write{2056,2056}
temp	float	$tmp753	%read{2058,2058} %write{2057,2057}
temp	int	$tmp754	%read{2062,2062} %write{2061,2061}
temp	float	$tmp755	%read{2074,2074} %write{2073,2073}
temp	float	$tmp756	%read{2073,2073} %write{2070,2072}
temp	int	$tmp757	%read{2069,2069} %write{2068,2068}
temp	int	$tmp758	%read{2080,2103} %write{2080,2103}
temp	int	$tmp759	%read{2080,2103} %write{2080,2103}
temp	int	$tmp760	%read{2078,2103} %write{2079,2103}
temp	float	$tmp761	%read{2080,2103} %write{2080,2103}
temp	float	$tmp762	%read{2080,2103} %write{2080,2103}
temp	float	$tmp763	%read{2080,2103} %write{2080,2103}
temp	float	$tmp764	%read{2080,2103} %write{2080,2103}
temp	int	$tmp765	%read{2080,2103} %write{2080,2103}
temp	float	$tmp766	%read{2080,2103} %write{2080,2103}
temp	int	$tmp767	%read{2147483647,-1} %write{2080,2103}
temp	int	$tmp768	%read{2107,2107} %write{2106,2106}
temp	float	$tmp769	%read{2118,2118} %write{2115,2117}
temp	int	$tmp770	%read{2114,2114} %write{2113,2113}
temp	int	$tmp771	%read{2122,2139} %write{2122,2139}
temp	int	$tmp772	%read{2122,2139} %write{2122,2139}
temp	int	$tmp773	%read{2120,2139} %write{2121,2139}
temp	float	$tmp774	%read{2122,2139} %write{2122,2139}
temp	int	$tmp775	%read{2122,2139} %write{2122,2139}
temp	float	$tmp776	%read{2122,2139} %write{2122,2139}
temp	float	$tmp777	%read{2122,2139} %write{2122,2139}
temp	int	$tmp778	%read{2147483647,-1} %write{2122,2139}
temp	float	$tmp779	%read{2141,2141} %write{2140,2140}
temp	int	$tmp780	%read{2143,2143} %write{2142,2142}
temp	float	$tmp781	%read{2151,2151} %write{2148,2150}
temp	int	$tmp782	%read{2147,2147} %write{2146,2146}
temp	float	$tmp783	%read{2152,2152} %write{2151,2151}
temp	float	$tmp784	%read{2153,2153} %write{2152,2152}
temp	float	$tmp785	%read{2155,2155} %write{2154,2154}
temp	float	$tmp786	%read{2717,2717} %write{2214,2437}
temp	point	$tmp787	%read{2172,2172} %write{2171,2171}
temp	float	$tmp788	%read{2163,2163} %write{2162,2162}
temp	float	$tmp789	%read{2164,2164} %write{2163,2163}
temp	float	$tmp790	%read{2171,2171} %write{2164,2164}
temp	float	$tmp791	%read{2166,2166} %write{2165,2165}
temp	float	$tmp792	%read{2167,2167} %write{2166,2166}
temp	float	$tmp793	%read{2171,2171} %write{2167,2167}
temp	float	$tmp794	%read{2169,2169} %write{2168,2168}
temp	float	$tmp795	%read{2170,2170} %write{2169,2169}
temp	float	$tmp796	%read{2171,2171} %write{2170,2170}
temp	point	$tmp797	%read{2177,2387} %write{2172,2172}
temp	int	$tmp798	%read{2175,2175} %write{2174,2174}
temp	int	$tmp799	%read{2182,2198} %write{2182,2198}
temp	int	$tmp800	%read{2182,2198} %write{2182,2198}
temp	int	$tmp801	%read{2180,2198} %write{2181,2198}
temp	float	$tmp802	%read{2182,2198} %write{2182,2198}
temp	int	$tmp803	%read{2182,2198} %write{2182,2198}
temp	float	$tmp804	%read{2182,2198} %write{2182,2198}
temp	float	$tmp805	%read{2182,2198} %write{2182,2198}
temp	int	$tmp806	%read{2147483647,-1} %write{2182,2198}
temp	float	$tmp807	%read{2200,2200} %write{2199,2199}
temp	int	$tmp808	%read{2202,2202} %write{2201,2201}
temp	float	$tmp809	%read{2211,2211} %write{2203,2203}
temp	float	$tmp810	%read{2211,2211} %write{2208,2210}
temp	int	$tmp811	%read{2207,2207} %write{2206,2206}
temp	float	$tmp812	%read{2212,2212} %write{2211,2211}
temp	float	$tmp813	%read{2213,2213} %write{2212,2212}
temp	int	$tmp814	%read{2217,2217} %write{2216,2216}
temp	int	$tmp815	%read{2226,2243} %write{2226,2243}
temp	int	$tmp816	%read{2226,2243} %write{2226,2243}
temp	int	$tmp817	%read{2224,2243} %write{2225,2243}
temp	point	$tmp818	%read{2226,2243} %write{2226,2243}
temp	int	$tmp819	%read{2226,2243} %write{2226,2243}
temp	float	$tmp820	%read{2226,2243} %write{2226,2243}
temp	int	$tmp821	%read{2147483647,-1} %write{2226,2243}
temp	float	$tmp822	%read{2245,2245} %write{2244,2244}
temp	int	$tmp823	%read{2247,2247} %write{2246,2246}
temp	point	$tmp824	%read{2250,2250} %write{2248,2248}
temp	int	$tmp825	%read{2252,2252} %write{2251,2251}
temp	float	$tmp826	%read{2257,2257} %write{2256,2256}
temp	float	$tmp827	%read{2260,2260} %write{2259,2259}
temp	float	$tmp828	%read{2261,2261} %write{2260,2260}
temp	float	$tmp829	%read{2266,2266} %write{2261,2261}
temp	float	$tmp830	%read{2264,2264} %write{2262,2262}
temp	float	$tmp831	%read{2264,2264} %write{2263,2263}
temp	float	$tmp832	%read{2265,2265} %write{2264,2264}
temp	float	$tmp833	%read{2266,2266} %write{2265,2265}
temp	float	$tmp834	%read{2271,2271} %write{2270,2270}
temp	float	$tmp835	%read{2272,2272} %write{2271,2271}
temp	int	$tmp836	%read{2277,2277} %write{2276,2276}
temp	int	$tmp837	%read{2285,2312} %write{2285,2312}
temp	int	$tmp838	%read{2285,2312} %write{2285,2312}
temp	int	$tmp839	%read{2285,2312} %write{2285,2312}
temp	int	$tmp840	%read{2285,2312} %write{2285,2312}
temp	int	$tmp841	%read{2285,2312} %write{2285,2312}
temp	int	$tmp842	%read{2283,2312} %write{2284,2312}
temp	int	$tmp843	%read{2285,2312} %write{2285,2312}
temp	float	$tmp844	%read{2285,2312} %write{2285,2312}
temp	int	$tmp845	%read{2285,2312} %write{2285,2312}
temp	float	$tmp846	%read{2285,2312} %write{2285,2312}
temp	float	$tmp847	%read{2285,2312} %write{2285,2312}
temp	float	$tmp848	%read{2285,2312} %write{2285,2312}
temp	int	$tmp849	%read{2147483647,-1} %write{2285,2312}
temp	float	$tmp850	%read{2314,2314} %write{2313,2313}
temp	int	$tmp851	%read{2316,2316} %write{2315,2315}
temp	int	$tmp852	%read{2317,2321} %write{2316,2320}
temp	int	$tmp853	%read{2319,2319} %write{2318,2318}
temp	int	$tmp854	%read{2320,2320} %write{2319,2319}
temp	int	$tmp855	%read{2323,2323} %write{2322,2322}
temp	float	$tmp856	%read{2332,2332} %write{2329,2331}
temp	int	$tmp857	%read{2328,2328} %write{2327,2327}
temp	float	$tmp858	%read{2333,2333} %write{2332,2332}
temp	float	$tmp859	%read{2335,2335} %write{2334,2334}
temp	float	$tmp860	%read{2336,2336} %write{2335,2335}
temp	int	$tmp861	%read{2340,2340} %write{2339,2339}
temp	float	$tmp862	%read{2352,2352} %write{2351,2351}
temp	float	$tmp863	%read{2351,2351} %write{2348,2350}
temp	int	$tmp864	%read{2347,2347} %write{2346,2346}
temp	int	$tmp865	%read{2358,2381} %write{2358,2381}
temp	int	$tmp866	%read{2358,2381} %write{2358,2381}
temp	int	$tmp867	%read{2356,2381} %write{2357,2381}
temp	float	$tmp868	%read{2358,2381} %write{2358,2381}
temp	float	$tmp869	%read{2358,2381} %write{2358,2381}
temp	float	$tmp870	%read{2358,2381} %write{2358,2381}
temp	float	$tmp871	%read{2358,2381} %write{2358,2381}
temp	int	$tmp872	%read{2358,2381} %write{2358,2381}
temp	float	$tmp873	%read{2358,2381} %write{2358,2381}
temp	int	$tmp874	%read{2147483647,-1} %write{2358,2381}
temp	int	$tmp875	%read{2385,2385} %write{2384,2384}
temp	float	$tmp876	%read{2396,2396} %write{2393,2395}
temp	int	$tmp877	%read{2392,2392} %write{2391,2391}
temp	int	$tmp878	%read{2400,2417} %write{2400,2417}
temp	int	$tmp879	%read{2400,2417} %write{2400,2417}
temp	int	$tmp880	%read{2398,2417} %write{2399,2417}
temp	float	$tmp881	%read{2400,2417} %write{2400,2417}
temp	int	$tmp882	%read{2400,2417} %write{2400,2417}
temp	float	$tmp883	%read{2400,2417} %write{2400,2417}
temp	float	$tmp884	%read{2400,2417} %write{2400,2417}
temp	int	$tmp885	%read{2147483647,-1} %write{2400,2417}
temp	float	$tmp886	%read{2419,2419} %write{2418,2418}
temp	int	$tmp887	%read{2421,2421} %write{2420,2420}
temp	float	$tmp888	%read{2429,2429} %write{2426,2428}
temp	int	$tmp889	%read{2425,2425} %write{2424,2424}
temp	float	$tmp890	%read{2430,2430} %write{2429,2429}
temp	float	$tmp891	%read{2431,2431} %write{2430,2430}
temp	float	$tmp892	%read{2433,2433} %write{2432,2432}
temp	float	$tmp893	%read{2717,2717} %write{2492,2715}
temp	point	$tmp894	%read{2450,2450} %write{2449,2449}
const	float	$const36	4		%read{2440,3210} %write{2147483647,-1}
temp	float	$tmp895	%read{2441,2441} %write{2440,2440}
temp	float	$tmp896	%read{2442,2442} %write{2441,2441}
temp	float	$tmp897	%read{2449,2449} %write{2442,2442}
temp	float	$tmp898	%read{2444,2444} %write{2443,2443}
temp	float	$tmp899	%read{2445,2445} %write{2444,2444}
temp	float	$tmp900	%read{2449,2449} %write{2445,2445}
temp	float	$tmp901	%read{2447,2447} %write{2446,2446}
temp	float	$tmp902	%read{2448,2448} %write{2447,2447}
temp	float	$tmp903	%read{2449,2449} %write{2448,2448}
temp	point	$tmp904	%read{2455,2665} %write{2450,2450}
temp	int	$tmp905	%read{2453,2453} %write{2452,2452}
temp	int	$tmp906	%read{2460,2476} %write{2460,2476}
temp	int	$tmp907	%read{2460,2476} %write{2460,2476}
temp	int	$tmp908	%read{2458,2476} %write{2459,2476}
temp	float	$tmp909	%read{2460,2476} %write{2460,2476}
temp	int	$tmp910	%read{2460,2476} %write{2460,2476}
temp	float	$tmp911	%read{2460,2476} %write{2460,2476}
temp	float	$tmp912	%read{2460,2476} %write{2460,2476}
temp	int	$tmp913	%read{2147483647,-1} %write{2460,2476}
temp	float	$tmp914	%read{2478,2478} %write{2477,2477}
temp	int	$tmp915	%read{2480,2480} %write{2479,2479}
temp	float	$tmp916	%read{2489,2489} %write{2481,2481}
temp	float	$tmp917	%read{2489,2489} %write{2486,2488}
temp	int	$tmp918	%read{2485,2485} %write{2484,2484}
temp	float	$tmp919	%read{2490,2490} %write{2489,2489}
temp	float	$tmp920	%read{2491,2491} %write{2490,2490}
temp	int	$tmp921	%read{2495,2495} %write{2494,2494}
temp	int	$tmp922	%read{2504,2521} %write{2504,2521}
temp	int	$tmp923	%read{2504,2521} %write{2504,2521}
temp	int	$tmp924	%read{2502,2521} %write{2503,2521}
temp	point	$tmp925	%read{2504,2521} %write{2504,2521}
temp	int	$tmp926	%read{2504,2521} %write{2504,2521}
temp	float	$tmp927	%read{2504,2521} %write{2504,2521}
temp	int	$tmp928	%read{2147483647,-1} %write{2504,2521}
temp	float	$tmp929	%read{2523,2523} %write{2522,2522}
temp	int	$tmp930	%read{2525,2525} %write{2524,2524}
temp	point	$tmp931	%read{2528,2528} %write{2526,2526}
temp	int	$tmp932	%read{2530,2530} %write{2529,2529}
temp	float	$tmp933	%read{2535,2535} %write{2534,2534}
temp	float	$tmp934	%read{2538,2538} %write{2537,2537}
temp	float	$tmp935	%read{2539,2539} %write{2538,2538}
temp	float	$tmp936	%read{2544,2544} %write{2539,2539}
temp	float	$tmp937	%read{2542,2542} %write{2540,2540}
temp	float	$tmp938	%read{2542,2542} %write{2541,2541}
temp	float	$tmp939	%read{2543,2543} %write{2542,2542}
temp	float	$tmp940	%read{2544,2544} %write{2543,2543}
temp	float	$tmp941	%read{2549,2549} %write{2548,2548}
temp	float	$tmp942	%read{2550,2550} %write{2549,2549}
temp	int	$tmp943	%read{2555,2555} %write{2554,2554}
temp	int	$tmp944	%read{2563,2590} %write{2563,2590}
temp	int	$tmp945	%read{2563,2590} %write{2563,2590}
temp	int	$tmp946	%read{2563,2590} %write{2563,2590}
temp	int	$tmp947	%read{2563,2590} %write{2563,2590}
temp	int	$tmp948	%read{2563,2590} %write{2563,2590}
temp	int	$tmp949	%read{2561,2590} %write{2562,2590}
temp	int	$tmp950	%read{2563,2590} %write{2563,2590}
temp	float	$tmp951	%read{2563,2590} %write{2563,2590}
temp	int	$tmp952	%read{2563,2590} %write{2563,2590}
temp	float	$tmp953	%read{2563,2590} %write{2563,2590}
temp	float	$tmp954	%read{2563,2590} %write{2563,2590}
temp	float	$tmp955	%read{2563,2590} %write{2563,2590}
temp	int	$tmp956	%read{2147483647,-1} %write{2563,2590}
temp	float	$tmp957	%read{2592,2592} %write{2591,2591}
temp	int	$tmp958	%read{2594,2594} %write{2593,2593}
temp	int	$tmp959	%read{2595,2599} %write{2594,2598}
temp	int	$tmp960	%read{2597,2597} %write{2596,2596}
temp	int	$tmp961	%read{2598,2598} %write{2597,2597}
temp	int	$tmp962	%read{2601,2601} %write{2600,2600}
temp	float	$tmp963	%read{2610,2610} %write{2607,2609}
temp	int	$tmp964	%read{2606,2606} %write{2605,2605}
temp	float	$tmp965	%read{2611,2611} %write{2610,2610}
temp	float	$tmp966	%read{2613,2613} %write{2612,2612}
temp	float	$tmp967	%read{2614,2614} %write{2613,2613}
temp	int	$tmp968	%read{2618,2618} %write{2617,2617}
temp	float	$tmp969	%read{2630,2630} %write{2629,2629}
temp	float	$tmp970	%read{2629,2629} %write{2626,2628}
temp	int	$tmp971	%read{2625,2625} %write{2624,2624}
temp	int	$tmp972	%read{2636,2659} %write{2636,2659}
temp	int	$tmp973	%read{2636,2659} %write{2636,2659}
temp	int	$tmp974	%read{2634,2659} %write{2635,2659}
temp	float	$tmp975	%read{2636,2659} %write{2636,2659}
temp	float	$tmp976	%read{2636,2659} %write{2636,2659}
temp	float	$tmp977	%read{2636,2659} %write{2636,2659}
temp	float	$tmp978	%read{2636,2659} %write{2636,2659}
temp	int	$tmp979	%read{2636,2659} %write{2636,2659}
temp	float	$tmp980	%read{2636,2659} %write{2636,2659}
temp	int	$tmp981	%read{2147483647,-1} %write{2636,2659}
temp	int	$tmp982	%read{2663,2663} %write{2662,2662}
temp	float	$tmp983	%read{2674,2674} %write{2671,2673}
temp	int	$tmp984	%read{2670,2670} %write{2669,2669}
temp	int	$tmp985	%read{2678,2695} %write{2678,2695}
temp	int	$tmp986	%read{2678,2695} %write{2678,2695}
temp	int	$tmp987	%read{2676,2695} %write{2677,2695}
temp	float	$tmp988	%read{2678,2695} %write{2678,2695}
temp	int	$tmp989	%read{2678,2695} %write{2678,2695}
temp	float	$tmp990	%read{2678,2695} %write{2678,2695}
temp	float	$tmp991	%read{2678,2695} %write{2678,2695}
temp	int	$tmp992	%read{2147483647,-1} %write{2678,2695}
temp	float	$tmp993	%read{2697,2697} %write{2696,2696}
temp	int	$tmp994	%read{2699,2699} %write{2698,2698}
temp	float	$tmp995	%read{2707,2707} %write{2704,2706}
temp	int	$tmp996	%read{2703,2703} %write{2702,2702}
temp	float	$tmp997	%read{2708,2708} %write{2707,2707}
temp	float	$tmp998	%read{2709,2709} %write{2708,2708}
temp	float	$tmp999	%read{2711,2711} %write{2710,2710}
const	string	$const37	"4D"		%read{2719,2719} %write{2147483647,-1}
temp	int	$tmp1000	%read{2720,2720} %write{2719,2719}
temp	float	$tmp1001.x	%read{2726,2726} %write{2721,2721}
temp	float	$tmp1001.y	%read{2727,2727} %write{2722,2722}
temp	float	$tmp1001.z	%read{2728,2728} %write{2723,2723}
temp	float	$tmp1001.w	%read{2729,2729} %write{2724,2724}
const	int	$const38	2		%read{2723,2723} %write{2147483647,-1}
temp	int	$tmp1002	%read{2731,2731} %write{2730,2730}
temp	float	$tmp1003.x	%read{2841,2841} %write{2758,2758}
temp	float	$tmp1003.y	%read{2842,2842} %write{2785,2785}
temp	float	$tmp1003.z	%read{2843,2843} %write{2812,2812}
temp	float	$tmp1003.w	%read{2844,2844} %write{2839,2839}
temp	float	$tmp1004	%read{2758,2758} %write{2755,2757}
temp	float	$tmp1005.x	%read{2751,2751} %write{2746,2746}
temp	float	$tmp1005.y	%read{2751,2751} %write{2747,2747}
temp	float	$tmp1005.z	%read{2751,2751} %write{2748,2748}
temp	float	$tmp1005.w	%read{2752,2752} %write{2749,2749}
temp	float	$tmp1006.x	%read{2746,2746} %write{2735,2735}
temp	float	$tmp1006.y	%read{2747,2747} %write{2738,2738}
temp	float	$tmp1006.z	%read{2748,2748} %write{2741,2741}
temp	float	$tmp1006.w	%read{2749,2749} %write{2744,2744}
const	string	$const39	"random_vector4_offset"		%read{2732,3573} %write{2147483647,-1}
temp	float	$tmp1007	%read{2734,2734} %write{2733,2733}
temp	float	$tmp1008	%read{2735,2735} %write{2734,2734}
temp	float	$tmp1009	%read{2737,2737} %write{2736,2736}
temp	float	$tmp1010	%read{2738,2738} %write{2737,2737}
temp	float	$tmp1011	%read{2740,2740} %write{2739,2739}
temp	float	$tmp1012	%read{2741,2741} %write{2740,2740}
temp	float	$tmp1013	%read{2743,2743} %write{2742,2742}
temp	float	$tmp1014	%read{2744,2744} %write{2743,2743}
temp	point	$tmp1015	%read{2752,2752} %write{2751,2751}
temp	int	$tmp1016	%read{2754,2754} %write{2753,2753}
temp	float	$tmp1017	%read{2785,2785} %write{2782,2784}
temp	float	$tmp1018.x	%read{2778,2778} %write{2773,2773}
temp	float	$tmp1018.y	%read{2778,2778} %write{2774,2774}
temp	float	$tmp1018.z	%read{2778,2778} %write{2775,2775}
temp	float	$tmp1018.w	%read{2779,2779} %write{2776,2776}
temp	float	$tmp1019.x	%read{2773,2773} %write{2762,2762}
temp	float	$tmp1019.y	%read{2774,2774} %write{2765,2765}
temp	float	$tmp1019.z	%read{2775,2775} %write{2768,2768}
temp	float	$tmp1019.w	%read{2776,2776} %write{2771,2771}
temp	float	$tmp1020	%read{2761,2761} %write{2760,2760}
temp	float	$tmp1021	%read{2762,2762} %write{2761,2761}
temp	float	$tmp1022	%read{2764,2764} %write{2763,2763}
temp	float	$tmp1023	%read{2765,2765} %write{2764,2764}
temp	float	$tmp1024	%read{2767,2767} %write{2766,2766}
temp	float	$tmp1025	%read{2768,2768} %write{2767,2767}
temp	float	$tmp1026	%read{2770,2770} %write{2769,2769}
temp	float	$tmp1027	%read{2771,2771} %write{2770,2770}
temp	point	$tmp1028	%read{2779,2779} %write{2778,2778}
temp	int	$tmp1029	%read{2781,2781} %write{2780,2780}
temp	float	$tmp1030	%read{2812,2812} %write{2809,2811}
temp	float	$tmp1031.x	%read{2805,2805} %write{2800,2800}
temp	float	$tmp1031.y	%read{2805,2805} %write{2801,2801}
temp	float	$tmp1031.z	%read{2805,2805} %write{2802,2802}
temp	float	$tmp1031.w	%read{2806,2806} %write{2803,2803}
temp	float	$tmp1032.x	%read{2800,2800} %write{2789,2789}
temp	float	$tmp1032.y	%read{2801,2801} %write{2792,2792}
temp	float	$tmp1032.z	%read{2802,2802} %write{2795,2795}
temp	float	$tmp1032.w	%read{2803,2803} %write{2798,2798}
temp	float	$tmp1033	%read{2788,2788} %write{2787,2787}
temp	float	$tmp1034	%read{2789,2789} %write{2788,2788}
temp	float	$tmp1035	%read{2791,2791} %write{2790,2790}
temp	float	$tmp1036	%read{2792,2792} %write{2791,2791}
temp	float	$tmp1037	%read{2794,2794} %write{2793,2793}
temp	float	$tmp1038	%read{2795,2795} %write{2794,2794}
temp	float	$tmp1039	%read{2797,2797} %write{2796,2796}
temp	float	$tmp1040	%read{2798,2798} %write{2797,2797}
temp	point	$tmp1041	%read{2806,2806} %write{2805,2805}
temp	int	$tmp1042	%read{2808,2808} %write{2807,2807}
temp	float	$tmp1043	%read{2839,2839} %write{2836,2838}
temp	float	$tmp1044.x	%read{2832,2832} %write{2827,2827}
temp	float	$tmp1044.y	%read{2832,2832} %write{2828,2828}
temp	float	$tmp1044.z	%read{2832,2832} %write{2829,2829}
temp	float	$tmp1044.w	%read{2833,2833} %write{2830,2830}
temp	float	$tmp1045.x	%read{2827,2827} %write{2816,2816}
temp	float	$tmp1045.y	%read{2828,2828} %write{2819,2819}
temp	float	$tmp1045.z	%read{2829,2829} %write{2822,2822}
temp	float	$tmp1045.w	%read{2830,2830} %write{2825,2825}
temp	float	$tmp1046	%read{2815,2815} %write{2814,2814}
temp	float	$tmp1047	%read{2816,2816} %write{2815,2815}
temp	float	$tmp1048	%read{2818,2818} %write{2817,2817}
temp	float	$tmp1049	%read{2819,2819} %write{2818,2818}
temp	float	$tmp1050	%read{2821,2821} %write{2820,2820}
temp	float	$tmp1051	%read{2822,2822} %write{2821,2821}
temp	float	$tmp1052	%read{2824,2824} %write{2823,2823}
temp	float	$tmp1053	%read{2825,2825} %write{2824,2824}
temp	point	$tmp1054	%read{2833,2833} %write{2832,2832}
temp	int	$tmp1055	%read{2835,2835} %write{2834,2834}
temp	int	$tmp1056	%read{2847,2847} %write{2846,2846}
temp	int	$tmp1057	%read{2857,2883} %write{2857,2883}
temp	int	$tmp1058	%read{2857,2883} %write{2857,2883}
temp	int	$tmp1059	%read{2855,2883} %write{2856,2883}
temp	float	$tmp1060	%read{2857,2883} %write{2857,2883}
temp	point	$tmp1061	%read{2857,2883} %write{2857,2883}
temp	int	$tmp1062	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1063	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1064	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1065.x	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1065.y	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1065.z	%read{2857,2883} %write{2857,2883}
temp	float	$tmp1065.w	%read{2857,2883} %write{2857,2883}
temp	int	$tmp1066	%read{2147483647,-1} %write{2857,2883}
temp	float	$tmp1067	%read{2885,2885} %write{2884,2884}
temp	int	$tmp1068	%read{2887,2887} %write{2886,2886}
temp	float	$tmp1069	%read{2897,2897} %write{2888,2888}
temp	float	$tmp1070	%read{2897,2897} %write{2894,2896}
temp	point	$tmp1071	%read{2891,2891} %write{2890,2890}
temp	int	$tmp1072	%read{2893,2893} %write{2892,2892}
temp	float	$tmp1073	%read{2898,2898} %write{2897,2897}
temp	float	$tmp1074	%read{2899,2899} %write{2898,2898}
temp	int	$tmp1075	%read{2903,2903} %write{2902,2902}
temp	int	$tmp1076	%read{2915,2942} %write{2915,2942}
temp	int	$tmp1077	%read{2915,2942} %write{2915,2942}
temp	int	$tmp1078	%read{2913,2942} %write{2914,2942}
temp	float	$tmp1079.x	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1079.y	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1079.z	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1079.w	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1080.x	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1080.y	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1080.z	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1080.w	%read{2915,2942} %write{2915,2942}
temp	point	$tmp1081	%read{2915,2942} %write{2915,2942}
temp	int	$tmp1082	%read{2915,2942} %write{2915,2942}
temp	float	$tmp1083	%read{2915,2942} %write{2915,2942}
temp	int	$tmp1084	%read{2147483647,-1} %write{2915,2942}
temp	float	$tmp1085	%read{2944,2944} %write{2943,2943}
temp	int	$tmp1086	%read{2946,2946} %write{2945,2945}
temp	float	$tmp1087.x	%read{2958,2958} %write{2953,2953}
temp	float	$tmp1087.y	%read{2958,2958} %write{2954,2954}
temp	float	$tmp1087.z	%read{2958,2958} %write{2955,2955}
temp	float	$tmp1087.w	%read{2959,2959} %write{2956,2956}
temp	float	$tmp1088.x	%read{2953,2953} %write{2948,2948}
temp	float	$tmp1088.y	%read{2954,2954} %write{2949,2949}
temp	float	$tmp1088.z	%read{2955,2955} %write{2950,2950}
temp	float	$tmp1088.w	%read{2956,2956} %write{2951,2951}
temp	point	$tmp1089	%read{2959,2959} %write{2958,2958}
temp	int	$tmp1090	%read{2961,2961} %write{2960,2960}
temp	float	$tmp1091	%read{2966,2966} %write{2965,2965}
temp	float	$tmp1092	%read{2969,2969} %write{2968,2968}
temp	float	$tmp1093	%read{2970,2970} %write{2969,2969}
temp	float	$tmp1094	%read{2975,2975} %write{2970,2970}
temp	float	$tmp1095	%read{2973,2973} %write{2971,2971}
temp	float	$tmp1096	%read{2973,2973} %write{2972,2972}
temp	float	$tmp1097	%read{2974,2974} %write{2973,2973}
temp	float	$tmp1098	%read{2975,2975} %write{2974,2974}
temp	float	$tmp1099	%read{2980,2980} %write{2979,2979}
temp	float	$tmp1100	%read{2981,2981} %write{2980,2980}
temp	int	$tmp1101	%read{2986,2986} %write{2985,2985}
temp	int	$tmp1102	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1103	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1104	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1105	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1106	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1107	%read{2995,3034} %write{2996,3034}
temp	int	$tmp1108	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1109	%read{2997,3034} %write{2997,3034}
temp	point	$tmp1110	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1111	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1112	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1113	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1114	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1115.x	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1115.y	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1115.z	%read{2997,3034} %write{2997,3034}
temp	float	$tmp1115.w	%read{2997,3034} %write{2997,3034}
temp	int	$tmp1116	%read{2147483647,-1} %write{2997,3034}
temp	float	$tmp1117	%read{3036,3036} %write{3035,3035}
temp	int	$tmp1118	%read{3038,3038} %write{3037,3037}
temp	int	$tmp1119	%read{3039,3043} %write{3038,3042}
temp	int	$tmp1120	%read{3041,3041} %write{3040,3040}
temp	int	$tmp1121	%read{3042,3042} %write{3041,3041}
temp	int	$tmp1122	%read{3045,3045} %write{3044,3044}
temp	float	$tmp1123	%read{3055,3055} %write{3052,3054}
temp	point	$tmp1124	%read{3049,3049} %write{3048,3048}
temp	int	$tmp1125	%read{3051,3051} %write{3050,3050}
temp	float	$tmp1126	%read{3056,3056} %write{3055,3055}
temp	float	$tmp1127	%read{3058,3058} %write{3057,3057}
temp	float	$tmp1128	%read{3059,3059} %write{3058,3058}
temp	int	$tmp1129	%read{3063,3063} %write{3062,3062}
temp	float	$tmp1130	%read{3079,3079} %write{3078,3078}
temp	float	$tmp1131	%read{3078,3078} %write{3075,3077}
temp	point	$tmp1132	%read{3072,3072} %write{3071,3071}
temp	int	$tmp1133	%read{3074,3074} %write{3073,3073}
temp	int	$tmp1134	%read{3085,3118} %write{3085,3118}
temp	int	$tmp1135	%read{3085,3118} %write{3085,3118}
temp	int	$tmp1136	%read{3083,3118} %write{3084,3118}
temp	float	$tmp1137.x	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1137.y	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1137.z	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1137.w	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1138	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1139	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1140	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1141	%read{3085,3118} %write{3085,3118}
temp	point	$tmp1142	%read{3085,3118} %write{3085,3118}
temp	int	$tmp1143	%read{3085,3118} %write{3085,3118}
temp	float	$tmp1144	%read{3085,3118} %write{3085,3118}
temp	int	$tmp1145	%read{2147483647,-1} %write{3085,3118}
temp	int	$tmp1146	%read{3122,3122} %write{3121,3121}
temp	float	$tmp1147	%read{3137,3137} %write{3134,3136}
temp	point	$tmp1148	%read{3131,3131} %write{3130,3130}
temp	int	$tmp1149	%read{3133,3133} %write{3132,3132}
temp	float	$tmp1150.x	%read{3144,3144} %write{3139,3139}
temp	float	$tmp1150.y	%read{3145,3145} %write{3140,3140}
temp	float	$tmp1150.z	%read{3146,3146} %write{3141,3141}
temp	float	$tmp1150.w	%read{3147,3147} %write{3142,3142}
temp	int	$tmp1151	%read{3150,3177} %write{3150,3177}
temp	int	$tmp1152	%read{3150,3177} %write{3150,3177}
temp	int	$tmp1153	%read{3148,3177} %write{3149,3177}
temp	float	$tmp1154	%read{3150,3177} %write{3150,3177}
temp	point	$tmp1155	%read{3150,3177} %write{3150,3177}
temp	int	$tmp1156	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1157	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1158	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1159.x	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1159.y	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1159.z	%read{3150,3177} %write{3150,3177}
temp	float	$tmp1159.w	%read{3150,3177} %write{3150,3177}
temp	int	$tmp1160	%read{2147483647,-1} %write{3150,3177}
temp	float	$tmp1161	%read{3179,3179} %write{3178,3178}
temp	int	$tmp1162	%read{3181,3181} %write{3180,3180}
temp	float	$tmp1163	%read{3190,3190} %write{3187,3189}
temp	point	$tmp1164	%read{3184,3184} %write{3183,3183}
temp	int	$tmp1165	%read{3186,3186} %write{3185,3185}
temp	float	$tmp1166	%read{3191,3191} %write{3190,3190}
temp	float	$tmp1167	%read{3192,3192} %write{3191,3191}
temp	float	$tmp1168	%read{3194,3194} %write{3193,3193}
temp	float	$tmp1169	%read{3946,3946} %write{3273,3571}
temp	float	$tmp1170.x	%read{3222,3497} %write{3214,3214}
temp	float	$tmp1170.y	%read{3223,3498} %write{3215,3215}
temp	float	$tmp1170.z	%read{3224,3499} %write{3216,3216}
temp	float	$tmp1170.w	%read{3225,3500} %write{3217,3217}
temp	float	$tmp1171.x	%read{3214,3214} %write{3203,3203}
temp	float	$tmp1171.y	%read{3215,3215} %write{3206,3206}
temp	float	$tmp1171.z	%read{3216,3216} %write{3209,3209}
temp	float	$tmp1171.w	%read{3217,3217} %write{3212,3212}
temp	float	$tmp1172	%read{3202,3202} %write{3201,3201}
temp	float	$tmp1173	%read{3203,3203} %write{3202,3202}
temp	float	$tmp1174	%read{3205,3205} %write{3204,3204}
temp	float	$tmp1175	%read{3206,3206} %write{3205,3205}
temp	float	$tmp1176	%read{3208,3208} %write{3207,3207}
temp	float	$tmp1177	%read{3209,3209} %write{3208,3208}
temp	float	$tmp1178	%read{3211,3211} %write{3210,3210}
temp	float	$tmp1179	%read{3212,3212} %write{3211,3211}
temp	int	$tmp1180	%read{3220,3220} %write{3219,3219}
temp	int	$tmp1181	%read{3230,3256} %write{3230,3256}
temp	int	$tmp1182	%read{3230,3256} %write{3230,3256}
temp	int	$tmp1183	%read{3228,3256} %write{3229,3256}
temp	float	$tmp1184	%read{3230,3256} %write{3230,3256}
temp	point	$tmp1185	%read{3230,3256} %write{3230,3256}
temp	int	$tmp1186	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1187	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1188	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1189.x	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1189.y	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1189.z	%read{3230,3256} %write{3230,3256}
temp	float	$tmp1189.w	%read{3230,3256} %write{3230,3256}
temp	int	$tmp1190	%read{2147483647,-1} %write{3230,3256}
temp	float	$tmp1191	%read{3258,3258} %write{3257,3257}
temp	int	$tmp1192	%read{3260,3260} %write{3259,3259}
temp	float	$tmp1193	%read{3270,3270} %write{3261,3261}
temp	float	$tmp1194	%read{3270,3270} %write{3267,3269}
temp	point	$tmp1195	%read{3264,3264} %write{3263,3263}
temp	int	$tmp1196	%read{3266,3266} %write{3265,3265}
temp	float	$tmp1197	%read{3271,3271} %write{3270,3270}
temp	float	$tmp1198	%read{3272,3272} %write{3271,3271}
temp	int	$tmp1199	%read{3276,3276} %write{3275,3275}
temp	int	$tmp1200	%read{3288,3315} %write{3288,3315}
temp	int	$tmp1201	%read{3288,3315} %write{3288,3315}
temp	int	$tmp1202	%read{3286,3315} %write{3287,3315}
temp	float	$tmp1203.x	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1203.y	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1203.z	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1203.w	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1204.x	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1204.y	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1204.z	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1204.w	%read{3288,3315} %write{3288,3315}
temp	point	$tmp1205	%read{3288,3315} %write{3288,3315}
temp	int	$tmp1206	%read{3288,3315} %write{3288,3315}
temp	float	$tmp1207	%read{3288,3315} %write{3288,3315}
temp	int	$tmp1208	%read{2147483647,-1} %write{3288,3315}
temp	float	$tmp1209	%read{3317,3317} %write{3316,3316}
temp	int	$tmp1210	%read{3319,3319} %write{3318,3318}
temp	float	$tmp1211.x	%read{3331,3331} %write{3326,3326}
temp	float	$tmp1211.y	%read{3331,3331} %write{3327,3327}
temp	float	$tmp1211.z	%read{3331,3331} %write{3328,3328}
temp	float	$tmp1211.w	%read{3332,3332} %write{3329,3329}
temp	float	$tmp1212.x	%read{3326,3326} %write{3321,3321}
temp	float	$tmp1212.y	%read{3327,3327} %write{3322,3322}
temp	float	$tmp1212.z	%read{3328,3328} %write{3323,3323}
temp	float	$tmp1212.w	%read{3329,3329} %write{3324,3324}
temp	point	$tmp1213	%read{3332,3332} %write{3331,3331}
temp	int	$tmp1214	%read{3334,3334} %write{3333,3333}
temp	float	$tmp1215	%read{3339,3339} %write{3338,3338}
temp	float	$tmp1216	%read{3342,3342} %write{3341,3341}
temp	float	$tmp1217	%read{3343,3343} %write{3342,3342}
temp	float	$tmp1218	%read{3348,3348} %write{3343,3343}
temp	float	$tmp1219	%read{3346,3346} %write{3344,3344}
temp	float	$tmp1220	%read{3346,3346} %write{3345,3345}
temp	float	$tmp1221	%read{3347,3347} %write{3346,3346}
temp	float	$tmp1222	%read{3348,3348} %write{3347,3347}
temp	float	$tmp1223	%read{3353,3353} %write{3352,3352}
temp	float	$tmp1224	%read{3354,3354} %write{3353,3353}
temp	int	$tmp1225	%read{3359,3359} %write{3358,3358}
temp	int	$tmp1226	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1227	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1228	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1229	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1230	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1231	%read{3368,3407} %write{3369,3407}
temp	int	$tmp1232	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1233	%read{3370,3407} %write{3370,3407}
temp	point	$tmp1234	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1235	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1236	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1237	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1238	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1239.x	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1239.y	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1239.z	%read{3370,3407} %write{3370,3407}
temp	float	$tmp1239.w	%read{3370,3407} %write{3370,3407}
temp	int	$tmp1240	%read{2147483647,-1} %write{3370,3407}
temp	float	$tmp1241	%read{3409,3409} %write{3408,3408}
temp	int	$tmp1242	%read{3411,3411} %write{3410,3410}
temp	int	$tmp1243	%read{3412,3416} %write{3411,3415}
temp	int	$tmp1244	%read{3414,3414} %write{3413,3413}
temp	int	$tmp1245	%read{3415,3415} %write{3414,3414}
temp	int	$tmp1246	%read{3418,3418} %write{3417,3417}
temp	float	$tmp1247	%read{3428,3428} %write{3425,3427}
temp	point	$tmp1248	%read{3422,3422} %write{3421,3421}
temp	int	$tmp1249	%read{3424,3424} %write{3423,3423}
temp	float	$tmp1250	%read{3429,3429} %write{3428,3428}
temp	float	$tmp1251	%read{3431,3431} %write{3430,3430}
temp	float	$tmp1252	%read{3432,3432} %write{3431,3431}
temp	int	$tmp1253	%read{3436,3436} %write{3435,3435}
temp	float	$tmp1254	%read{3452,3452} %write{3451,3451}
temp	float	$tmp1255	%read{3451,3451} %write{3448,3450}
temp	point	$tmp1256	%read{3445,3445} %write{3444,3444}
temp	int	$tmp1257	%read{3447,3447} %write{3446,3446}
temp	int	$tmp1258	%read{3458,3491} %write{3458,3491}
temp	int	$tmp1259	%read{3458,3491} %write{3458,3491}
temp	int	$tmp1260	%read{3456,3491} %write{3457,3491}
temp	float	$tmp1261.x	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1261.y	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1261.z	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1261.w	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1262	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1263	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1264	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1265	%read{3458,3491} %write{3458,3491}
temp	point	$tmp1266	%read{3458,3491} %write{3458,3491}
temp	int	$tmp1267	%read{3458,3491} %write{3458,3491}
temp	float	$tmp1268	%read{3458,3491} %write{3458,3491}
temp	int	$tmp1269	%read{2147483647,-1} %write{3458,3491}
temp	int	$tmp1270	%read{3495,3495} %write{3494,3494}
temp	float	$tmp1271	%read{3510,3510} %write{3507,3509}
temp	point	$tmp1272	%read{3504,3504} %write{3503,3503}
temp	int	$tmp1273	%read{3506,3506} %write{3505,3505}
temp	float	$tmp1274.x	%read{3517,3517} %write{3512,3512}
temp	float	$tmp1274.y	%read{3518,3518} %write{3513,3513}
temp	float	$tmp1274.z	%read{3519,3519} %write{3514,3514}
temp	float	$tmp1274.w	%read{3520,3520} %write{3515,3515}
temp	int	$tmp1275	%read{3523,3550} %write{3523,3550}
temp	int	$tmp1276	%read{3523,3550} %write{3523,3550}
temp	int	$tmp1277	%read{3521,3550} %write{3522,3550}
temp	float	$tmp1278	%read{3523,3550} %write{3523,3550}
temp	point	$tmp1279	%read{3523,3550} %write{3523,3550}
temp	int	$tmp1280	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1281	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1282	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1283.x	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1283.y	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1283.z	%read{3523,3550} %write{3523,3550}
temp	float	$tmp1283.w	%read{3523,3550} %write{3523,3550}
temp	int	$tmp1284	%read{2147483647,-1} %write{3523,3550}
temp	float	$tmp1285	%read{3552,3552} %write{3551,3551}
temp	int	$tmp1286	%read{3554,3554} %write{3553,3553}
temp	float	$tmp1287	%read{3563,3563} %write{3560,3562}
temp	point	$tmp1288	%read{3557,3557} %write{3556,3556}
temp	int	$tmp1289	%read{3559,3559} %write{3558,3558}
temp	float	$tmp1290	%read{3564,3564} %write{3563,3563}
temp	float	$tmp1291	%read{3565,3565} %write{3564,3564}
temp	float	$tmp1292	%read{3567,3567} %write{3566,3566}
temp	float	$tmp1293	%read{3946,3946} %write{3646,3944}
temp	float	$tmp1294.x	%read{3595,3870} %write{3587,3587}
temp	float	$tmp1294.y	%read{3596,3871} %write{3588,3588}
temp	float	$tmp1294.z	%read{3597,3872} %write{3589,3589}
temp	float	$tmp1294.w	%read{3598,3873} %write{3590,3590}
temp	float	$tmp1295.x	%read{3587,3587} %write{3576,3576}
temp	float	$tmp1295.y	%read{3588,3588} %write{3579,3579}
temp	float	$tmp1295.z	%read{3589,3589} %write{3582,3582}
temp	float	$tmp1295.w	%read{3590,3590} %write{3585,3585}
const	float	$const40	5		%read{3574,3583} %write{2147483647,-1}
temp	float	$tmp1296	%read{3575,3575} %write{3574,3574}
temp	float	$tmp1297	%read{3576,3576} %write{3575,3575}
temp	float	$tmp1298	%read{3578,3578} %write{3577,3577}
temp	float	$tmp1299	%read{3579,3579} %write{3578,3578}
temp	float	$tmp1300	%read{3581,3581} %write{3580,3580}
temp	float	$tmp1301	%read{3582,3582} %write{3581,3581}
temp	float	$tmp1302	%read{3584,3584} %write{3583,3583}
temp	float	$tmp1303	%read{3585,3585} %write{3584,3584}
temp	int	$tmp1304	%read{3593,3593} %write{3592,3592}
temp	int	$tmp1305	%read{3603,3629} %write{3603,3629}
temp	int	$tmp1306	%read{3603,3629} %write{3603,3629}
temp	int	$tmp1307	%read{3601,3629} %write{3602,3629}
temp	float	$tmp1308	%read{3603,3629} %write{3603,3629}
temp	point	$tmp1309	%read{3603,3629} %write{3603,3629}
temp	int	$tmp1310	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1311	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1312	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1313.x	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1313.y	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1313.z	%read{3603,3629} %write{3603,3629}
temp	float	$tmp1313.w	%read{3603,3629} %write{3603,3629}
temp	int	$tmp1314	%read{2147483647,-1} %write{3603,3629}
temp	float	$tmp1315	%read{3631,3631} %write{3630,3630}
temp	int	$tmp1316	%read{3633,3633} %write{3632,3632}
temp	float	$tmp1317	%read{3643,3643} %write{3634,3634}
temp	float	$tmp1318	%read{3643,3643} %write{3640,3642}
temp	point	$tmp1319	%read{3637,3637} %write{3636,3636}
temp	int	$tmp1320	%read{3639,3639} %write{3638,3638}
temp	float	$tmp1321	%read{3644,3644} %write{3643,3643}
temp	float	$tmp1322	%read{3645,3645} %write{3644,3644}
temp	int	$tmp1323	%read{3649,3649} %write{3648,3648}
temp	int	$tmp1324	%read{3661,3688} %write{3661,3688}
temp	int	$tmp1325	%read{3661,3688} %write{3661,3688}
temp	int	$tmp1326	%read{3659,3688} %write{3660,3688}
temp	float	$tmp1327.x	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1327.y	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1327.z	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1327.w	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1328.x	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1328.y	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1328.z	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1328.w	%read{3661,3688} %write{3661,3688}
temp	point	$tmp1329	%read{3661,3688} %write{3661,3688}
temp	int	$tmp1330	%read{3661,3688} %write{3661,3688}
temp	float	$tmp1331	%read{3661,3688} %write{3661,3688}
temp	int	$tmp1332	%read{2147483647,-1} %write{3661,3688}
temp	float	$tmp1333	%read{3690,3690} %write{3689,3689}
temp	int	$tmp1334	%read{3692,3692} %write{3691,3691}
temp	float	$tmp1335.x	%read{3704,3704} %write{3699,3699}
temp	float	$tmp1335.y	%read{3704,3704} %write{3700,3700}
temp	float	$tmp1335.z	%read{3704,3704} %write{3701,3701}
temp	float	$tmp1335.w	%read{3705,3705} %write{3702,3702}
temp	float	$tmp1336.x	%read{3699,3699} %write{3694,3694}
temp	float	$tmp1336.y	%read{3700,3700} %write{3695,3695}
temp	float	$tmp1336.z	%read{3701,3701} %write{3696,3696}
temp	float	$tmp1336.w	%read{3702,3702} %write{3697,3697}
temp	point	$tmp1337	%read{3705,3705} %write{3704,3704}
temp	int	$tmp1338	%read{3707,3707} %write{3706,3706}
temp	float	$tmp1339	%read{3712,3712} %write{3711,3711}
temp	float	$tmp1340	%read{3715,3715} %write{3714,3714}
temp	float	$tmp1341	%read{3716,3716} %write{3715,3715}
temp	float	$tmp1342	%read{3721,3721} %write{3716,3716}
temp	float	$tmp1343	%read{3719,3719} %write{3717,3717}
temp	float	$tmp1344	%read{3719,3719} %write{3718,3718}
temp	float	$tmp1345	%read{3720,3720} %write{3719,3719}
temp	float	$tmp1346	%read{3721,3721} %write{3720,3720}
temp	float	$tmp1347	%read{3726,3726} %write{3725,3725}
temp	float	$tmp1348	%read{3727,3727} %write{3726,3726}
temp	int	$tmp1349	%read{3732,3732} %write{3731,3731}
temp	int	$tmp1350	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1351	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1352	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1353	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1354	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1355	%read{3741,3780} %write{3742,3780}
temp	int	$tmp1356	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1357	%read{3743,3780} %write{3743,3780}
temp	point	$tmp1358	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1359	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1360	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1361	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1362	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1363.x	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1363.y	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1363.z	%read{3743,3780} %write{3743,3780}
temp	float	$tmp1363.w	%read{3743,3780} %write{3743,3780}
temp	int	$tmp1364	%read{2147483647,-1} %write{3743,3780}
temp	float	$tmp1365	%read{3782,3782} %write{3781,3781}
temp	int	$tmp1366	%read{3784,3784} %write{3783,3783}
temp	int	$tmp1367	%read{3785,3789} %write{3784,3788}
temp	int	$tmp1368	%read{3787,3787} %write{3786,3786}
temp	int	$tmp1369	%read{3788,3788} %write{3787,3787}
temp	int	$tmp1370	%read{3791,3791} %write{3790,3790}
temp	float	$tmp1371	%read{3801,3801} %write{3798,3800}
temp	point	$tmp1372	%read{3795,3795} %write{3794,3794}
temp	int	$tmp1373	%read{3797,3797} %write{3796,3796}
temp	float	$tmp1374	%read{3802,3802} %write{3801,3801}
temp	float	$tmp1375	%read{3804,3804} %write{3803,3803}
temp	float	$tmp1376	%read{3805,3805} %write{3804,3804}
temp	int	$tmp1377	%read{3809,3809} %write{3808,3808}
temp	float	$tmp1378	%read{3825,3825} %write{3824,3824}
temp	float	$tmp1379	%read{3824,3824} %write{3821,3823}
temp	point	$tmp1380	%read{3818,3818} %write{3817,3817}
temp	int	$tmp1381	%read{3820,3820} %write{3819,3819}
temp	int	$tmp1382	%read{3831,3864} %write{3831,3864}
temp	int	$tmp1383	%read{3831,3864} %write{3831,3864}
temp	int	$tmp1384	%read{3829,3864} %write{3830,3864}
temp	float	$tmp1385.x	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1385.y	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1385.z	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1385.w	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1386	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1387	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1388	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1389	%read{3831,3864} %write{3831,3864}
temp	point	$tmp1390	%read{3831,3864} %write{3831,3864}
temp	int	$tmp1391	%read{3831,3864} %write{3831,3864}
temp	float	$tmp1392	%read{3831,3864} %write{3831,3864}
temp	int	$tmp1393	%read{2147483647,-1} %write{3831,3864}
temp	int	$tmp1394	%read{3868,3868} %write{3867,3867}
temp	float	$tmp1395	%read{3883,3883} %write{3880,3882}
temp	point	$tmp1396	%read{3877,3877} %write{3876,3876}
temp	int	$tmp1397	%read{3879,3879} %write{3878,3878}
temp	float	$tmp1398.x	%read{3890,3890} %write{3885,3885}
temp	float	$tmp1398.y	%read{3891,3891} %write{3886,3886}
temp	float	$tmp1398.z	%read{3892,3892} %write{3887,3887}
temp	float	$tmp1398.w	%read{3893,3893} %write{3888,3888}
temp	int	$tmp1399	%read{3896,3923} %write{3896,3923}
temp	int	$tmp1400	%read{3896,3923} %write{3896,3923}
temp	int	$tmp1401	%read{3894,3923} %write{3895,3923}
temp	float	$tmp1402	%read{3896,3923} %write{3896,3923}
temp	point	$tmp1403	%read{3896,3923} %write{3896,3923}
temp	int	$tmp1404	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1405	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1406	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1407.x	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1407.y	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1407.z	%read{3896,3923} %write{3896,3923}
temp	float	$tmp1407.w	%read{3896,3923} %write{3896,3923}
temp	int	$tmp1408	%read{2147483647,-1} %write{3896,3923}
temp	float	$tmp1409	%read{3925,3925} %write{3924,3924}
temp	int	$tmp1410	%read{3927,3927} %write{3926,3926}
temp	float	$tmp1411	%read{3936,3936} %write{3933,3935}
temp	point	$tmp1412	%read{3930,3930} %write{3929,3929}
temp	int	$tmp1413	%read{3932,3932} %write{3931,3931}
temp	float	$tmp1414	%read{3937,3937} %write{3936,3936}
temp	float	$tmp1415	%read{3938,3938} %write{3937,3937}
temp	float	$tmp1416	%read{3940,3940} %write{3939,3939}
const	string	$const41	"Unknown Dimension!"		%read{3948,3948} %write{2147483647,-1}
code ___main___
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:255
#   vector3 p = Vector;
	assign		p Vector 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{255} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:256
#   if (use_mapping)
	if		use_mapping 3 3 	%line{256} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:257
#     p = transform(mapping, p);
	transform	p mapping p 	%line{257} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:259
#   float detail = clamp(Detail, 0.0, 15.0);
	functioncall	$const3 6 	%line{259} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Detail $const2 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		detail $tmp1 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:260
#   float roughness = max(Roughness, 0.0);
	max		roughness Roughness $const1 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{260} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:262
#   p *= Scale;
	mul		p p Scale 	%line{262} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:263
#   float w = W * Scale;
	mul		w W Scale 	%line{263} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:265
#   if (dimensions == "1D") {
	eq		$tmp2 dimensions $const4 	%line{265} %argrw{"wrr"}
	if		$tmp2 839 3949 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:266
#     Fac = noise_texture(
	functioncall	$const5 839 	%line{266} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:95
#   float p = co;
	assign		___609_p w 	%line{95} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:96
#   if (distortion != 0.0) {
	neq		$tmp3 Distortion $const1 	%line{96} %argrw{"wrr"}
	if		$tmp3 29 29 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	functioncall	$const6 19 	%line{97} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:53
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp6 $const8 $const1 	%line{53} %argrw{"wrr"}
	mul		$tmp7 $tmp6 $const7 	%argrw{"wrr"}
	add		$tmp5 $const7 $tmp7 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	add		$tmp8 ___609_p $tmp5 	%line{97} %argrw{"wrr"}
	functioncall	$const9 27 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp8 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp9 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp9 26 26 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp4 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp4 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:97
#     p += safe_snoise(p + random_float_offset(0.0)) * distortion;
	mul		$tmp10 $tmp4 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{97} %argrw{"wrr"}
	add		___609_p ___609_p $tmp10 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:100
#   float value = noise_select(p, detail, roughness, lacunarity, offset, gain, type, use_normalize);
	functioncall	$const11 295 	%line{100} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	eq		$tmp11 type $const12 	%line{79} %argrw{"wrr"}
	if		$tmp11 72 295 	%argrw{"r"}
	functioncall	$const13 71 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	assign		___492_p ___609_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{225} %argrw{"wr"}
	assign		___492_value $const14 	%argrw{"wr"}
	assign		___492_pwr $const14 	%argrw{"wr"}
	for		$tmp14 38 41 53 55 	%argrw{"r"}
	assign		___493_i $const15 	%argrw{"wr"}
	assign		$tmp12 detail 	%argrw{"wr"}
	le		$tmp13 ___493_i $tmp12 	%argrw{"wrr"}
	neq		$tmp14 $tmp13 $const15 	%argrw{"wrr"}
	functioncall	$const9 48 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp16 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp16 47 47 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp15 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp15 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp17 ___492_pwr $tmp15 	%line{225} %argrw{"wrr"}
	add		$tmp18 $tmp17 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp18 	%argrw{"wrr"}
	mul		___492_pwr ___492_pwr roughness 	%argrw{"wrr"}
	mul		___492_p ___492_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp19 ___493_i 	%argrw{"wr"}
	add		___493_i ___493_i $const16 	%argrw{"wrr"}
	floor		$tmp20 detail 	%argrw{"wr"}
	sub		___492_rmd detail $tmp20 	%argrw{"wrr"}
	neq		$tmp21 ___492_rmd $const1 	%argrw{"wrr"}
	if		$tmp21 70 70 	%argrw{"r"}
	mul		$tmp22 ___492_rmd ___492_pwr 	%argrw{"wrr"}
	functioncall	$const9 67 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp24 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp24 66 66 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp23 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp23 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp25 $tmp22 $tmp23 	%line{225} %argrw{"wrr"}
	add		$tmp26 $tmp25 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp26 	%argrw{"wrr"}
	assign		___609_value ___492_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp27 type $const17 	%argrw{"wrr"}
	if		$tmp27 132 295 	%argrw{"r"}
	functioncall	$const18 131 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	assign		___472_p ___609_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{218} %argrw{"wr"}
	assign		___472_fscale $const14 	%argrw{"wr"}
	assign		___472_amp $const14 	%argrw{"wr"}
	assign		___472_maxamp $const1 	%argrw{"wr"}
	assign		___472_sum $const1 	%argrw{"wr"}
	for		$tmp30 82 85 98 100 	%argrw{"r"}
	assign		___473_i $const15 	%argrw{"wr"}
	assign		$tmp28 detail 	%argrw{"wr"}
	le		$tmp29 ___473_i $tmp28 	%argrw{"wrr"}
	neq		$tmp30 $tmp29 $const15 	%argrw{"wrr"}
	mul		$tmp31 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 93 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp31 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp32 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp32 92 92 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp33 ___474_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp33 	%argrw{"wrr"}
	add		___472_maxamp ___472_maxamp ___472_amp 	%argrw{"wrr"}
	mul		___472_amp ___472_amp roughness 	%argrw{"wrr"}
	mul		___472_fscale ___472_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp34 ___473_i 	%argrw{"wr"}
	add		___473_i ___473_i $const16 	%argrw{"wrr"}
	floor		$tmp35 detail 	%argrw{"wr"}
	sub		___472_rmd detail $tmp35 	%argrw{"wrr"}
	neq		$tmp36 ___472_rmd $const1 	%argrw{"wrr"}
	if		$tmp36 125 131 	%argrw{"r"}
	mul		$tmp37 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 112 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp37 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp38 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp38 111 111 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp39 ___475_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp39 	%argrw{"wrr"}
	if		use_normalize 123 124 	%argrw{"r"}
	mul		$tmp40 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp41 $tmp40 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp42 $tmp41 $const19 	%argrw{"wrr"}
	mul		$tmp43 $const19 ___475_sum2 	%argrw{"wrr"}
	add		$tmp44 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp45 $tmp43 $tmp44 	%argrw{"wrr"}
	add		$tmp46 $tmp45 $const19 	%argrw{"wrr"}
	mix		___609_value $tmp42 $tmp46 ___472_rmd 	%argrw{"wrrr"}
	mix		___609_value ___472_sum ___475_sum2 ___472_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 129 130 	%argrw{"r"}
	mul		$tmp47 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp48 $tmp47 ___472_maxamp 	%argrw{"wrr"}
	add		___609_value $tmp48 $const19 	%argrw{"wrr"}
	assign		___609_value ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp49 type $const20 	%argrw{"wrr"}
	if		$tmp49 195 295 	%argrw{"r"}
	functioncall	$const21 194 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	assign		___524_p ___609_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{239} %argrw{"wr"}
	assign		___524_pwr $const14 	%argrw{"wr"}
	assign		___524_value $const1 	%argrw{"wr"}
	assign		___524_weight $const14 	%argrw{"wr"}
	for		$tmp55 141 149 167 169 	%argrw{"r"}
	assign		___525_i $const15 	%argrw{"wr"}
	gt		$tmp50 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp51 $tmp50 $const15 	%argrw{"wrr"}
	if		$tmp51 148 148 	%argrw{"r"}
	assign		$tmp52 detail 	%argrw{"wr"}
	le		$tmp53 ___525_i $tmp52 	%argrw{"wrr"}
	neq		$tmp54 $tmp53 $const15 	%argrw{"wrr"}
	assign		$tmp51 $tmp54 	%argrw{"wr"}
	neq		$tmp55 $tmp51 $const15 	%argrw{"wrr"}
	gt		$tmp56 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp56 152 152 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 159 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp58 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp58 158 158 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp57 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp57 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp59 $tmp57 Offset 	%line{239} %argrw{"wrr"}
	mul		___526_signal $tmp59 ___524_pwr 	%argrw{"wrr"}
	mul		___524_pwr ___524_pwr roughness 	%argrw{"wrr"}
	mul		$tmp60 ___524_weight ___526_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp60 	%argrw{"wrr"}
	mul		$tmp61 Gain ___526_signal 	%argrw{"wrr"}
	mul		___524_weight ___524_weight $tmp61 	%argrw{"wrr"}
	mul		___524_p ___524_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp62 ___525_i 	%argrw{"wr"}
	add		___525_i ___525_i $const16 	%argrw{"wrr"}
	floor		$tmp63 detail 	%argrw{"wr"}
	sub		___524_rmd detail $tmp63 	%argrw{"wrr"}
	neq		$tmp64 ___524_rmd $const1 	%argrw{"wrr"}
	neq		$tmp65 $tmp64 $const15 	%argrw{"wrr"}
	if		$tmp65 177 177 	%argrw{"r"}
	gt		$tmp66 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp67 $tmp66 $const15 	%argrw{"wrr"}
	assign		$tmp65 $tmp67 	%argrw{"wr"}
	if		$tmp65 193 193 	%argrw{"r"}
	gt		$tmp68 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp68 181 181 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 188 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp70 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp70 187 187 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp69 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp69 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp71 $tmp69 Offset 	%line{239} %argrw{"wrr"}
	mul		___528_signal $tmp71 ___524_pwr 	%argrw{"wrr"}
	mul		$tmp72 ___524_rmd ___524_weight 	%argrw{"wrr"}
	mul		$tmp73 $tmp72 ___528_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp73 	%argrw{"wrr"}
	assign		___609_value ___524_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp74 type $const23 	%argrw{"wrr"}
	if		$tmp74 240 295 	%argrw{"r"}
	functioncall	$const24 239 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	assign		___548_p ___609_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"wr"}
	assign		___548_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 207 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp77 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp77 206 206 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp76 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp76 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp75 $tmp76 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp75 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	assign		___548_value ___548_signal 	%argrw{"wr"}
	assign		___548_weight $const14 	%argrw{"wr"}
	for		$tmp80 214 217 236 238 	%argrw{"r"}
	assign		___549_i $const16 	%argrw{"wr"}
	assign		$tmp78 detail 	%argrw{"wr"}
	le		$tmp79 ___549_i $tmp78 	%argrw{"wrr"}
	neq		$tmp80 $tmp79 $const15 	%argrw{"wrr"}
	mul		___548_p ___548_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp81 ___548_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 222 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp82 $tmp81 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___548_weight $tmp82 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	functioncall	$const9 229 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp85 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp85 228 228 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp84 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp84 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp83 $tmp84 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp83 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_weight 	%argrw{"wrr"}
	mul		$tmp86 ___548_signal ___548_pwr 	%argrw{"wrr"}
	add		___548_value ___548_value $tmp86 	%argrw{"wrr"}
	mul		___548_pwr ___548_pwr roughness 	%argrw{"wrr"}
	assign		$tmp87 ___549_i 	%argrw{"wr"}
	add		___549_i ___549_i $const16 	%argrw{"wrr"}
	assign		___609_value ___548_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp88 type $const25 	%argrw{"wrr"}
	if		$tmp88 292 295 	%argrw{"r"}
	functioncall	$const26 291 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	assign		___508_p ___609_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{232} %argrw{"wr"}
	assign		___508_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 252 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp90 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp90 251 251 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp89 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp89 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		___508_value Offset $tmp89 	%line{232} %argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	for		$tmp93 256 259 272 274 	%argrw{"r"}
	assign		___509_i $const16 	%argrw{"wr"}
	assign		$tmp91 detail 	%argrw{"wr"}
	le		$tmp92 ___509_i $tmp91 	%argrw{"wrr"}
	neq		$tmp93 $tmp92 $const15 	%argrw{"wrr"}
	functioncall	$const9 266 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp95 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp95 265 265 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp94 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp94 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp96 $tmp94 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp97 $tmp96 ___508_pwr 	%argrw{"wrr"}
	mul		___510_increment $tmp97 ___508_value 	%argrw{"wrr"}
	add		___508_value ___508_value ___510_increment 	%argrw{"wrr"}
	mul		___508_pwr ___508_pwr roughness 	%argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp98 ___509_i 	%argrw{"wr"}
	add		___509_i ___509_i $const16 	%argrw{"wrr"}
	floor		$tmp99 detail 	%argrw{"wr"}
	sub		___508_rmd detail $tmp99 	%argrw{"wrr"}
	neq		$tmp100 ___508_rmd $const1 	%argrw{"wrr"}
	if		$tmp100 290 290 	%argrw{"r"}
	functioncall	$const9 285 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp102 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp102 284 284 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp101 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp101 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp103 $tmp101 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp104 $tmp103 ___508_pwr 	%argrw{"wrr"}
	mul		___511_increment $tmp104 ___508_value 	%argrw{"wrr"}
	mul		$tmp105 ___508_rmd ___511_increment 	%argrw{"wrr"}
	add		___508_value ___508_value $tmp105 	%argrw{"wrr"}
	assign		___609_value ___508_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	error		$const27 	%argrw{"r"}
	assign		___609_value $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:102
#                 noise_select(p + random_float_offset(1.0),
	functioncall	$const6 299 	%line{102} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:53
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp108 $const8 $const14 	%line{53} %argrw{"wrr"}
	mul		$tmp109 $tmp108 $const7 	%argrw{"wrr"}
	add		$tmp107 $const7 $tmp109 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:102
#                 noise_select(p + random_float_offset(1.0),
	add		$tmp110 ___609_p $tmp107 	%line{102} %argrw{"wrr"}
	functioncall	$const11 566 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	eq		$tmp111 type $const12 	%line{79} %argrw{"wrr"}
	if		$tmp111 343 566 	%argrw{"r"}
	functioncall	$const13 342 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	assign		___492_p $tmp110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{225} %argrw{"wr"}
	assign		___492_value $const14 	%argrw{"wr"}
	assign		___492_pwr $const14 	%argrw{"wr"}
	for		$tmp114 309 312 324 326 	%argrw{"r"}
	assign		___493_i $const15 	%argrw{"wr"}
	assign		$tmp112 detail 	%argrw{"wr"}
	le		$tmp113 ___493_i $tmp112 	%argrw{"wrr"}
	neq		$tmp114 $tmp113 $const15 	%argrw{"wrr"}
	functioncall	$const9 319 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp116 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp116 318 318 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp115 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp115 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp117 ___492_pwr $tmp115 	%line{225} %argrw{"wrr"}
	add		$tmp118 $tmp117 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp118 	%argrw{"wrr"}
	mul		___492_pwr ___492_pwr roughness 	%argrw{"wrr"}
	mul		___492_p ___492_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp119 ___493_i 	%argrw{"wr"}
	add		___493_i ___493_i $const16 	%argrw{"wrr"}
	floor		$tmp120 detail 	%argrw{"wr"}
	sub		___492_rmd detail $tmp120 	%argrw{"wrr"}
	neq		$tmp121 ___492_rmd $const1 	%argrw{"wrr"}
	if		$tmp121 341 341 	%argrw{"r"}
	mul		$tmp122 ___492_rmd ___492_pwr 	%argrw{"wrr"}
	functioncall	$const9 338 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp124 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp124 337 337 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp123 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp123 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp125 $tmp122 $tmp123 	%line{225} %argrw{"wrr"}
	add		$tmp126 $tmp125 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp126 	%argrw{"wrr"}
	assign		$tmp106 ___492_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp127 type $const17 	%argrw{"wrr"}
	if		$tmp127 403 566 	%argrw{"r"}
	functioncall	$const18 402 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	assign		___472_p $tmp110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{218} %argrw{"wr"}
	assign		___472_fscale $const14 	%argrw{"wr"}
	assign		___472_amp $const14 	%argrw{"wr"}
	assign		___472_maxamp $const1 	%argrw{"wr"}
	assign		___472_sum $const1 	%argrw{"wr"}
	for		$tmp130 353 356 369 371 	%argrw{"r"}
	assign		___473_i $const15 	%argrw{"wr"}
	assign		$tmp128 detail 	%argrw{"wr"}
	le		$tmp129 ___473_i $tmp128 	%argrw{"wrr"}
	neq		$tmp130 $tmp129 $const15 	%argrw{"wrr"}
	mul		$tmp131 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 364 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp131 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp132 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp132 363 363 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp133 ___474_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp133 	%argrw{"wrr"}
	add		___472_maxamp ___472_maxamp ___472_amp 	%argrw{"wrr"}
	mul		___472_amp ___472_amp roughness 	%argrw{"wrr"}
	mul		___472_fscale ___472_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp134 ___473_i 	%argrw{"wr"}
	add		___473_i ___473_i $const16 	%argrw{"wrr"}
	floor		$tmp135 detail 	%argrw{"wr"}
	sub		___472_rmd detail $tmp135 	%argrw{"wrr"}
	neq		$tmp136 ___472_rmd $const1 	%argrw{"wrr"}
	if		$tmp136 396 402 	%argrw{"r"}
	mul		$tmp137 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 383 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp137 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp138 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp138 382 382 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp139 ___475_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp139 	%argrw{"wrr"}
	if		use_normalize 394 395 	%argrw{"r"}
	mul		$tmp140 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp141 $tmp140 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp142 $tmp141 $const19 	%argrw{"wrr"}
	mul		$tmp143 $const19 ___475_sum2 	%argrw{"wrr"}
	add		$tmp144 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp145 $tmp143 $tmp144 	%argrw{"wrr"}
	add		$tmp146 $tmp145 $const19 	%argrw{"wrr"}
	mix		$tmp106 $tmp142 $tmp146 ___472_rmd 	%argrw{"wrrr"}
	mix		$tmp106 ___472_sum ___475_sum2 ___472_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 400 401 	%argrw{"r"}
	mul		$tmp147 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp148 $tmp147 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp106 $tmp148 $const19 	%argrw{"wrr"}
	assign		$tmp106 ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp149 type $const20 	%argrw{"wrr"}
	if		$tmp149 466 566 	%argrw{"r"}
	functioncall	$const21 465 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	assign		___524_p $tmp110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{239} %argrw{"wr"}
	assign		___524_pwr $const14 	%argrw{"wr"}
	assign		___524_value $const1 	%argrw{"wr"}
	assign		___524_weight $const14 	%argrw{"wr"}
	for		$tmp155 412 420 438 440 	%argrw{"r"}
	assign		___525_i $const15 	%argrw{"wr"}
	gt		$tmp150 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp151 $tmp150 $const15 	%argrw{"wrr"}
	if		$tmp151 419 419 	%argrw{"r"}
	assign		$tmp152 detail 	%argrw{"wr"}
	le		$tmp153 ___525_i $tmp152 	%argrw{"wrr"}
	neq		$tmp154 $tmp153 $const15 	%argrw{"wrr"}
	assign		$tmp151 $tmp154 	%argrw{"wr"}
	neq		$tmp155 $tmp151 $const15 	%argrw{"wrr"}
	gt		$tmp156 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp156 423 423 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 430 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp158 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp158 429 429 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp157 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp157 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp159 $tmp157 Offset 	%line{239} %argrw{"wrr"}
	mul		___526_signal $tmp159 ___524_pwr 	%argrw{"wrr"}
	mul		___524_pwr ___524_pwr roughness 	%argrw{"wrr"}
	mul		$tmp160 ___524_weight ___526_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp160 	%argrw{"wrr"}
	mul		$tmp161 Gain ___526_signal 	%argrw{"wrr"}
	mul		___524_weight ___524_weight $tmp161 	%argrw{"wrr"}
	mul		___524_p ___524_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp162 ___525_i 	%argrw{"wr"}
	add		___525_i ___525_i $const16 	%argrw{"wrr"}
	floor		$tmp163 detail 	%argrw{"wr"}
	sub		___524_rmd detail $tmp163 	%argrw{"wrr"}
	neq		$tmp164 ___524_rmd $const1 	%argrw{"wrr"}
	neq		$tmp165 $tmp164 $const15 	%argrw{"wrr"}
	if		$tmp165 448 448 	%argrw{"r"}
	gt		$tmp166 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp167 $tmp166 $const15 	%argrw{"wrr"}
	assign		$tmp165 $tmp167 	%argrw{"wr"}
	if		$tmp165 464 464 	%argrw{"r"}
	gt		$tmp168 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp168 452 452 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 459 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp170 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp170 458 458 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp169 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp169 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp171 $tmp169 Offset 	%line{239} %argrw{"wrr"}
	mul		___528_signal $tmp171 ___524_pwr 	%argrw{"wrr"}
	mul		$tmp172 ___524_rmd ___524_weight 	%argrw{"wrr"}
	mul		$tmp173 $tmp172 ___528_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp173 	%argrw{"wrr"}
	assign		$tmp106 ___524_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp174 type $const23 	%argrw{"wrr"}
	if		$tmp174 511 566 	%argrw{"r"}
	functioncall	$const24 510 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	assign		___548_p $tmp110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"wr"}
	assign		___548_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 478 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp177 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp177 477 477 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp176 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp176 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp175 $tmp176 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp175 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	assign		___548_value ___548_signal 	%argrw{"wr"}
	assign		___548_weight $const14 	%argrw{"wr"}
	for		$tmp180 485 488 507 509 	%argrw{"r"}
	assign		___549_i $const16 	%argrw{"wr"}
	assign		$tmp178 detail 	%argrw{"wr"}
	le		$tmp179 ___549_i $tmp178 	%argrw{"wrr"}
	neq		$tmp180 $tmp179 $const15 	%argrw{"wrr"}
	mul		___548_p ___548_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp181 ___548_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 493 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp182 $tmp181 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___548_weight $tmp182 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	functioncall	$const9 500 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp185 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp185 499 499 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp184 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp184 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp183 $tmp184 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp183 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_weight 	%argrw{"wrr"}
	mul		$tmp186 ___548_signal ___548_pwr 	%argrw{"wrr"}
	add		___548_value ___548_value $tmp186 	%argrw{"wrr"}
	mul		___548_pwr ___548_pwr roughness 	%argrw{"wrr"}
	assign		$tmp187 ___549_i 	%argrw{"wr"}
	add		___549_i ___549_i $const16 	%argrw{"wrr"}
	assign		$tmp106 ___548_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp188 type $const25 	%argrw{"wrr"}
	if		$tmp188 563 566 	%argrw{"r"}
	functioncall	$const26 562 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	assign		___508_p $tmp110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{232} %argrw{"wr"}
	assign		___508_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 523 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp190 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp190 522 522 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp189 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp189 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		___508_value Offset $tmp189 	%line{232} %argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	for		$tmp193 527 530 543 545 	%argrw{"r"}
	assign		___509_i $const16 	%argrw{"wr"}
	assign		$tmp191 detail 	%argrw{"wr"}
	le		$tmp192 ___509_i $tmp191 	%argrw{"wrr"}
	neq		$tmp193 $tmp192 $const15 	%argrw{"wrr"}
	functioncall	$const9 537 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp195 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp195 536 536 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp194 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp194 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp196 $tmp194 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp197 $tmp196 ___508_pwr 	%argrw{"wrr"}
	mul		___510_increment $tmp197 ___508_value 	%argrw{"wrr"}
	add		___508_value ___508_value ___510_increment 	%argrw{"wrr"}
	mul		___508_pwr ___508_pwr roughness 	%argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp198 ___509_i 	%argrw{"wr"}
	add		___509_i ___509_i $const16 	%argrw{"wrr"}
	floor		$tmp199 detail 	%argrw{"wr"}
	sub		___508_rmd detail $tmp199 	%argrw{"wrr"}
	neq		$tmp200 ___508_rmd $const1 	%argrw{"wrr"}
	if		$tmp200 561 561 	%argrw{"r"}
	functioncall	$const9 556 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp202 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp202 555 555 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp201 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp201 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp203 $tmp201 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp204 $tmp203 ___508_pwr 	%argrw{"wrr"}
	mul		___511_increment $tmp204 ___508_value 	%argrw{"wrr"}
	mul		$tmp205 ___508_rmd ___511_increment 	%argrw{"wrr"}
	add		___508_value ___508_value $tmp205 	%argrw{"wrr"}
	assign		$tmp106 ___508_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	error		$const27 	%argrw{"r"}
	assign		$tmp106 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:110
#                 noise_select(p + random_float_offset(2.0),
	functioncall	$const6 570 	%line{110} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:53
#   return 100.0 + noise("hash", seed) * 100.0;
	noise		$tmp208 $const8 $const28 	%line{53} %argrw{"wrr"}
	mul		$tmp209 $tmp208 $const7 	%argrw{"wrr"}
	add		$tmp207 $const7 $tmp209 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:110
#                 noise_select(p + random_float_offset(2.0),
	add		$tmp210 ___609_p $tmp207 	%line{110} %argrw{"wrr"}
	functioncall	$const11 837 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	eq		$tmp211 type $const12 	%line{79} %argrw{"wrr"}
	if		$tmp211 614 837 	%argrw{"r"}
	functioncall	$const13 613 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	assign		___492_p $tmp210 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{225} %argrw{"wr"}
	assign		___492_value $const14 	%argrw{"wr"}
	assign		___492_pwr $const14 	%argrw{"wr"}
	for		$tmp214 580 583 595 597 	%argrw{"r"}
	assign		___493_i $const15 	%argrw{"wr"}
	assign		$tmp212 detail 	%argrw{"wr"}
	le		$tmp213 ___493_i $tmp212 	%argrw{"wrr"}
	neq		$tmp214 $tmp213 $const15 	%argrw{"wrr"}
	functioncall	$const9 590 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp216 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp216 589 589 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp215 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp215 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp217 ___492_pwr $tmp215 	%line{225} %argrw{"wrr"}
	add		$tmp218 $tmp217 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp218 	%argrw{"wrr"}
	mul		___492_pwr ___492_pwr roughness 	%argrw{"wrr"}
	mul		___492_p ___492_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp219 ___493_i 	%argrw{"wr"}
	add		___493_i ___493_i $const16 	%argrw{"wrr"}
	floor		$tmp220 detail 	%argrw{"wr"}
	sub		___492_rmd detail $tmp220 	%argrw{"wrr"}
	neq		$tmp221 ___492_rmd $const1 	%argrw{"wrr"}
	if		$tmp221 612 612 	%argrw{"r"}
	mul		$tmp222 ___492_rmd ___492_pwr 	%argrw{"wrr"}
	functioncall	$const9 609 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___492_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp224 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp224 608 608 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp223 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp223 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:225
# NOISE_MULTI_FRACTAL(float)
	mul		$tmp225 $tmp222 $tmp223 	%line{225} %argrw{"wrr"}
	add		$tmp226 $tmp225 $const14 	%argrw{"wrr"}
	mul		___492_value ___492_value $tmp226 	%argrw{"wrr"}
	assign		$tmp206 ___492_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp227 type $const17 	%argrw{"wrr"}
	if		$tmp227 674 837 	%argrw{"r"}
	functioncall	$const18 673 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	assign		___472_p $tmp210 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{218} %argrw{"wr"}
	assign		___472_fscale $const14 	%argrw{"wr"}
	assign		___472_amp $const14 	%argrw{"wr"}
	assign		___472_maxamp $const1 	%argrw{"wr"}
	assign		___472_sum $const1 	%argrw{"wr"}
	for		$tmp230 624 627 640 642 	%argrw{"r"}
	assign		___473_i $const15 	%argrw{"wr"}
	assign		$tmp228 detail 	%argrw{"wr"}
	le		$tmp229 ___473_i $tmp228 	%argrw{"wrr"}
	neq		$tmp230 $tmp229 $const15 	%argrw{"wrr"}
	mul		$tmp231 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 635 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp231 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp232 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp232 634 634 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___474_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___474_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp233 ___474_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___472_sum ___472_sum $tmp233 	%argrw{"wrr"}
	add		___472_maxamp ___472_maxamp ___472_amp 	%argrw{"wrr"}
	mul		___472_amp ___472_amp roughness 	%argrw{"wrr"}
	mul		___472_fscale ___472_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp234 ___473_i 	%argrw{"wr"}
	add		___473_i ___473_i $const16 	%argrw{"wrr"}
	floor		$tmp235 detail 	%argrw{"wr"}
	sub		___472_rmd detail $tmp235 	%argrw{"wrr"}
	neq		$tmp236 ___472_rmd $const1 	%argrw{"wrr"}
	if		$tmp236 667 673 	%argrw{"r"}
	mul		$tmp237 ___472_fscale ___472_p 	%argrw{"wrr"}
	functioncall	$const9 654 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 $tmp237 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp238 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp238 653 653 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		___475_t $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		___475_t ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:218
# NOISE_FBM(float)
	mul		$tmp239 ___475_t ___472_amp 	%line{218} %argrw{"wrr"}
	add		___475_sum2 ___472_sum $tmp239 	%argrw{"wrr"}
	if		use_normalize 665 666 	%argrw{"r"}
	mul		$tmp240 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp241 $tmp240 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp242 $tmp241 $const19 	%argrw{"wrr"}
	mul		$tmp243 $const19 ___475_sum2 	%argrw{"wrr"}
	add		$tmp244 ___472_maxamp ___472_amp 	%argrw{"wrr"}
	div		$tmp245 $tmp243 $tmp244 	%argrw{"wrr"}
	add		$tmp246 $tmp245 $const19 	%argrw{"wrr"}
	mix		$tmp206 $tmp242 $tmp246 ___472_rmd 	%argrw{"wrrr"}
	mix		$tmp206 ___472_sum ___475_sum2 ___472_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 671 672 	%argrw{"r"}
	mul		$tmp247 $const19 ___472_sum 	%argrw{"wrr"}
	div		$tmp248 $tmp247 ___472_maxamp 	%argrw{"wrr"}
	add		$tmp206 $tmp248 $const19 	%argrw{"wrr"}
	assign		$tmp206 ___472_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp249 type $const20 	%argrw{"wrr"}
	if		$tmp249 737 837 	%argrw{"r"}
	functioncall	$const21 736 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	assign		___524_p $tmp210 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{239} %argrw{"wr"}
	assign		___524_pwr $const14 	%argrw{"wr"}
	assign		___524_value $const1 	%argrw{"wr"}
	assign		___524_weight $const14 	%argrw{"wr"}
	for		$tmp255 683 691 709 711 	%argrw{"r"}
	assign		___525_i $const15 	%argrw{"wr"}
	gt		$tmp250 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp251 $tmp250 $const15 	%argrw{"wrr"}
	if		$tmp251 690 690 	%argrw{"r"}
	assign		$tmp252 detail 	%argrw{"wr"}
	le		$tmp253 ___525_i $tmp252 	%argrw{"wrr"}
	neq		$tmp254 $tmp253 $const15 	%argrw{"wrr"}
	assign		$tmp251 $tmp254 	%argrw{"wr"}
	neq		$tmp255 $tmp251 $const15 	%argrw{"wrr"}
	gt		$tmp256 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp256 694 694 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 701 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp258 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp258 700 700 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp257 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp257 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp259 $tmp257 Offset 	%line{239} %argrw{"wrr"}
	mul		___526_signal $tmp259 ___524_pwr 	%argrw{"wrr"}
	mul		___524_pwr ___524_pwr roughness 	%argrw{"wrr"}
	mul		$tmp260 ___524_weight ___526_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp260 	%argrw{"wrr"}
	mul		$tmp261 Gain ___526_signal 	%argrw{"wrr"}
	mul		___524_weight ___524_weight $tmp261 	%argrw{"wrr"}
	mul		___524_p ___524_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp262 ___525_i 	%argrw{"wr"}
	add		___525_i ___525_i $const16 	%argrw{"wrr"}
	floor		$tmp263 detail 	%argrw{"wr"}
	sub		___524_rmd detail $tmp263 	%argrw{"wrr"}
	neq		$tmp264 ___524_rmd $const1 	%argrw{"wrr"}
	neq		$tmp265 $tmp264 $const15 	%argrw{"wrr"}
	if		$tmp265 719 719 	%argrw{"r"}
	gt		$tmp266 ___524_weight $const22 	%argrw{"wrr"}
	neq		$tmp267 $tmp266 $const15 	%argrw{"wrr"}
	assign		$tmp265 $tmp267 	%argrw{"wr"}
	if		$tmp265 735 735 	%argrw{"r"}
	gt		$tmp268 ___524_weight $const14 	%argrw{"wrr"}
	if		$tmp268 723 723 	%argrw{"r"}
	assign		___524_weight $const14 	%argrw{"wr"}
	functioncall	$const9 730 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___524_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp270 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp270 729 729 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp269 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp269 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:239
# NOISE_HYBRID_MULTI_FRACTAL(float)
	add		$tmp271 $tmp269 Offset 	%line{239} %argrw{"wrr"}
	mul		___528_signal $tmp271 ___524_pwr 	%argrw{"wrr"}
	mul		$tmp272 ___524_rmd ___524_weight 	%argrw{"wrr"}
	mul		$tmp273 $tmp272 ___528_signal 	%argrw{"wrr"}
	add		___524_value ___524_value $tmp273 	%argrw{"wrr"}
	assign		$tmp206 ___524_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp274 type $const23 	%argrw{"wrr"}
	if		$tmp274 782 837 	%argrw{"r"}
	functioncall	$const24 781 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	assign		___548_p $tmp210 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"wr"}
	assign		___548_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 749 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp277 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp277 748 748 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp276 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp276 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp275 $tmp276 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp275 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	assign		___548_value ___548_signal 	%argrw{"wr"}
	assign		___548_weight $const14 	%argrw{"wr"}
	for		$tmp280 756 759 778 780 	%argrw{"r"}
	assign		___549_i $const16 	%argrw{"wr"}
	assign		$tmp278 detail 	%argrw{"wr"}
	le		$tmp279 ___549_i $tmp278 	%argrw{"wrr"}
	neq		$tmp280 $tmp279 $const15 	%argrw{"wrr"}
	mul		___548_p ___548_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp281 ___548_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 764 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp282 $tmp281 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___548_weight $tmp282 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	functioncall	$const9 771 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{246} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___548_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp285 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp285 770 770 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp284 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp284 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:246
# NOISE_RIDGED_MULTI_FRACTAL(float)
	fabs		$tmp283 $tmp284 	%line{246} %argrw{"wr"}
	sub		___548_signal Offset $tmp283 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_signal 	%argrw{"wrr"}
	mul		___548_signal ___548_signal ___548_weight 	%argrw{"wrr"}
	mul		$tmp286 ___548_signal ___548_pwr 	%argrw{"wrr"}
	add		___548_value ___548_value $tmp286 	%argrw{"wrr"}
	mul		___548_pwr ___548_pwr roughness 	%argrw{"wrr"}
	assign		$tmp287 ___549_i 	%argrw{"wr"}
	add		___549_i ___549_i $const16 	%argrw{"wrr"}
	assign		$tmp206 ___548_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	eq		$tmp288 type $const25 	%argrw{"wrr"}
	if		$tmp288 834 837 	%argrw{"r"}
	functioncall	$const26 833 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	assign		___508_p $tmp210 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{232} %argrw{"wr"}
	assign		___508_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 794 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp290 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp290 793 793 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp289 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp289 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		___508_value Offset $tmp289 	%line{232} %argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	for		$tmp293 798 801 814 816 	%argrw{"r"}
	assign		___509_i $const16 	%argrw{"wr"}
	assign		$tmp291 detail 	%argrw{"wr"}
	le		$tmp292 ___509_i $tmp291 	%argrw{"wrr"}
	neq		$tmp293 $tmp292 $const15 	%argrw{"wrr"}
	functioncall	$const9 808 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp295 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp295 807 807 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp294 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp294 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp296 $tmp294 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp297 $tmp296 ___508_pwr 	%argrw{"wrr"}
	mul		___510_increment $tmp297 ___508_value 	%argrw{"wrr"}
	add		___508_value ___508_value ___510_increment 	%argrw{"wrr"}
	mul		___508_pwr ___508_pwr roughness 	%argrw{"wrr"}
	mul		___508_p ___508_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp298 ___509_i 	%argrw{"wr"}
	add		___509_i ___509_i $const16 	%argrw{"wrr"}
	floor		$tmp299 detail 	%argrw{"wr"}
	sub		___508_rmd detail $tmp299 	%argrw{"wrr"}
	neq		$tmp300 ___508_rmd $const1 	%argrw{"wrr"}
	if		$tmp300 832 832 	%argrw{"r"}
	functioncall	$const9 827 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:48
#   float f = noise("snoise", p);
	noise		___464_f $const10 ___508_p 	%line{48} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:49
#   if (isinf(f)) {
	isinf		$tmp302 ___464_f 	%line{49} %argrw{"wr"}
	if		$tmp302 826 826 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:50
#     return 0.0;
	assign		$tmp301 $const1 	%line{50} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:52
#   return f;
	assign		$tmp301 ___464_f 	%line{52} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:232
# NOISE_HETERO_TERRAIN(float)
	add		$tmp303 $tmp301 Offset 	%line{232} %argrw{"wrr"}
	mul		$tmp304 $tmp303 ___508_pwr 	%argrw{"wrr"}
	mul		___511_increment $tmp304 ___508_value 	%argrw{"wrr"}
	mul		$tmp305 ___508_rmd ___511_increment 	%argrw{"wrr"}
	add		___508_value ___508_value $tmp305 	%argrw{"wrr"}
	assign		$tmp206 ___508_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:79
# NOISE_SELECT(float)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{79}
	error		$const27 	%argrw{"r"}
	assign		$tmp206 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:101
#   Color = color(value,
	color		Color ___609_value $tmp106 $tmp206 	%line{101} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:118
#   return value;
	assign		Fac ___609_value 	%line{118} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:269
#   else if (dimensions == "2D") {
	eq		$tmp306 dimensions $const29 	%line{269} %argrw{"wrr"}
	if		$tmp306 1827 3949 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:270
#     Fac = noise_texture(vector2(p[0], p[1]),
	compref		$tmp307.x p $const15 	%line{270} %argrw{"wrr"}
	compref		$tmp307.y p $const16 	%argrw{"wrr"}
	functioncall	$const5 1827 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:132
#   vector2 p = co;
	assign		___611_p.x $tmp307.x 	%line{132} %argrw{"wr"}
	assign		___611_p.y $tmp307.y 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:133
#   if (distortion != 0.0) {
	neq		$tmp308 Distortion $const1 	%line{133} %argrw{"wrr"}
	if		$tmp308 887 887 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:134
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const30 855 	%line{134} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:58
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp313 $const8 $const1 $const1 	%line{58} %argrw{"wrrr"}
	mul		$tmp314 $tmp313 $const7 	%argrw{"wrr"}
	add		$tmp312.x $const7 $tmp314 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:59
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp315 $const8 $const1 $const14 	%line{59} %argrw{"wrrr"}
	mul		$tmp316 $tmp315 $const7 	%argrw{"wrr"}
	add		$tmp312.y $const7 $tmp316 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 858 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp311.x ___611_p.x $tmp312.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp311.y ___611_p.y $tmp312.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:134
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	functioncall	$const9 865 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{134} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp311.x $tmp311.y 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp317 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp317 864 864 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp310 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp310 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:134
#     p += vector2(safe_snoise(p + random_vector2_offset(0.0)) * distortion,
	mul		$tmp309.x $tmp310 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{134} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:135
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const30 873 	%line{135} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:58
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp321 $const8 $const14 $const1 	%line{58} %argrw{"wrrr"}
	mul		$tmp322 $tmp321 $const7 	%argrw{"wrr"}
	add		$tmp320.x $const7 $tmp322 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:59
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp323 $const8 $const14 $const14 	%line{59} %argrw{"wrrr"}
	mul		$tmp324 $tmp323 $const7 	%argrw{"wrr"}
	add		$tmp320.y $const7 $tmp324 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 876 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp319.x ___611_p.x $tmp320.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp319.y ___611_p.y $tmp320.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:135
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	functioncall	$const9 883 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{135} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp319.x $tmp319.y 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp325 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp325 882 882 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp318 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp318 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:135
#                  safe_snoise(p + random_vector2_offset(1.0)) * distortion);
	mul		$tmp309.y $tmp318 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{135} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 887 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		___611_p.x ___611_p.x $tmp309.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		___611_p.y ___611_p.y $tmp309.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:138
#   float value = noise_select(p, detail, roughness, lacunarity, offset, gain, type, use_normalize);
	functioncall	$const11 1193 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{138} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	eq		$tmp326 type $const12 	%line{80} %argrw{"wrr"}
	if		$tmp326 936 1193 	%argrw{"r"}
	functioncall	$const13 935 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		___496_p.x ___611_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	assign		___496_p.y ___611_p.y 	%argrw{"wr"}
	assign		___496_value $const14 	%argrw{"wr"}
	assign		___496_pwr $const14 	%argrw{"wr"}
	for		$tmp329 897 900 917 919 	%argrw{"r"}
	assign		___497_i $const15 	%argrw{"wr"}
	assign		$tmp327 detail 	%argrw{"wr"}
	le		$tmp328 ___497_i $tmp327 	%argrw{"wrr"}
	neq		$tmp329 $tmp328 $const15 	%argrw{"wrr"}
	functioncall	$const9 907 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp331 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp331 906 906 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp330 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp330 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp332 ___496_pwr $tmp330 	%line{226} %argrw{"wrr"}
	add		$tmp333 $tmp332 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp333 	%argrw{"wrr"}
	mul		___496_pwr ___496_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 917 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp334.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp334.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 917 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___496_p.x ___496_p.x $tmp334.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___496_p.y ___496_p.y $tmp334.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		$tmp335 ___497_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	add		___497_i ___497_i $const16 	%argrw{"wrr"}
	floor		$tmp336 detail 	%argrw{"wr"}
	sub		___496_rmd detail $tmp336 	%argrw{"wrr"}
	neq		$tmp337 ___496_rmd $const1 	%argrw{"wrr"}
	if		$tmp337 934 934 	%argrw{"r"}
	mul		$tmp338 ___496_rmd ___496_pwr 	%argrw{"wrr"}
	functioncall	$const9 931 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp340 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp340 930 930 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp339 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp339 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp341 $tmp338 $tmp339 	%line{226} %argrw{"wrr"}
	add		$tmp342 $tmp341 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp342 	%argrw{"wrr"}
	assign		___611_value ___496_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp343 type $const17 	%argrw{"wrr"}
	if		$tmp343 1007 1193 	%argrw{"r"}
	functioncall	$const18 1006 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	assign		___477_p.x ___611_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"wr"}
	assign		___477_p.y ___611_p.y 	%argrw{"wr"}
	assign		___477_fscale $const14 	%argrw{"wr"}
	assign		___477_amp $const14 	%argrw{"wr"}
	assign		___477_maxamp $const1 	%argrw{"wr"}
	assign		___477_sum $const1 	%argrw{"wr"}
	for		$tmp346 947 950 968 970 	%argrw{"r"}
	assign		___478_i $const15 	%argrw{"wr"}
	assign		$tmp344 detail 	%argrw{"wr"}
	le		$tmp345 ___478_i $tmp344 	%argrw{"wrr"}
	neq		$tmp346 $tmp345 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 956 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp348.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp348.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 956 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp347.x ___477_p.x $tmp348.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp347.y ___477_p.y $tmp348.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 963 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp347.x $tmp347.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp349 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp349 962 962 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp350 ___479_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp350 	%argrw{"wrr"}
	add		___477_maxamp ___477_maxamp ___477_amp 	%argrw{"wrr"}
	mul		___477_amp ___477_amp roughness 	%argrw{"wrr"}
	mul		___477_fscale ___477_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp351 ___478_i 	%argrw{"wr"}
	add		___478_i ___478_i $const16 	%argrw{"wrr"}
	floor		$tmp352 detail 	%argrw{"wr"}
	sub		___477_rmd detail $tmp352 	%argrw{"wrr"}
	neq		$tmp353 ___477_rmd $const1 	%argrw{"wrr"}
	if		$tmp353 1000 1006 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 980 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp355.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp355.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 980 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp354.x ___477_p.x $tmp355.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp354.y ___477_p.y $tmp355.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 987 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp354.x $tmp354.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp356 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp356 986 986 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp357 ___480_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp357 	%argrw{"wrr"}
	if		use_normalize 998 999 	%argrw{"r"}
	mul		$tmp358 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp359 $tmp358 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp360 $tmp359 $const19 	%argrw{"wrr"}
	mul		$tmp361 $const19 ___480_sum2 	%argrw{"wrr"}
	add		$tmp362 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp363 $tmp361 $tmp362 	%argrw{"wrr"}
	add		$tmp364 $tmp363 $const19 	%argrw{"wrr"}
	mix		___611_value $tmp360 $tmp364 ___477_rmd 	%argrw{"wrrr"}
	mix		___611_value ___477_sum ___480_sum2 ___477_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 1004 1005 	%argrw{"r"}
	mul		$tmp365 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp366 $tmp365 ___477_maxamp 	%argrw{"wrr"}
	add		___611_value $tmp366 $const19 	%argrw{"wrr"}
	assign		___611_value ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp367 type $const20 	%argrw{"wrr"}
	if		$tmp367 1076 1193 	%argrw{"r"}
	functioncall	$const21 1075 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		___530_p.x ___611_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	assign		___530_p.y ___611_p.y 	%argrw{"wr"}
	assign		___530_pwr $const14 	%argrw{"wr"}
	assign		___530_value $const1 	%argrw{"wr"}
	assign		___530_weight $const14 	%argrw{"wr"}
	for		$tmp373 1017 1025 1048 1050 	%argrw{"r"}
	assign		___531_i $const15 	%argrw{"wr"}
	gt		$tmp368 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp369 $tmp368 $const15 	%argrw{"wrr"}
	if		$tmp369 1024 1024 	%argrw{"r"}
	assign		$tmp370 detail 	%argrw{"wr"}
	le		$tmp371 ___531_i $tmp370 	%argrw{"wrr"}
	neq		$tmp372 $tmp371 $const15 	%argrw{"wrr"}
	assign		$tmp369 $tmp372 	%argrw{"wr"}
	neq		$tmp373 $tmp369 $const15 	%argrw{"wrr"}
	gt		$tmp374 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp374 1028 1028 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1035 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp376 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp376 1034 1034 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp375 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp375 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp377 $tmp375 Offset 	%line{240} %argrw{"wrr"}
	mul		___532_signal $tmp377 ___530_pwr 	%argrw{"wrr"}
	mul		___530_pwr ___530_pwr roughness 	%argrw{"wrr"}
	mul		$tmp378 ___530_weight ___532_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp378 	%argrw{"wrr"}
	mul		$tmp379 Gain ___532_signal 	%argrw{"wrr"}
	mul		___530_weight ___530_weight $tmp379 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1048 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp380.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp380.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1048 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___530_p.x ___530_p.x $tmp380.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___530_p.y ___530_p.y $tmp380.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		$tmp381 ___531_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	add		___531_i ___531_i $const16 	%argrw{"wrr"}
	floor		$tmp382 detail 	%argrw{"wr"}
	sub		___530_rmd detail $tmp382 	%argrw{"wrr"}
	neq		$tmp383 ___530_rmd $const1 	%argrw{"wrr"}
	neq		$tmp384 $tmp383 $const15 	%argrw{"wrr"}
	if		$tmp384 1058 1058 	%argrw{"r"}
	gt		$tmp385 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp386 $tmp385 $const15 	%argrw{"wrr"}
	assign		$tmp384 $tmp386 	%argrw{"wr"}
	if		$tmp384 1074 1074 	%argrw{"r"}
	gt		$tmp387 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp387 1062 1062 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1069 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp389 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp389 1068 1068 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp388 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp388 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp390 $tmp388 Offset 	%line{240} %argrw{"wrr"}
	mul		___534_signal $tmp390 ___530_pwr 	%argrw{"wrr"}
	mul		$tmp391 ___530_rmd ___530_weight 	%argrw{"wrr"}
	mul		$tmp392 $tmp391 ___534_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp392 	%argrw{"wrr"}
	assign		___611_value ___530_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp393 type $const23 	%argrw{"wrr"}
	if		$tmp393 1127 1193 	%argrw{"r"}
	functioncall	$const24 1126 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	assign		___551_p.x ___611_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wr"}
	assign		___551_p.y ___611_p.y 	%argrw{"wr"}
	assign		___551_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1089 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp396 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp396 1088 1088 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp395 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp395 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp394 $tmp395 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp394 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	assign		___551_value ___551_signal 	%argrw{"wr"}
	assign		___551_weight $const14 	%argrw{"wr"}
	for		$tmp399 1096 1099 1123 1125 	%argrw{"r"}
	assign		___552_i $const16 	%argrw{"wr"}
	assign		$tmp397 detail 	%argrw{"wr"}
	le		$tmp398 ___552_i $tmp397 	%argrw{"wrr"}
	neq		$tmp399 $tmp398 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1105 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp400.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp400.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1105 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___551_p.x ___551_p.x $tmp400.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___551_p.y ___551_p.y $tmp400.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	mul		$tmp401 ___551_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wrr"}
	functioncall	$const3 1109 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp402 $tmp401 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___551_weight $tmp402 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	functioncall	$const9 1116 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp405 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp405 1115 1115 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp404 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp404 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp403 $tmp404 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp403 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_weight 	%argrw{"wrr"}
	mul		$tmp406 ___551_signal ___551_pwr 	%argrw{"wrr"}
	add		___551_value ___551_value $tmp406 	%argrw{"wrr"}
	mul		___551_pwr ___551_pwr roughness 	%argrw{"wrr"}
	assign		$tmp407 ___552_i 	%argrw{"wr"}
	add		___552_i ___552_i $const16 	%argrw{"wrr"}
	assign		___611_value ___551_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp408 type $const25 	%argrw{"wrr"}
	if		$tmp408 1190 1193 	%argrw{"r"}
	functioncall	$const26 1189 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		___512_p.x ___611_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	assign		___512_p.y ___611_p.y 	%argrw{"wr"}
	assign		___512_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1140 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp410 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp410 1139 1139 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp409 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp409 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		___512_value Offset $tmp409 	%line{233} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1147 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp411.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp411.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1147 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp411.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp411.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	for		$tmp414 1149 1152 1170 1172 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"r"}
	assign		___513_i $const16 	%argrw{"wr"}
	assign		$tmp412 detail 	%argrw{"wr"}
	le		$tmp413 ___513_i $tmp412 	%argrw{"wrr"}
	neq		$tmp414 $tmp413 $const15 	%argrw{"wrr"}
	functioncall	$const9 1159 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp416 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp416 1158 1158 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp415 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp415 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp417 $tmp415 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp418 $tmp417 ___512_pwr 	%argrw{"wrr"}
	mul		___514_increment $tmp418 ___512_value 	%argrw{"wrr"}
	add		___512_value ___512_value ___514_increment 	%argrw{"wrr"}
	mul		___512_pwr ___512_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1170 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp419.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp419.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1170 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp419.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp419.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		$tmp420 ___513_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	add		___513_i ___513_i $const16 	%argrw{"wrr"}
	floor		$tmp421 detail 	%argrw{"wr"}
	sub		___512_rmd detail $tmp421 	%argrw{"wrr"}
	neq		$tmp422 ___512_rmd $const1 	%argrw{"wrr"}
	if		$tmp422 1188 1188 	%argrw{"r"}
	functioncall	$const9 1183 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp424 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp424 1182 1182 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp423 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp423 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp425 $tmp423 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp426 $tmp425 ___512_pwr 	%argrw{"wrr"}
	mul		___515_increment $tmp426 ___512_value 	%argrw{"wrr"}
	mul		$tmp427 ___512_rmd ___515_increment 	%argrw{"wrr"}
	add		___512_value ___512_value $tmp427 	%argrw{"wrr"}
	assign		___611_value ___512_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	error		$const27 	%argrw{"r"}
	assign		___611_value $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
#                 noise_select(p + random_vector2_offset(2.0),
	functioncall	$const30 1200 	%line{140} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:58
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp431 $const8 $const28 $const1 	%line{58} %argrw{"wrrr"}
	mul		$tmp432 $tmp431 $const7 	%argrw{"wrr"}
	add		$tmp430.x $const7 $tmp432 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:59
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp433 $const8 $const28 $const14 	%line{59} %argrw{"wrrr"}
	mul		$tmp434 $tmp433 $const7 	%argrw{"wrr"}
	add		$tmp430.y $const7 $tmp434 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 1203 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp429.x ___611_p.x $tmp430.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp429.y ___611_p.y $tmp430.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:140
#                 noise_select(p + random_vector2_offset(2.0),
	functioncall	$const11 1509 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{140} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	eq		$tmp435 type $const12 	%line{80} %argrw{"wrr"}
	if		$tmp435 1252 1509 	%argrw{"r"}
	functioncall	$const13 1251 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		___496_p.x $tmp429.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	assign		___496_p.y $tmp429.y 	%argrw{"wr"}
	assign		___496_value $const14 	%argrw{"wr"}
	assign		___496_pwr $const14 	%argrw{"wr"}
	for		$tmp438 1213 1216 1233 1235 	%argrw{"r"}
	assign		___497_i $const15 	%argrw{"wr"}
	assign		$tmp436 detail 	%argrw{"wr"}
	le		$tmp437 ___497_i $tmp436 	%argrw{"wrr"}
	neq		$tmp438 $tmp437 $const15 	%argrw{"wrr"}
	functioncall	$const9 1223 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp440 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp440 1222 1222 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp439 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp439 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp441 ___496_pwr $tmp439 	%line{226} %argrw{"wrr"}
	add		$tmp442 $tmp441 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp442 	%argrw{"wrr"}
	mul		___496_pwr ___496_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1233 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp443.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp443.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1233 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___496_p.x ___496_p.x $tmp443.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___496_p.y ___496_p.y $tmp443.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		$tmp444 ___497_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	add		___497_i ___497_i $const16 	%argrw{"wrr"}
	floor		$tmp445 detail 	%argrw{"wr"}
	sub		___496_rmd detail $tmp445 	%argrw{"wrr"}
	neq		$tmp446 ___496_rmd $const1 	%argrw{"wrr"}
	if		$tmp446 1250 1250 	%argrw{"r"}
	mul		$tmp447 ___496_rmd ___496_pwr 	%argrw{"wrr"}
	functioncall	$const9 1247 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp449 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp449 1246 1246 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp448 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp448 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp450 $tmp447 $tmp448 	%line{226} %argrw{"wrr"}
	add		$tmp451 $tmp450 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp451 	%argrw{"wrr"}
	assign		$tmp428 ___496_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp452 type $const17 	%argrw{"wrr"}
	if		$tmp452 1323 1509 	%argrw{"r"}
	functioncall	$const18 1322 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	assign		___477_p.x $tmp429.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"wr"}
	assign		___477_p.y $tmp429.y 	%argrw{"wr"}
	assign		___477_fscale $const14 	%argrw{"wr"}
	assign		___477_amp $const14 	%argrw{"wr"}
	assign		___477_maxamp $const1 	%argrw{"wr"}
	assign		___477_sum $const1 	%argrw{"wr"}
	for		$tmp455 1263 1266 1284 1286 	%argrw{"r"}
	assign		___478_i $const15 	%argrw{"wr"}
	assign		$tmp453 detail 	%argrw{"wr"}
	le		$tmp454 ___478_i $tmp453 	%argrw{"wrr"}
	neq		$tmp455 $tmp454 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1272 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp457.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp457.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1272 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp456.x ___477_p.x $tmp457.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp456.y ___477_p.y $tmp457.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 1279 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp456.x $tmp456.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp458 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp458 1278 1278 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp459 ___479_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp459 	%argrw{"wrr"}
	add		___477_maxamp ___477_maxamp ___477_amp 	%argrw{"wrr"}
	mul		___477_amp ___477_amp roughness 	%argrw{"wrr"}
	mul		___477_fscale ___477_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp460 ___478_i 	%argrw{"wr"}
	add		___478_i ___478_i $const16 	%argrw{"wrr"}
	floor		$tmp461 detail 	%argrw{"wr"}
	sub		___477_rmd detail $tmp461 	%argrw{"wrr"}
	neq		$tmp462 ___477_rmd $const1 	%argrw{"wrr"}
	if		$tmp462 1316 1322 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1296 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp464.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp464.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1296 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp463.x ___477_p.x $tmp464.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp463.y ___477_p.y $tmp464.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 1303 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp463.x $tmp463.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp465 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp465 1302 1302 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp466 ___480_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp466 	%argrw{"wrr"}
	if		use_normalize 1314 1315 	%argrw{"r"}
	mul		$tmp467 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp468 $tmp467 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp469 $tmp468 $const19 	%argrw{"wrr"}
	mul		$tmp470 $const19 ___480_sum2 	%argrw{"wrr"}
	add		$tmp471 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp472 $tmp470 $tmp471 	%argrw{"wrr"}
	add		$tmp473 $tmp472 $const19 	%argrw{"wrr"}
	mix		$tmp428 $tmp469 $tmp473 ___477_rmd 	%argrw{"wrrr"}
	mix		$tmp428 ___477_sum ___480_sum2 ___477_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 1320 1321 	%argrw{"r"}
	mul		$tmp474 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp475 $tmp474 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp428 $tmp475 $const19 	%argrw{"wrr"}
	assign		$tmp428 ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp476 type $const20 	%argrw{"wrr"}
	if		$tmp476 1392 1509 	%argrw{"r"}
	functioncall	$const21 1391 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		___530_p.x $tmp429.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	assign		___530_p.y $tmp429.y 	%argrw{"wr"}
	assign		___530_pwr $const14 	%argrw{"wr"}
	assign		___530_value $const1 	%argrw{"wr"}
	assign		___530_weight $const14 	%argrw{"wr"}
	for		$tmp482 1333 1341 1364 1366 	%argrw{"r"}
	assign		___531_i $const15 	%argrw{"wr"}
	gt		$tmp477 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp478 $tmp477 $const15 	%argrw{"wrr"}
	if		$tmp478 1340 1340 	%argrw{"r"}
	assign		$tmp479 detail 	%argrw{"wr"}
	le		$tmp480 ___531_i $tmp479 	%argrw{"wrr"}
	neq		$tmp481 $tmp480 $const15 	%argrw{"wrr"}
	assign		$tmp478 $tmp481 	%argrw{"wr"}
	neq		$tmp482 $tmp478 $const15 	%argrw{"wrr"}
	gt		$tmp483 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp483 1344 1344 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1351 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp485 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp485 1350 1350 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp484 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp484 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp486 $tmp484 Offset 	%line{240} %argrw{"wrr"}
	mul		___532_signal $tmp486 ___530_pwr 	%argrw{"wrr"}
	mul		___530_pwr ___530_pwr roughness 	%argrw{"wrr"}
	mul		$tmp487 ___530_weight ___532_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp487 	%argrw{"wrr"}
	mul		$tmp488 Gain ___532_signal 	%argrw{"wrr"}
	mul		___530_weight ___530_weight $tmp488 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1364 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp489.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp489.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1364 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___530_p.x ___530_p.x $tmp489.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___530_p.y ___530_p.y $tmp489.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		$tmp490 ___531_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	add		___531_i ___531_i $const16 	%argrw{"wrr"}
	floor		$tmp491 detail 	%argrw{"wr"}
	sub		___530_rmd detail $tmp491 	%argrw{"wrr"}
	neq		$tmp492 ___530_rmd $const1 	%argrw{"wrr"}
	neq		$tmp493 $tmp492 $const15 	%argrw{"wrr"}
	if		$tmp493 1374 1374 	%argrw{"r"}
	gt		$tmp494 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp495 $tmp494 $const15 	%argrw{"wrr"}
	assign		$tmp493 $tmp495 	%argrw{"wr"}
	if		$tmp493 1390 1390 	%argrw{"r"}
	gt		$tmp496 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp496 1378 1378 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1385 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp498 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp498 1384 1384 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp497 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp497 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp499 $tmp497 Offset 	%line{240} %argrw{"wrr"}
	mul		___534_signal $tmp499 ___530_pwr 	%argrw{"wrr"}
	mul		$tmp500 ___530_rmd ___530_weight 	%argrw{"wrr"}
	mul		$tmp501 $tmp500 ___534_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp501 	%argrw{"wrr"}
	assign		$tmp428 ___530_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp502 type $const23 	%argrw{"wrr"}
	if		$tmp502 1443 1509 	%argrw{"r"}
	functioncall	$const24 1442 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	assign		___551_p.x $tmp429.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wr"}
	assign		___551_p.y $tmp429.y 	%argrw{"wr"}
	assign		___551_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1405 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp505 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp505 1404 1404 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp504 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp504 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp503 $tmp504 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp503 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	assign		___551_value ___551_signal 	%argrw{"wr"}
	assign		___551_weight $const14 	%argrw{"wr"}
	for		$tmp508 1412 1415 1439 1441 	%argrw{"r"}
	assign		___552_i $const16 	%argrw{"wr"}
	assign		$tmp506 detail 	%argrw{"wr"}
	le		$tmp507 ___552_i $tmp506 	%argrw{"wrr"}
	neq		$tmp508 $tmp507 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1421 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp509.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp509.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1421 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___551_p.x ___551_p.x $tmp509.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___551_p.y ___551_p.y $tmp509.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	mul		$tmp510 ___551_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wrr"}
	functioncall	$const3 1425 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp511 $tmp510 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___551_weight $tmp511 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	functioncall	$const9 1432 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp514 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp514 1431 1431 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp513 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp513 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp512 $tmp513 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp512 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_weight 	%argrw{"wrr"}
	mul		$tmp515 ___551_signal ___551_pwr 	%argrw{"wrr"}
	add		___551_value ___551_value $tmp515 	%argrw{"wrr"}
	mul		___551_pwr ___551_pwr roughness 	%argrw{"wrr"}
	assign		$tmp516 ___552_i 	%argrw{"wr"}
	add		___552_i ___552_i $const16 	%argrw{"wrr"}
	assign		$tmp428 ___551_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp517 type $const25 	%argrw{"wrr"}
	if		$tmp517 1506 1509 	%argrw{"r"}
	functioncall	$const26 1505 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		___512_p.x $tmp429.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	assign		___512_p.y $tmp429.y 	%argrw{"wr"}
	assign		___512_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1456 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp519 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp519 1455 1455 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp518 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp518 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		___512_value Offset $tmp518 	%line{233} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1463 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp520.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp520.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1463 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp520.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp520.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	for		$tmp523 1465 1468 1486 1488 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"r"}
	assign		___513_i $const16 	%argrw{"wr"}
	assign		$tmp521 detail 	%argrw{"wr"}
	le		$tmp522 ___513_i $tmp521 	%argrw{"wrr"}
	neq		$tmp523 $tmp522 $const15 	%argrw{"wrr"}
	functioncall	$const9 1475 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp525 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp525 1474 1474 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp524 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp524 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp526 $tmp524 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp527 $tmp526 ___512_pwr 	%argrw{"wrr"}
	mul		___514_increment $tmp527 ___512_value 	%argrw{"wrr"}
	add		___512_value ___512_value ___514_increment 	%argrw{"wrr"}
	mul		___512_pwr ___512_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1486 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp528.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp528.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1486 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp528.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp528.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		$tmp529 ___513_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	add		___513_i ___513_i $const16 	%argrw{"wrr"}
	floor		$tmp530 detail 	%argrw{"wr"}
	sub		___512_rmd detail $tmp530 	%argrw{"wrr"}
	neq		$tmp531 ___512_rmd $const1 	%argrw{"wrr"}
	if		$tmp531 1504 1504 	%argrw{"r"}
	functioncall	$const9 1499 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp533 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp533 1498 1498 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp532 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp532 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp534 $tmp532 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp535 $tmp534 ___512_pwr 	%argrw{"wrr"}
	mul		___515_increment $tmp535 ___512_value 	%argrw{"wrr"}
	mul		$tmp536 ___512_rmd ___515_increment 	%argrw{"wrr"}
	add		___512_value ___512_value $tmp536 	%argrw{"wrr"}
	assign		$tmp428 ___512_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	error		$const27 	%argrw{"r"}
	assign		$tmp428 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:148
#                 noise_select(p + random_vector2_offset(3.0),
	functioncall	$const30 1516 	%line{148} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:58
#   return vector2(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp540 $const8 $const33 $const1 	%line{58} %argrw{"wrrr"}
	mul		$tmp541 $tmp540 $const7 	%argrw{"wrr"}
	add		$tmp539.x $const7 $tmp541 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:59
#                  100.0 + noise("hash", seed, 1.0) * 100.0);
	noise		$tmp542 $const8 $const33 $const14 	%line{59} %argrw{"wrrr"}
	mul		$tmp543 $tmp542 $const7 	%argrw{"wrr"}
	add		$tmp539.y $const7 $tmp543 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 1519 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:28
#     return vector2(a.x + b.x, a.y + b.y);
	add		$tmp538.x ___611_p.x $tmp539.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{28} %argrw{"wrr"}
	add		$tmp538.y ___611_p.y $tmp539.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:148
#                 noise_select(p + random_vector2_offset(3.0),
	functioncall	$const11 1825 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{148} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	eq		$tmp544 type $const12 	%line{80} %argrw{"wrr"}
	if		$tmp544 1568 1825 	%argrw{"r"}
	functioncall	$const13 1567 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		___496_p.x $tmp538.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	assign		___496_p.y $tmp538.y 	%argrw{"wr"}
	assign		___496_value $const14 	%argrw{"wr"}
	assign		___496_pwr $const14 	%argrw{"wr"}
	for		$tmp547 1529 1532 1549 1551 	%argrw{"r"}
	assign		___497_i $const15 	%argrw{"wr"}
	assign		$tmp545 detail 	%argrw{"wr"}
	le		$tmp546 ___497_i $tmp545 	%argrw{"wrr"}
	neq		$tmp547 $tmp546 $const15 	%argrw{"wrr"}
	functioncall	$const9 1539 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp549 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp549 1538 1538 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp548 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp548 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp550 ___496_pwr $tmp548 	%line{226} %argrw{"wrr"}
	add		$tmp551 $tmp550 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp551 	%argrw{"wrr"}
	mul		___496_pwr ___496_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1549 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp552.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp552.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1549 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___496_p.x ___496_p.x $tmp552.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___496_p.y ___496_p.y $tmp552.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	assign		$tmp553 ___497_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{226} %argrw{"wr"}
	add		___497_i ___497_i $const16 	%argrw{"wrr"}
	floor		$tmp554 detail 	%argrw{"wr"}
	sub		___496_rmd detail $tmp554 	%argrw{"wrr"}
	neq		$tmp555 ___496_rmd $const1 	%argrw{"wrr"}
	if		$tmp555 1566 1566 	%argrw{"r"}
	mul		$tmp556 ___496_rmd ___496_pwr 	%argrw{"wrr"}
	functioncall	$const9 1563 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___496_p.x ___496_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp558 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp558 1562 1562 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp557 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp557 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:226
# NOISE_MULTI_FRACTAL(vector2)
	mul		$tmp559 $tmp556 $tmp557 	%line{226} %argrw{"wrr"}
	add		$tmp560 $tmp559 $const14 	%argrw{"wrr"}
	mul		___496_value ___496_value $tmp560 	%argrw{"wrr"}
	assign		$tmp537 ___496_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp561 type $const17 	%argrw{"wrr"}
	if		$tmp561 1639 1825 	%argrw{"r"}
	functioncall	$const18 1638 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	assign		___477_p.x $tmp538.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"wr"}
	assign		___477_p.y $tmp538.y 	%argrw{"wr"}
	assign		___477_fscale $const14 	%argrw{"wr"}
	assign		___477_amp $const14 	%argrw{"wr"}
	assign		___477_maxamp $const1 	%argrw{"wr"}
	assign		___477_sum $const1 	%argrw{"wr"}
	for		$tmp564 1579 1582 1600 1602 	%argrw{"r"}
	assign		___478_i $const15 	%argrw{"wr"}
	assign		$tmp562 detail 	%argrw{"wr"}
	le		$tmp563 ___478_i $tmp562 	%argrw{"wrr"}
	neq		$tmp564 $tmp563 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1588 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp566.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp566.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1588 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp565.x ___477_p.x $tmp566.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp565.y ___477_p.y $tmp566.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 1595 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp565.x $tmp565.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp567 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp567 1594 1594 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___479_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___479_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp568 ___479_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___477_sum ___477_sum $tmp568 	%argrw{"wrr"}
	add		___477_maxamp ___477_maxamp ___477_amp 	%argrw{"wrr"}
	mul		___477_amp ___477_amp roughness 	%argrw{"wrr"}
	mul		___477_fscale ___477_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp569 ___478_i 	%argrw{"wr"}
	add		___478_i ___478_i $const16 	%argrw{"wrr"}
	floor		$tmp570 detail 	%argrw{"wr"}
	sub		___477_rmd detail $tmp570 	%argrw{"wrr"}
	neq		$tmp571 ___477_rmd $const1 	%argrw{"wrr"}
	if		$tmp571 1632 1638 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1612 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:98
#     return b * vector2(a, a);
	assign		$tmp573.x ___477_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{98} %argrw{"wr"}
	assign		$tmp573.y ___477_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1612 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		$tmp572.x ___477_p.x $tmp573.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		$tmp572.y ___477_p.y $tmp573.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	functioncall	$const9 1619 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 $tmp572.x $tmp572.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp574 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp574 1618 1618 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		___480_t $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		___480_t ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:219
# NOISE_FBM(vector2)
	mul		$tmp575 ___480_t ___477_amp 	%line{219} %argrw{"wrr"}
	add		___480_sum2 ___477_sum $tmp575 	%argrw{"wrr"}
	if		use_normalize 1630 1631 	%argrw{"r"}
	mul		$tmp576 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp577 $tmp576 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp578 $tmp577 $const19 	%argrw{"wrr"}
	mul		$tmp579 $const19 ___480_sum2 	%argrw{"wrr"}
	add		$tmp580 ___477_maxamp ___477_amp 	%argrw{"wrr"}
	div		$tmp581 $tmp579 $tmp580 	%argrw{"wrr"}
	add		$tmp582 $tmp581 $const19 	%argrw{"wrr"}
	mix		$tmp537 $tmp578 $tmp582 ___477_rmd 	%argrw{"wrrr"}
	mix		$tmp537 ___477_sum ___480_sum2 ___477_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 1636 1637 	%argrw{"r"}
	mul		$tmp583 $const19 ___477_sum 	%argrw{"wrr"}
	div		$tmp584 $tmp583 ___477_maxamp 	%argrw{"wrr"}
	add		$tmp537 $tmp584 $const19 	%argrw{"wrr"}
	assign		$tmp537 ___477_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp585 type $const20 	%argrw{"wrr"}
	if		$tmp585 1708 1825 	%argrw{"r"}
	functioncall	$const21 1707 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		___530_p.x $tmp538.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	assign		___530_p.y $tmp538.y 	%argrw{"wr"}
	assign		___530_pwr $const14 	%argrw{"wr"}
	assign		___530_value $const1 	%argrw{"wr"}
	assign		___530_weight $const14 	%argrw{"wr"}
	for		$tmp591 1649 1657 1680 1682 	%argrw{"r"}
	assign		___531_i $const15 	%argrw{"wr"}
	gt		$tmp586 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp587 $tmp586 $const15 	%argrw{"wrr"}
	if		$tmp587 1656 1656 	%argrw{"r"}
	assign		$tmp588 detail 	%argrw{"wr"}
	le		$tmp589 ___531_i $tmp588 	%argrw{"wrr"}
	neq		$tmp590 $tmp589 $const15 	%argrw{"wrr"}
	assign		$tmp587 $tmp590 	%argrw{"wr"}
	neq		$tmp591 $tmp587 $const15 	%argrw{"wrr"}
	gt		$tmp592 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp592 1660 1660 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1667 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp594 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp594 1666 1666 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp593 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp593 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp595 $tmp593 Offset 	%line{240} %argrw{"wrr"}
	mul		___532_signal $tmp595 ___530_pwr 	%argrw{"wrr"}
	mul		___530_pwr ___530_pwr roughness 	%argrw{"wrr"}
	mul		$tmp596 ___530_weight ___532_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp596 	%argrw{"wrr"}
	mul		$tmp597 Gain ___532_signal 	%argrw{"wrr"}
	mul		___530_weight ___530_weight $tmp597 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1680 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp598.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp598.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1680 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___530_p.x ___530_p.x $tmp598.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___530_p.y ___530_p.y $tmp598.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	assign		$tmp599 ___531_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{240} %argrw{"wr"}
	add		___531_i ___531_i $const16 	%argrw{"wrr"}
	floor		$tmp600 detail 	%argrw{"wr"}
	sub		___530_rmd detail $tmp600 	%argrw{"wrr"}
	neq		$tmp601 ___530_rmd $const1 	%argrw{"wrr"}
	neq		$tmp602 $tmp601 $const15 	%argrw{"wrr"}
	if		$tmp602 1690 1690 	%argrw{"r"}
	gt		$tmp603 ___530_weight $const22 	%argrw{"wrr"}
	neq		$tmp604 $tmp603 $const15 	%argrw{"wrr"}
	assign		$tmp602 $tmp604 	%argrw{"wr"}
	if		$tmp602 1706 1706 	%argrw{"r"}
	gt		$tmp605 ___530_weight $const14 	%argrw{"wrr"}
	if		$tmp605 1694 1694 	%argrw{"r"}
	assign		___530_weight $const14 	%argrw{"wr"}
	functioncall	$const9 1701 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___530_p.x ___530_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp607 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp607 1700 1700 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp606 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp606 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:240
# NOISE_HYBRID_MULTI_FRACTAL(vector2)
	add		$tmp608 $tmp606 Offset 	%line{240} %argrw{"wrr"}
	mul		___534_signal $tmp608 ___530_pwr 	%argrw{"wrr"}
	mul		$tmp609 ___530_rmd ___530_weight 	%argrw{"wrr"}
	mul		$tmp610 $tmp609 ___534_signal 	%argrw{"wrr"}
	add		___530_value ___530_value $tmp610 	%argrw{"wrr"}
	assign		$tmp537 ___530_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp611 type $const23 	%argrw{"wrr"}
	if		$tmp611 1759 1825 	%argrw{"r"}
	functioncall	$const24 1758 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	assign		___551_p.x $tmp538.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wr"}
	assign		___551_p.y $tmp538.y 	%argrw{"wr"}
	assign		___551_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1721 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp614 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp614 1720 1720 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp613 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp613 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp612 $tmp613 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp612 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	assign		___551_value ___551_signal 	%argrw{"wr"}
	assign		___551_weight $const14 	%argrw{"wr"}
	for		$tmp617 1728 1731 1755 1757 	%argrw{"r"}
	assign		___552_i $const16 	%argrw{"wr"}
	assign		$tmp615 detail 	%argrw{"wr"}
	le		$tmp616 ___552_i $tmp615 	%argrw{"wrr"}
	neq		$tmp617 $tmp616 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1737 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp618.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp618.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1737 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___551_p.x ___551_p.x $tmp618.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___551_p.y ___551_p.y $tmp618.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	mul		$tmp619 ___551_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"wrr"}
	functioncall	$const3 1741 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp620 $tmp619 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___551_weight $tmp620 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	functioncall	$const9 1748 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{247} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___551_p.x ___551_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp623 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp623 1747 1747 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp622 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp622 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:247
# NOISE_RIDGED_MULTI_FRACTAL(vector2)
	fabs		$tmp621 $tmp622 	%line{247} %argrw{"wr"}
	sub		___551_signal Offset $tmp621 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_signal 	%argrw{"wrr"}
	mul		___551_signal ___551_signal ___551_weight 	%argrw{"wrr"}
	mul		$tmp624 ___551_signal ___551_pwr 	%argrw{"wrr"}
	add		___551_value ___551_value $tmp624 	%argrw{"wrr"}
	mul		___551_pwr ___551_pwr roughness 	%argrw{"wrr"}
	assign		$tmp625 ___552_i 	%argrw{"wr"}
	add		___552_i ___552_i $const16 	%argrw{"wrr"}
	assign		$tmp537 ___551_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	eq		$tmp626 type $const25 	%argrw{"wrr"}
	if		$tmp626 1822 1825 	%argrw{"r"}
	functioncall	$const26 1821 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		___512_p.x $tmp538.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	assign		___512_p.y $tmp538.y 	%argrw{"wr"}
	assign		___512_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 1772 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp628 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp628 1771 1771 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp627 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp627 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		___512_value Offset $tmp627 	%line{233} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1779 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp629.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp629.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1779 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp629.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp629.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	for		$tmp632 1781 1784 1802 1804 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"r"}
	assign		___513_i $const16 	%argrw{"wr"}
	assign		$tmp630 detail 	%argrw{"wr"}
	le		$tmp631 ___513_i $tmp630 	%argrw{"wrr"}
	neq		$tmp632 $tmp631 $const15 	%argrw{"wrr"}
	functioncall	$const9 1791 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp634 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp634 1790 1790 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp633 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp633 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp635 $tmp633 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp636 $tmp635 ___512_pwr 	%argrw{"wrr"}
	mul		___514_increment $tmp636 ___512_value 	%argrw{"wrr"}
	add		___512_value ___512_value ___514_increment 	%argrw{"wrr"}
	mul		___512_pwr ___512_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1802 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:88
#     return a * vector2(b, b);
	assign		$tmp637.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{88} %argrw{"wr"}
	assign		$tmp637.y Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 1802 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h:78
#     return vector2(a.x * b.x, a.y * b.y);
	mul		___512_p.x ___512_p.x $tmp637.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector2.h"} %line{78} %argrw{"wrr"}
	mul		___512_p.y ___512_p.y $tmp637.y 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	assign		$tmp638 ___513_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{233} %argrw{"wr"}
	add		___513_i ___513_i $const16 	%argrw{"wrr"}
	floor		$tmp639 detail 	%argrw{"wr"}
	sub		___512_rmd detail $tmp639 	%argrw{"wrr"}
	neq		$tmp640 ___512_rmd $const1 	%argrw{"wrr"}
	if		$tmp640 1820 1820 	%argrw{"r"}
	functioncall	$const9 1815 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:57
#   float f = noise("snoise", p.x, p.y);
	noise		___466_f $const10 ___512_p.x ___512_p.y 	%line{57} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:58
#   if (isinf(f)) {
	isinf		$tmp642 ___466_f 	%line{58} %argrw{"wr"}
	if		$tmp642 1814 1814 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:59
#     return 0.0;
	assign		$tmp641 $const1 	%line{59} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:61
#   return f;
	assign		$tmp641 ___466_f 	%line{61} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:233
# NOISE_HETERO_TERRAIN(vector2)
	add		$tmp643 $tmp641 Offset 	%line{233} %argrw{"wrr"}
	mul		$tmp644 $tmp643 ___512_pwr 	%argrw{"wrr"}
	mul		___515_increment $tmp644 ___512_value 	%argrw{"wrr"}
	mul		$tmp645 ___512_rmd ___515_increment 	%argrw{"wrr"}
	add		___512_value ___512_value $tmp645 	%argrw{"wrr"}
	assign		$tmp537 ___512_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:80
# NOISE_SELECT(vector2)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{80}
	error		$const27 	%argrw{"r"}
	assign		$tmp537 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:139
#   Color = color(value,
	color		Color ___611_value $tmp428 $tmp537 	%line{139} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:156
#   return value;
	assign		Fac ___611_value 	%line{156} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:281
#   else if (dimensions == "3D") {
	eq		$tmp646 dimensions $const34 	%line{281} %argrw{"wrr"}
	if		$tmp646 2719 3949 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:282
#     Fac = noise_texture(
	functioncall	$const5 2719 	%line{282} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:170
#   vector3 p = co;
	assign		___613_p p 	%line{170} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:171
#   if (distortion != 0.0) {
	neq		$tmp647 Distortion $const1 	%line{171} %argrw{"wrr"}
	if		$tmp647 1895 1895 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:172
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	functioncall	$const35 1844 	%line{172} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp651 $const8 $const1 $const1 	%line{64} %argrw{"wrrr"}
	mul		$tmp652 $tmp651 $const7 	%argrw{"wrr"}
	add		$tmp653 $const7 $tmp652 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp654 $const8 $const1 $const14 	%line{65} %argrw{"wrrr"}
	mul		$tmp655 $tmp654 $const7 	%argrw{"wrr"}
	add		$tmp656 $const7 $tmp655 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:66
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp657 $const8 $const1 $const28 	%line{66} %argrw{"wrrr"}
	mul		$tmp658 $tmp657 $const7 	%argrw{"wrr"}
	add		$tmp659 $const7 $tmp658 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp650 $tmp653 $tmp656 $tmp659 	%line{64} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:172
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	add		$tmp660 ___613_p $tmp650 	%line{172} %argrw{"wrr"}
	functioncall	$const9 1852 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp660 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp661 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp661 1851 1851 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp649 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp649 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:172
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	mul		$tmp662 $tmp649 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{172} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:173
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	functioncall	$const35 1864 	%line{173} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp665 $const8 $const14 $const1 	%line{64} %argrw{"wrrr"}
	mul		$tmp666 $tmp665 $const7 	%argrw{"wrr"}
	add		$tmp667 $const7 $tmp666 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp668 $const8 $const14 $const14 	%line{65} %argrw{"wrrr"}
	mul		$tmp669 $tmp668 $const7 	%argrw{"wrr"}
	add		$tmp670 $const7 $tmp669 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:66
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp671 $const8 $const14 $const28 	%line{66} %argrw{"wrrr"}
	mul		$tmp672 $tmp671 $const7 	%argrw{"wrr"}
	add		$tmp673 $const7 $tmp672 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp664 $tmp667 $tmp670 $tmp673 	%line{64} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:173
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	add		$tmp674 ___613_p $tmp664 	%line{173} %argrw{"wrr"}
	functioncall	$const9 1872 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp674 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp675 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp675 1871 1871 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp663 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp663 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:173
#                  safe_snoise(p + random_vector3_offset(1.0)) * distortion,
	mul		$tmp676 $tmp663 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{173} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:174
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	functioncall	$const35 1884 	%line{174} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp679 $const8 $const28 $const1 	%line{64} %argrw{"wrrr"}
	mul		$tmp680 $tmp679 $const7 	%argrw{"wrr"}
	add		$tmp681 $const7 $tmp680 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp682 $const8 $const28 $const14 	%line{65} %argrw{"wrrr"}
	mul		$tmp683 $tmp682 $const7 	%argrw{"wrr"}
	add		$tmp684 $const7 $tmp683 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:66
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp685 $const8 $const28 $const28 	%line{66} %argrw{"wrrr"}
	mul		$tmp686 $tmp685 $const7 	%argrw{"wrr"}
	add		$tmp687 $const7 $tmp686 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp678 $tmp681 $tmp684 $tmp687 	%line{64} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:174
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		$tmp688 ___613_p $tmp678 	%line{174} %argrw{"wrr"}
	functioncall	$const9 1892 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp688 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp689 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp689 1891 1891 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp677 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp677 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:174
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	mul		$tmp690 $tmp677 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{174} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:172
#     p += vector3(safe_snoise(p + random_vector3_offset(0.0)) * distortion,
	point		$tmp648 $tmp662 $tmp676 $tmp690 	%line{172} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:174
#                  safe_snoise(p + random_vector3_offset(2.0)) * distortion);
	add		___613_p ___613_p $tmp648 	%line{174} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:177
#   float value = noise_select(p, detail, roughness, lacunarity, offset, gain, type, use_normalize);
	functioncall	$const11 2161 	%line{177} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	eq		$tmp691 type $const12 	%line{81} %argrw{"wrr"}
	if		$tmp691 1938 2161 	%argrw{"r"}
	functioncall	$const13 1937 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	assign		___500_p ___613_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{227} %argrw{"wr"}
	assign		___500_value $const14 	%argrw{"wr"}
	assign		___500_pwr $const14 	%argrw{"wr"}
	for		$tmp694 1904 1907 1919 1921 	%argrw{"r"}
	assign		___501_i $const15 	%argrw{"wr"}
	assign		$tmp692 detail 	%argrw{"wr"}
	le		$tmp693 ___501_i $tmp692 	%argrw{"wrr"}
	neq		$tmp694 $tmp693 $const15 	%argrw{"wrr"}
	functioncall	$const9 1914 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp696 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp696 1913 1913 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp695 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp695 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp697 ___500_pwr $tmp695 	%line{227} %argrw{"wrr"}
	add		$tmp698 $tmp697 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp698 	%argrw{"wrr"}
	mul		___500_pwr ___500_pwr roughness 	%argrw{"wrr"}
	mul		___500_p ___500_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp699 ___501_i 	%argrw{"wr"}
	add		___501_i ___501_i $const16 	%argrw{"wrr"}
	floor		$tmp700 detail 	%argrw{"wr"}
	sub		___500_rmd detail $tmp700 	%argrw{"wrr"}
	neq		$tmp701 ___500_rmd $const1 	%argrw{"wrr"}
	if		$tmp701 1936 1936 	%argrw{"r"}
	mul		$tmp702 ___500_rmd ___500_pwr 	%argrw{"wrr"}
	functioncall	$const9 1933 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp704 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp704 1932 1932 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp703 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp703 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp705 $tmp702 $tmp703 	%line{227} %argrw{"wrr"}
	add		$tmp706 $tmp705 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp706 	%argrw{"wrr"}
	assign		___613_value ___500_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp707 type $const17 	%argrw{"wrr"}
	if		$tmp707 1998 2161 	%argrw{"r"}
	functioncall	$const18 1997 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	assign		___482_p ___613_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{220} %argrw{"wr"}
	assign		___482_fscale $const14 	%argrw{"wr"}
	assign		___482_amp $const14 	%argrw{"wr"}
	assign		___482_maxamp $const1 	%argrw{"wr"}
	assign		___482_sum $const1 	%argrw{"wr"}
	for		$tmp710 1948 1951 1964 1966 	%argrw{"r"}
	assign		___483_i $const15 	%argrw{"wr"}
	assign		$tmp708 detail 	%argrw{"wr"}
	le		$tmp709 ___483_i $tmp708 	%argrw{"wrr"}
	neq		$tmp710 $tmp709 $const15 	%argrw{"wrr"}
	mul		$tmp711 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 1959 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp711 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp712 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp712 1958 1958 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp713 ___484_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp713 	%argrw{"wrr"}
	add		___482_maxamp ___482_maxamp ___482_amp 	%argrw{"wrr"}
	mul		___482_amp ___482_amp roughness 	%argrw{"wrr"}
	mul		___482_fscale ___482_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp714 ___483_i 	%argrw{"wr"}
	add		___483_i ___483_i $const16 	%argrw{"wrr"}
	floor		$tmp715 detail 	%argrw{"wr"}
	sub		___482_rmd detail $tmp715 	%argrw{"wrr"}
	neq		$tmp716 ___482_rmd $const1 	%argrw{"wrr"}
	if		$tmp716 1991 1997 	%argrw{"r"}
	mul		$tmp717 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 1978 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp717 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp718 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp718 1977 1977 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp719 ___485_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp719 	%argrw{"wrr"}
	if		use_normalize 1989 1990 	%argrw{"r"}
	mul		$tmp720 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp721 $tmp720 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp722 $tmp721 $const19 	%argrw{"wrr"}
	mul		$tmp723 $const19 ___485_sum2 	%argrw{"wrr"}
	add		$tmp724 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp725 $tmp723 $tmp724 	%argrw{"wrr"}
	add		$tmp726 $tmp725 $const19 	%argrw{"wrr"}
	mix		___613_value $tmp722 $tmp726 ___482_rmd 	%argrw{"wrrr"}
	mix		___613_value ___482_sum ___485_sum2 ___482_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 1995 1996 	%argrw{"r"}
	mul		$tmp727 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp728 $tmp727 ___482_maxamp 	%argrw{"wrr"}
	add		___613_value $tmp728 $const19 	%argrw{"wrr"}
	assign		___613_value ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp729 type $const20 	%argrw{"wrr"}
	if		$tmp729 2061 2161 	%argrw{"r"}
	functioncall	$const21 2060 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	assign		___536_p ___613_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{241} %argrw{"wr"}
	assign		___536_pwr $const14 	%argrw{"wr"}
	assign		___536_value $const1 	%argrw{"wr"}
	assign		___536_weight $const14 	%argrw{"wr"}
	for		$tmp735 2007 2015 2033 2035 	%argrw{"r"}
	assign		___537_i $const15 	%argrw{"wr"}
	gt		$tmp730 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp731 $tmp730 $const15 	%argrw{"wrr"}
	if		$tmp731 2014 2014 	%argrw{"r"}
	assign		$tmp732 detail 	%argrw{"wr"}
	le		$tmp733 ___537_i $tmp732 	%argrw{"wrr"}
	neq		$tmp734 $tmp733 $const15 	%argrw{"wrr"}
	assign		$tmp731 $tmp734 	%argrw{"wr"}
	neq		$tmp735 $tmp731 $const15 	%argrw{"wrr"}
	gt		$tmp736 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp736 2018 2018 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2025 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp738 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp738 2024 2024 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp737 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp737 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp739 $tmp737 Offset 	%line{241} %argrw{"wrr"}
	mul		___538_signal $tmp739 ___536_pwr 	%argrw{"wrr"}
	mul		___536_pwr ___536_pwr roughness 	%argrw{"wrr"}
	mul		$tmp740 ___536_weight ___538_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp740 	%argrw{"wrr"}
	mul		$tmp741 Gain ___538_signal 	%argrw{"wrr"}
	mul		___536_weight ___536_weight $tmp741 	%argrw{"wrr"}
	mul		___536_p ___536_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp742 ___537_i 	%argrw{"wr"}
	add		___537_i ___537_i $const16 	%argrw{"wrr"}
	floor		$tmp743 detail 	%argrw{"wr"}
	sub		___536_rmd detail $tmp743 	%argrw{"wrr"}
	neq		$tmp744 ___536_rmd $const1 	%argrw{"wrr"}
	neq		$tmp745 $tmp744 $const15 	%argrw{"wrr"}
	if		$tmp745 2043 2043 	%argrw{"r"}
	gt		$tmp746 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp747 $tmp746 $const15 	%argrw{"wrr"}
	assign		$tmp745 $tmp747 	%argrw{"wr"}
	if		$tmp745 2059 2059 	%argrw{"r"}
	gt		$tmp748 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp748 2047 2047 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2054 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp750 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp750 2053 2053 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp749 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp749 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp751 $tmp749 Offset 	%line{241} %argrw{"wrr"}
	mul		___540_signal $tmp751 ___536_pwr 	%argrw{"wrr"}
	mul		$tmp752 ___536_rmd ___536_weight 	%argrw{"wrr"}
	mul		$tmp753 $tmp752 ___540_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp753 	%argrw{"wrr"}
	assign		___613_value ___536_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp754 type $const23 	%argrw{"wrr"}
	if		$tmp754 2106 2161 	%argrw{"r"}
	functioncall	$const24 2105 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	assign		___554_p ___613_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"wr"}
	assign		___554_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2073 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp757 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp757 2072 2072 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp756 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp756 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp755 $tmp756 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp755 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	assign		___554_value ___554_signal 	%argrw{"wr"}
	assign		___554_weight $const14 	%argrw{"wr"}
	for		$tmp760 2080 2083 2102 2104 	%argrw{"r"}
	assign		___555_i $const16 	%argrw{"wr"}
	assign		$tmp758 detail 	%argrw{"wr"}
	le		$tmp759 ___555_i $tmp758 	%argrw{"wrr"}
	neq		$tmp760 $tmp759 $const15 	%argrw{"wrr"}
	mul		___554_p ___554_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp761 ___554_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 2088 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp762 $tmp761 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___554_weight $tmp762 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	functioncall	$const9 2095 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp765 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp765 2094 2094 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp764 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp764 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp763 $tmp764 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp763 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_weight 	%argrw{"wrr"}
	mul		$tmp766 ___554_signal ___554_pwr 	%argrw{"wrr"}
	add		___554_value ___554_value $tmp766 	%argrw{"wrr"}
	mul		___554_pwr ___554_pwr roughness 	%argrw{"wrr"}
	assign		$tmp767 ___555_i 	%argrw{"wr"}
	add		___555_i ___555_i $const16 	%argrw{"wrr"}
	assign		___613_value ___554_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp768 type $const25 	%argrw{"wrr"}
	if		$tmp768 2158 2161 	%argrw{"r"}
	functioncall	$const26 2157 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	assign		___516_p ___613_p 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{234} %argrw{"wr"}
	assign		___516_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2118 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp770 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp770 2117 2117 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp769 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp769 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		___516_value Offset $tmp769 	%line{234} %argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	for		$tmp773 2122 2125 2138 2140 	%argrw{"r"}
	assign		___517_i $const16 	%argrw{"wr"}
	assign		$tmp771 detail 	%argrw{"wr"}
	le		$tmp772 ___517_i $tmp771 	%argrw{"wrr"}
	neq		$tmp773 $tmp772 $const15 	%argrw{"wrr"}
	functioncall	$const9 2132 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp775 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp775 2131 2131 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp774 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp774 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp776 $tmp774 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp777 $tmp776 ___516_pwr 	%argrw{"wrr"}
	mul		___518_increment $tmp777 ___516_value 	%argrw{"wrr"}
	add		___516_value ___516_value ___518_increment 	%argrw{"wrr"}
	mul		___516_pwr ___516_pwr roughness 	%argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp778 ___517_i 	%argrw{"wr"}
	add		___517_i ___517_i $const16 	%argrw{"wrr"}
	floor		$tmp779 detail 	%argrw{"wr"}
	sub		___516_rmd detail $tmp779 	%argrw{"wrr"}
	neq		$tmp780 ___516_rmd $const1 	%argrw{"wrr"}
	if		$tmp780 2156 2156 	%argrw{"r"}
	functioncall	$const9 2151 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp782 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp782 2150 2150 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp781 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp781 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp783 $tmp781 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp784 $tmp783 ___516_pwr 	%argrw{"wrr"}
	mul		___519_increment $tmp784 ___516_value 	%argrw{"wrr"}
	mul		$tmp785 ___516_rmd ___519_increment 	%argrw{"wrr"}
	add		___516_value ___516_value $tmp785 	%argrw{"wrr"}
	assign		___613_value ___516_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	error		$const27 	%argrw{"r"}
	assign		___613_value $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:179
#                 noise_select(p + random_vector3_offset(3.0),
	functioncall	$const35 2172 	%line{179} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp788 $const8 $const33 $const1 	%line{64} %argrw{"wrrr"}
	mul		$tmp789 $tmp788 $const7 	%argrw{"wrr"}
	add		$tmp790 $const7 $tmp789 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp791 $const8 $const33 $const14 	%line{65} %argrw{"wrrr"}
	mul		$tmp792 $tmp791 $const7 	%argrw{"wrr"}
	add		$tmp793 $const7 $tmp792 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:66
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp794 $const8 $const33 $const28 	%line{66} %argrw{"wrrr"}
	mul		$tmp795 $tmp794 $const7 	%argrw{"wrr"}
	add		$tmp796 $const7 $tmp795 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp787 $tmp790 $tmp793 $tmp796 	%line{64} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:179
#                 noise_select(p + random_vector3_offset(3.0),
	add		$tmp797 ___613_p $tmp787 	%line{179} %argrw{"wrr"}
	functioncall	$const11 2439 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	eq		$tmp798 type $const12 	%line{81} %argrw{"wrr"}
	if		$tmp798 2216 2439 	%argrw{"r"}
	functioncall	$const13 2215 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	assign		___500_p $tmp797 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{227} %argrw{"wr"}
	assign		___500_value $const14 	%argrw{"wr"}
	assign		___500_pwr $const14 	%argrw{"wr"}
	for		$tmp801 2182 2185 2197 2199 	%argrw{"r"}
	assign		___501_i $const15 	%argrw{"wr"}
	assign		$tmp799 detail 	%argrw{"wr"}
	le		$tmp800 ___501_i $tmp799 	%argrw{"wrr"}
	neq		$tmp801 $tmp800 $const15 	%argrw{"wrr"}
	functioncall	$const9 2192 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp803 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp803 2191 2191 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp802 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp802 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp804 ___500_pwr $tmp802 	%line{227} %argrw{"wrr"}
	add		$tmp805 $tmp804 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp805 	%argrw{"wrr"}
	mul		___500_pwr ___500_pwr roughness 	%argrw{"wrr"}
	mul		___500_p ___500_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp806 ___501_i 	%argrw{"wr"}
	add		___501_i ___501_i $const16 	%argrw{"wrr"}
	floor		$tmp807 detail 	%argrw{"wr"}
	sub		___500_rmd detail $tmp807 	%argrw{"wrr"}
	neq		$tmp808 ___500_rmd $const1 	%argrw{"wrr"}
	if		$tmp808 2214 2214 	%argrw{"r"}
	mul		$tmp809 ___500_rmd ___500_pwr 	%argrw{"wrr"}
	functioncall	$const9 2211 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp811 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp811 2210 2210 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp810 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp810 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp812 $tmp809 $tmp810 	%line{227} %argrw{"wrr"}
	add		$tmp813 $tmp812 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp813 	%argrw{"wrr"}
	assign		$tmp786 ___500_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp814 type $const17 	%argrw{"wrr"}
	if		$tmp814 2276 2439 	%argrw{"r"}
	functioncall	$const18 2275 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	assign		___482_p $tmp797 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{220} %argrw{"wr"}
	assign		___482_fscale $const14 	%argrw{"wr"}
	assign		___482_amp $const14 	%argrw{"wr"}
	assign		___482_maxamp $const1 	%argrw{"wr"}
	assign		___482_sum $const1 	%argrw{"wr"}
	for		$tmp817 2226 2229 2242 2244 	%argrw{"r"}
	assign		___483_i $const15 	%argrw{"wr"}
	assign		$tmp815 detail 	%argrw{"wr"}
	le		$tmp816 ___483_i $tmp815 	%argrw{"wrr"}
	neq		$tmp817 $tmp816 $const15 	%argrw{"wrr"}
	mul		$tmp818 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 2237 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp818 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp819 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp819 2236 2236 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp820 ___484_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp820 	%argrw{"wrr"}
	add		___482_maxamp ___482_maxamp ___482_amp 	%argrw{"wrr"}
	mul		___482_amp ___482_amp roughness 	%argrw{"wrr"}
	mul		___482_fscale ___482_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp821 ___483_i 	%argrw{"wr"}
	add		___483_i ___483_i $const16 	%argrw{"wrr"}
	floor		$tmp822 detail 	%argrw{"wr"}
	sub		___482_rmd detail $tmp822 	%argrw{"wrr"}
	neq		$tmp823 ___482_rmd $const1 	%argrw{"wrr"}
	if		$tmp823 2269 2275 	%argrw{"r"}
	mul		$tmp824 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 2256 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp824 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp825 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp825 2255 2255 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp826 ___485_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp826 	%argrw{"wrr"}
	if		use_normalize 2267 2268 	%argrw{"r"}
	mul		$tmp827 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp828 $tmp827 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp829 $tmp828 $const19 	%argrw{"wrr"}
	mul		$tmp830 $const19 ___485_sum2 	%argrw{"wrr"}
	add		$tmp831 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp832 $tmp830 $tmp831 	%argrw{"wrr"}
	add		$tmp833 $tmp832 $const19 	%argrw{"wrr"}
	mix		$tmp786 $tmp829 $tmp833 ___482_rmd 	%argrw{"wrrr"}
	mix		$tmp786 ___482_sum ___485_sum2 ___482_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 2273 2274 	%argrw{"r"}
	mul		$tmp834 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp835 $tmp834 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp786 $tmp835 $const19 	%argrw{"wrr"}
	assign		$tmp786 ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp836 type $const20 	%argrw{"wrr"}
	if		$tmp836 2339 2439 	%argrw{"r"}
	functioncall	$const21 2338 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	assign		___536_p $tmp797 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{241} %argrw{"wr"}
	assign		___536_pwr $const14 	%argrw{"wr"}
	assign		___536_value $const1 	%argrw{"wr"}
	assign		___536_weight $const14 	%argrw{"wr"}
	for		$tmp842 2285 2293 2311 2313 	%argrw{"r"}
	assign		___537_i $const15 	%argrw{"wr"}
	gt		$tmp837 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp838 $tmp837 $const15 	%argrw{"wrr"}
	if		$tmp838 2292 2292 	%argrw{"r"}
	assign		$tmp839 detail 	%argrw{"wr"}
	le		$tmp840 ___537_i $tmp839 	%argrw{"wrr"}
	neq		$tmp841 $tmp840 $const15 	%argrw{"wrr"}
	assign		$tmp838 $tmp841 	%argrw{"wr"}
	neq		$tmp842 $tmp838 $const15 	%argrw{"wrr"}
	gt		$tmp843 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp843 2296 2296 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2303 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp845 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp845 2302 2302 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp844 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp844 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp846 $tmp844 Offset 	%line{241} %argrw{"wrr"}
	mul		___538_signal $tmp846 ___536_pwr 	%argrw{"wrr"}
	mul		___536_pwr ___536_pwr roughness 	%argrw{"wrr"}
	mul		$tmp847 ___536_weight ___538_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp847 	%argrw{"wrr"}
	mul		$tmp848 Gain ___538_signal 	%argrw{"wrr"}
	mul		___536_weight ___536_weight $tmp848 	%argrw{"wrr"}
	mul		___536_p ___536_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp849 ___537_i 	%argrw{"wr"}
	add		___537_i ___537_i $const16 	%argrw{"wrr"}
	floor		$tmp850 detail 	%argrw{"wr"}
	sub		___536_rmd detail $tmp850 	%argrw{"wrr"}
	neq		$tmp851 ___536_rmd $const1 	%argrw{"wrr"}
	neq		$tmp852 $tmp851 $const15 	%argrw{"wrr"}
	if		$tmp852 2321 2321 	%argrw{"r"}
	gt		$tmp853 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp854 $tmp853 $const15 	%argrw{"wrr"}
	assign		$tmp852 $tmp854 	%argrw{"wr"}
	if		$tmp852 2337 2337 	%argrw{"r"}
	gt		$tmp855 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp855 2325 2325 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2332 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp857 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp857 2331 2331 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp856 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp856 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp858 $tmp856 Offset 	%line{241} %argrw{"wrr"}
	mul		___540_signal $tmp858 ___536_pwr 	%argrw{"wrr"}
	mul		$tmp859 ___536_rmd ___536_weight 	%argrw{"wrr"}
	mul		$tmp860 $tmp859 ___540_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp860 	%argrw{"wrr"}
	assign		$tmp786 ___536_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp861 type $const23 	%argrw{"wrr"}
	if		$tmp861 2384 2439 	%argrw{"r"}
	functioncall	$const24 2383 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	assign		___554_p $tmp797 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"wr"}
	assign		___554_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2351 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp864 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp864 2350 2350 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp863 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp863 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp862 $tmp863 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp862 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	assign		___554_value ___554_signal 	%argrw{"wr"}
	assign		___554_weight $const14 	%argrw{"wr"}
	for		$tmp867 2358 2361 2380 2382 	%argrw{"r"}
	assign		___555_i $const16 	%argrw{"wr"}
	assign		$tmp865 detail 	%argrw{"wr"}
	le		$tmp866 ___555_i $tmp865 	%argrw{"wrr"}
	neq		$tmp867 $tmp866 $const15 	%argrw{"wrr"}
	mul		___554_p ___554_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp868 ___554_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 2366 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp869 $tmp868 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___554_weight $tmp869 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	functioncall	$const9 2373 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp872 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp872 2372 2372 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp871 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp871 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp870 $tmp871 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp870 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_weight 	%argrw{"wrr"}
	mul		$tmp873 ___554_signal ___554_pwr 	%argrw{"wrr"}
	add		___554_value ___554_value $tmp873 	%argrw{"wrr"}
	mul		___554_pwr ___554_pwr roughness 	%argrw{"wrr"}
	assign		$tmp874 ___555_i 	%argrw{"wr"}
	add		___555_i ___555_i $const16 	%argrw{"wrr"}
	assign		$tmp786 ___554_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp875 type $const25 	%argrw{"wrr"}
	if		$tmp875 2436 2439 	%argrw{"r"}
	functioncall	$const26 2435 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	assign		___516_p $tmp797 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{234} %argrw{"wr"}
	assign		___516_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2396 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp877 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp877 2395 2395 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp876 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp876 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		___516_value Offset $tmp876 	%line{234} %argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	for		$tmp880 2400 2403 2416 2418 	%argrw{"r"}
	assign		___517_i $const16 	%argrw{"wr"}
	assign		$tmp878 detail 	%argrw{"wr"}
	le		$tmp879 ___517_i $tmp878 	%argrw{"wrr"}
	neq		$tmp880 $tmp879 $const15 	%argrw{"wrr"}
	functioncall	$const9 2410 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp882 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp882 2409 2409 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp881 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp881 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp883 $tmp881 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp884 $tmp883 ___516_pwr 	%argrw{"wrr"}
	mul		___518_increment $tmp884 ___516_value 	%argrw{"wrr"}
	add		___516_value ___516_value ___518_increment 	%argrw{"wrr"}
	mul		___516_pwr ___516_pwr roughness 	%argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp885 ___517_i 	%argrw{"wr"}
	add		___517_i ___517_i $const16 	%argrw{"wrr"}
	floor		$tmp886 detail 	%argrw{"wr"}
	sub		___516_rmd detail $tmp886 	%argrw{"wrr"}
	neq		$tmp887 ___516_rmd $const1 	%argrw{"wrr"}
	if		$tmp887 2434 2434 	%argrw{"r"}
	functioncall	$const9 2429 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp889 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp889 2428 2428 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp888 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp888 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp890 $tmp888 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp891 $tmp890 ___516_pwr 	%argrw{"wrr"}
	mul		___519_increment $tmp891 ___516_value 	%argrw{"wrr"}
	mul		$tmp892 ___516_rmd ___519_increment 	%argrw{"wrr"}
	add		___516_value ___516_value $tmp892 	%argrw{"wrr"}
	assign		$tmp786 ___516_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	error		$const27 	%argrw{"r"}
	assign		$tmp786 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:187
#                 noise_select(p + random_vector3_offset(4.0),
	functioncall	$const35 2450 	%line{187} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp895 $const8 $const36 $const1 	%line{64} %argrw{"wrrr"}
	mul		$tmp896 $tmp895 $const7 	%argrw{"wrr"}
	add		$tmp897 $const7 $tmp896 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:65
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp898 $const8 $const36 $const14 	%line{65} %argrw{"wrrr"}
	mul		$tmp899 $tmp898 $const7 	%argrw{"wrr"}
	add		$tmp900 $const7 $tmp899 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:66
#                  100.0 + noise("hash", seed, 2.0) * 100.0);
	noise		$tmp901 $const8 $const36 $const28 	%line{66} %argrw{"wrrr"}
	mul		$tmp902 $tmp901 $const7 	%argrw{"wrr"}
	add		$tmp903 $const7 $tmp902 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:64
#   return vector3(100.0 + noise("hash", seed, 0.0) * 100.0,
	point		$tmp894 $tmp897 $tmp900 $tmp903 	%line{64} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:187
#                 noise_select(p + random_vector3_offset(4.0),
	add		$tmp904 ___613_p $tmp894 	%line{187} %argrw{"wrr"}
	functioncall	$const11 2717 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	eq		$tmp905 type $const12 	%line{81} %argrw{"wrr"}
	if		$tmp905 2494 2717 	%argrw{"r"}
	functioncall	$const13 2493 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	assign		___500_p $tmp904 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{227} %argrw{"wr"}
	assign		___500_value $const14 	%argrw{"wr"}
	assign		___500_pwr $const14 	%argrw{"wr"}
	for		$tmp908 2460 2463 2475 2477 	%argrw{"r"}
	assign		___501_i $const15 	%argrw{"wr"}
	assign		$tmp906 detail 	%argrw{"wr"}
	le		$tmp907 ___501_i $tmp906 	%argrw{"wrr"}
	neq		$tmp908 $tmp907 $const15 	%argrw{"wrr"}
	functioncall	$const9 2470 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp910 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp910 2469 2469 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp909 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp909 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp911 ___500_pwr $tmp909 	%line{227} %argrw{"wrr"}
	add		$tmp912 $tmp911 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp912 	%argrw{"wrr"}
	mul		___500_pwr ___500_pwr roughness 	%argrw{"wrr"}
	mul		___500_p ___500_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp913 ___501_i 	%argrw{"wr"}
	add		___501_i ___501_i $const16 	%argrw{"wrr"}
	floor		$tmp914 detail 	%argrw{"wr"}
	sub		___500_rmd detail $tmp914 	%argrw{"wrr"}
	neq		$tmp915 ___500_rmd $const1 	%argrw{"wrr"}
	if		$tmp915 2492 2492 	%argrw{"r"}
	mul		$tmp916 ___500_rmd ___500_pwr 	%argrw{"wrr"}
	functioncall	$const9 2489 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___500_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp918 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp918 2488 2488 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp917 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp917 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:227
# NOISE_MULTI_FRACTAL(vector3)
	mul		$tmp919 $tmp916 $tmp917 	%line{227} %argrw{"wrr"}
	add		$tmp920 $tmp919 $const14 	%argrw{"wrr"}
	mul		___500_value ___500_value $tmp920 	%argrw{"wrr"}
	assign		$tmp893 ___500_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp921 type $const17 	%argrw{"wrr"}
	if		$tmp921 2554 2717 	%argrw{"r"}
	functioncall	$const18 2553 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	assign		___482_p $tmp904 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{220} %argrw{"wr"}
	assign		___482_fscale $const14 	%argrw{"wr"}
	assign		___482_amp $const14 	%argrw{"wr"}
	assign		___482_maxamp $const1 	%argrw{"wr"}
	assign		___482_sum $const1 	%argrw{"wr"}
	for		$tmp924 2504 2507 2520 2522 	%argrw{"r"}
	assign		___483_i $const15 	%argrw{"wr"}
	assign		$tmp922 detail 	%argrw{"wr"}
	le		$tmp923 ___483_i $tmp922 	%argrw{"wrr"}
	neq		$tmp924 $tmp923 $const15 	%argrw{"wrr"}
	mul		$tmp925 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 2515 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp925 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp926 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp926 2514 2514 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp927 ___484_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp927 	%argrw{"wrr"}
	add		___482_maxamp ___482_maxamp ___482_amp 	%argrw{"wrr"}
	mul		___482_amp ___482_amp roughness 	%argrw{"wrr"}
	mul		___482_fscale ___482_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp928 ___483_i 	%argrw{"wr"}
	add		___483_i ___483_i $const16 	%argrw{"wrr"}
	floor		$tmp929 detail 	%argrw{"wr"}
	sub		___482_rmd detail $tmp929 	%argrw{"wrr"}
	neq		$tmp930 ___482_rmd $const1 	%argrw{"wrr"}
	if		$tmp930 2547 2553 	%argrw{"r"}
	mul		$tmp931 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const9 2534 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 $tmp931 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp932 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp932 2533 2533 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp933 ___485_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp933 	%argrw{"wrr"}
	if		use_normalize 2545 2546 	%argrw{"r"}
	mul		$tmp934 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp935 $tmp934 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp936 $tmp935 $const19 	%argrw{"wrr"}
	mul		$tmp937 $const19 ___485_sum2 	%argrw{"wrr"}
	add		$tmp938 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp939 $tmp937 $tmp938 	%argrw{"wrr"}
	add		$tmp940 $tmp939 $const19 	%argrw{"wrr"}
	mix		$tmp893 $tmp936 $tmp940 ___482_rmd 	%argrw{"wrrr"}
	mix		$tmp893 ___482_sum ___485_sum2 ___482_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 2551 2552 	%argrw{"r"}
	mul		$tmp941 $const19 ___482_sum 	%argrw{"wrr"}
	div		$tmp942 $tmp941 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp893 $tmp942 $const19 	%argrw{"wrr"}
	assign		$tmp893 ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp943 type $const20 	%argrw{"wrr"}
	if		$tmp943 2617 2717 	%argrw{"r"}
	functioncall	$const21 2616 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	assign		___536_p $tmp904 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{241} %argrw{"wr"}
	assign		___536_pwr $const14 	%argrw{"wr"}
	assign		___536_value $const1 	%argrw{"wr"}
	assign		___536_weight $const14 	%argrw{"wr"}
	for		$tmp949 2563 2571 2589 2591 	%argrw{"r"}
	assign		___537_i $const15 	%argrw{"wr"}
	gt		$tmp944 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp945 $tmp944 $const15 	%argrw{"wrr"}
	if		$tmp945 2570 2570 	%argrw{"r"}
	assign		$tmp946 detail 	%argrw{"wr"}
	le		$tmp947 ___537_i $tmp946 	%argrw{"wrr"}
	neq		$tmp948 $tmp947 $const15 	%argrw{"wrr"}
	assign		$tmp945 $tmp948 	%argrw{"wr"}
	neq		$tmp949 $tmp945 $const15 	%argrw{"wrr"}
	gt		$tmp950 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp950 2574 2574 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2581 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp952 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp952 2580 2580 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp951 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp951 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp953 $tmp951 Offset 	%line{241} %argrw{"wrr"}
	mul		___538_signal $tmp953 ___536_pwr 	%argrw{"wrr"}
	mul		___536_pwr ___536_pwr roughness 	%argrw{"wrr"}
	mul		$tmp954 ___536_weight ___538_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp954 	%argrw{"wrr"}
	mul		$tmp955 Gain ___538_signal 	%argrw{"wrr"}
	mul		___536_weight ___536_weight $tmp955 	%argrw{"wrr"}
	mul		___536_p ___536_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp956 ___537_i 	%argrw{"wr"}
	add		___537_i ___537_i $const16 	%argrw{"wrr"}
	floor		$tmp957 detail 	%argrw{"wr"}
	sub		___536_rmd detail $tmp957 	%argrw{"wrr"}
	neq		$tmp958 ___536_rmd $const1 	%argrw{"wrr"}
	neq		$tmp959 $tmp958 $const15 	%argrw{"wrr"}
	if		$tmp959 2599 2599 	%argrw{"r"}
	gt		$tmp960 ___536_weight $const22 	%argrw{"wrr"}
	neq		$tmp961 $tmp960 $const15 	%argrw{"wrr"}
	assign		$tmp959 $tmp961 	%argrw{"wr"}
	if		$tmp959 2615 2615 	%argrw{"r"}
	gt		$tmp962 ___536_weight $const14 	%argrw{"wrr"}
	if		$tmp962 2603 2603 	%argrw{"r"}
	assign		___536_weight $const14 	%argrw{"wr"}
	functioncall	$const9 2610 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___536_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp964 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp964 2609 2609 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp963 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp963 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:241
# NOISE_HYBRID_MULTI_FRACTAL(vector3)
	add		$tmp965 $tmp963 Offset 	%line{241} %argrw{"wrr"}
	mul		___540_signal $tmp965 ___536_pwr 	%argrw{"wrr"}
	mul		$tmp966 ___536_rmd ___536_weight 	%argrw{"wrr"}
	mul		$tmp967 $tmp966 ___540_signal 	%argrw{"wrr"}
	add		___536_value ___536_value $tmp967 	%argrw{"wrr"}
	assign		$tmp893 ___536_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp968 type $const23 	%argrw{"wrr"}
	if		$tmp968 2662 2717 	%argrw{"r"}
	functioncall	$const24 2661 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	assign		___554_p $tmp904 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"wr"}
	assign		___554_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2629 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp971 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp971 2628 2628 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp970 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp970 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp969 $tmp970 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp969 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	assign		___554_value ___554_signal 	%argrw{"wr"}
	assign		___554_weight $const14 	%argrw{"wr"}
	for		$tmp974 2636 2639 2658 2660 	%argrw{"r"}
	assign		___555_i $const16 	%argrw{"wr"}
	assign		$tmp972 detail 	%argrw{"wr"}
	le		$tmp973 ___555_i $tmp972 	%argrw{"wrr"}
	neq		$tmp974 $tmp973 $const15 	%argrw{"wrr"}
	mul		___554_p ___554_p Lacunarity 	%argrw{"wrr"}
	mul		$tmp975 ___554_signal Gain 	%argrw{"wrr"}
	functioncall	$const3 2644 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp976 $tmp975 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___554_weight $tmp976 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	functioncall	$const9 2651 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{248} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___554_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp979 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp979 2650 2650 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp978 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp978 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:248
# NOISE_RIDGED_MULTI_FRACTAL(vector3)
	fabs		$tmp977 $tmp978 	%line{248} %argrw{"wr"}
	sub		___554_signal Offset $tmp977 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_signal 	%argrw{"wrr"}
	mul		___554_signal ___554_signal ___554_weight 	%argrw{"wrr"}
	mul		$tmp980 ___554_signal ___554_pwr 	%argrw{"wrr"}
	add		___554_value ___554_value $tmp980 	%argrw{"wrr"}
	mul		___554_pwr ___554_pwr roughness 	%argrw{"wrr"}
	assign		$tmp981 ___555_i 	%argrw{"wr"}
	add		___555_i ___555_i $const16 	%argrw{"wrr"}
	assign		$tmp893 ___554_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	eq		$tmp982 type $const25 	%argrw{"wrr"}
	if		$tmp982 2714 2717 	%argrw{"r"}
	functioncall	$const26 2713 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	assign		___516_p $tmp904 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{234} %argrw{"wr"}
	assign		___516_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 2674 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp984 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp984 2673 2673 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp983 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp983 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		___516_value Offset $tmp983 	%line{234} %argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	for		$tmp987 2678 2681 2694 2696 	%argrw{"r"}
	assign		___517_i $const16 	%argrw{"wr"}
	assign		$tmp985 detail 	%argrw{"wr"}
	le		$tmp986 ___517_i $tmp985 	%argrw{"wrr"}
	neq		$tmp987 $tmp986 $const15 	%argrw{"wrr"}
	functioncall	$const9 2688 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp989 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp989 2687 2687 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp988 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp988 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp990 $tmp988 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp991 $tmp990 ___516_pwr 	%argrw{"wrr"}
	mul		___518_increment $tmp991 ___516_value 	%argrw{"wrr"}
	add		___516_value ___516_value ___518_increment 	%argrw{"wrr"}
	mul		___516_pwr ___516_pwr roughness 	%argrw{"wrr"}
	mul		___516_p ___516_p Lacunarity 	%argrw{"wrr"}
	assign		$tmp992 ___517_i 	%argrw{"wr"}
	add		___517_i ___517_i $const16 	%argrw{"wrr"}
	floor		$tmp993 detail 	%argrw{"wr"}
	sub		___516_rmd detail $tmp993 	%argrw{"wrr"}
	neq		$tmp994 ___516_rmd $const1 	%argrw{"wrr"}
	if		$tmp994 2712 2712 	%argrw{"r"}
	functioncall	$const9 2707 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const10 ___516_p 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp996 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp996 2706 2706 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		$tmp995 $const1 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		$tmp995 ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:234
# NOISE_HETERO_TERRAIN(vector3)
	add		$tmp997 $tmp995 Offset 	%line{234} %argrw{"wrr"}
	mul		$tmp998 $tmp997 ___516_pwr 	%argrw{"wrr"}
	mul		___519_increment $tmp998 ___516_value 	%argrw{"wrr"}
	mul		$tmp999 ___516_rmd ___519_increment 	%argrw{"wrr"}
	add		___516_value ___516_value $tmp999 	%argrw{"wrr"}
	assign		$tmp893 ___516_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:81
# NOISE_SELECT(vector3)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{81}
	error		$const27 	%argrw{"r"}
	assign		$tmp893 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:178
#   Color = color(value,
	color		Color ___613_value $tmp786 $tmp893 	%line{178} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:195
#   return value;
	assign		Fac ___613_value 	%line{195} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:285
#   else if (dimensions == "4D") {
	eq		$tmp1000 dimensions $const37 	%line{285} %argrw{"wrr"}
	if		$tmp1000 3948 3949 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:286
#     Fac = noise_texture(vector4(p[0], p[1], p[2], w),
	compref		$tmp1001.x p $const15 	%line{286} %argrw{"wrr"}
	compref		$tmp1001.y p $const16 	%argrw{"wrr"}
	compref		$tmp1001.z p $const38 	%argrw{"wrr"}
	assign		$tmp1001.w w 	%argrw{"wr"}
	functioncall	$const5 3948 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:209
#   vector4 p = co;
	assign		___615_p.x $tmp1001.x 	%line{209} %argrw{"wr"}
	assign		___615_p.y $tmp1001.y 	%argrw{"wr"}
	assign		___615_p.z $tmp1001.z 	%argrw{"wr"}
	assign		___615_p.w $tmp1001.w 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:210
#   if (distortion != 0.0) {
	neq		$tmp1002 Distortion $const1 	%line{210} %argrw{"wrr"}
	if		$tmp1002 2845 2845 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:211
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const39 2745 	%line{211} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1007 $const8 $const1 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1008 $tmp1007 $const7 	%argrw{"wrr"}
	add		$tmp1006.x $const7 $tmp1008 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1009 $const8 $const1 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1010 $tmp1009 $const7 	%argrw{"wrr"}
	add		$tmp1006.y $const7 $tmp1010 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1011 $const8 $const1 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1012 $tmp1011 $const7 	%argrw{"wrr"}
	add		$tmp1006.z $const7 $tmp1012 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1013 $const8 $const1 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1014 $tmp1013 $const7 	%argrw{"wrr"}
	add		$tmp1006.w $const7 $tmp1014 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 2750 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1005.x ___615_p.x $tmp1006.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1005.y ___615_p.y $tmp1006.y 	%argrw{"wrr"}
	add		$tmp1005.z ___615_p.z $tmp1006.z 	%argrw{"wrr"}
	add		$tmp1005.w ___615_p.w $tmp1006.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:211
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	functioncall	$const9 2758 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{211} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1015 $tmp1005.x $tmp1005.y $tmp1005.z 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1015 $tmp1005.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1016 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1016 2757 2757 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1004 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1004 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:211
#     p += vector4(safe_snoise(p + random_vector4_offset(0.0)) * distortion,
	mul		$tmp1003.x $tmp1004 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{211} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:212
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const39 2772 	%line{212} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1020 $const8 $const14 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1021 $tmp1020 $const7 	%argrw{"wrr"}
	add		$tmp1019.x $const7 $tmp1021 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1022 $const8 $const14 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1023 $tmp1022 $const7 	%argrw{"wrr"}
	add		$tmp1019.y $const7 $tmp1023 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1024 $const8 $const14 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1025 $tmp1024 $const7 	%argrw{"wrr"}
	add		$tmp1019.z $const7 $tmp1025 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1026 $const8 $const14 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1027 $tmp1026 $const7 	%argrw{"wrr"}
	add		$tmp1019.w $const7 $tmp1027 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 2777 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1018.x ___615_p.x $tmp1019.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1018.y ___615_p.y $tmp1019.y 	%argrw{"wrr"}
	add		$tmp1018.z ___615_p.z $tmp1019.z 	%argrw{"wrr"}
	add		$tmp1018.w ___615_p.w $tmp1019.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:212
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	functioncall	$const9 2785 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{212} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1028 $tmp1018.x $tmp1018.y $tmp1018.z 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1028 $tmp1018.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1029 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1029 2784 2784 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1017 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1017 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:212
#                  safe_snoise(p + random_vector4_offset(1.0)) * distortion,
	mul		$tmp1003.y $tmp1017 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{212} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:213
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const39 2799 	%line{213} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1033 $const8 $const28 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1034 $tmp1033 $const7 	%argrw{"wrr"}
	add		$tmp1032.x $const7 $tmp1034 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1035 $const8 $const28 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1036 $tmp1035 $const7 	%argrw{"wrr"}
	add		$tmp1032.y $const7 $tmp1036 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1037 $const8 $const28 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1038 $tmp1037 $const7 	%argrw{"wrr"}
	add		$tmp1032.z $const7 $tmp1038 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1039 $const8 $const28 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1040 $tmp1039 $const7 	%argrw{"wrr"}
	add		$tmp1032.w $const7 $tmp1040 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 2804 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1031.x ___615_p.x $tmp1032.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1031.y ___615_p.y $tmp1032.y 	%argrw{"wrr"}
	add		$tmp1031.z ___615_p.z $tmp1032.z 	%argrw{"wrr"}
	add		$tmp1031.w ___615_p.w $tmp1032.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:213
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	functioncall	$const9 2812 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{213} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1041 $tmp1031.x $tmp1031.y $tmp1031.z 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1041 $tmp1031.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1042 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1042 2811 2811 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1030 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1030 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:213
#                  safe_snoise(p + random_vector4_offset(2.0)) * distortion,
	mul		$tmp1003.z $tmp1030 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{213} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:214
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const39 2826 	%line{214} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1046 $const8 $const33 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1047 $tmp1046 $const7 	%argrw{"wrr"}
	add		$tmp1045.x $const7 $tmp1047 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1048 $const8 $const33 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1049 $tmp1048 $const7 	%argrw{"wrr"}
	add		$tmp1045.y $const7 $tmp1049 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1050 $const8 $const33 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1051 $tmp1050 $const7 	%argrw{"wrr"}
	add		$tmp1045.z $const7 $tmp1051 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1052 $const8 $const33 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1053 $tmp1052 $const7 	%argrw{"wrr"}
	add		$tmp1045.w $const7 $tmp1053 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 2831 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1044.x ___615_p.x $tmp1045.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1044.y ___615_p.y $tmp1045.y 	%argrw{"wrr"}
	add		$tmp1044.z ___615_p.z $tmp1045.z 	%argrw{"wrr"}
	add		$tmp1044.w ___615_p.w $tmp1045.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:214
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	functioncall	$const9 2839 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{214} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1054 $tmp1044.x $tmp1044.y $tmp1044.z 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1054 $tmp1044.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1055 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1055 2838 2838 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1043 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1043 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:214
#                  safe_snoise(p + random_vector4_offset(3.0)) * distortion);
	mul		$tmp1003.w $tmp1043 Distortion 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{214} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 2845 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		___615_p.x ___615_p.x $tmp1003.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		___615_p.y ___615_p.y $tmp1003.y 	%argrw{"wrr"}
	add		___615_p.z ___615_p.z $tmp1003.z 	%argrw{"wrr"}
	add		___615_p.w ___615_p.w $tmp1003.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:217
#   float value = noise_select(p, detail, roughness, lacunarity, offset, gain, type, use_normalize);
	functioncall	$const11 3200 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{217} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	eq		$tmp1056 type $const12 	%line{82} %argrw{"wrr"}
	if		$tmp1056 2902 3200 	%argrw{"r"}
	functioncall	$const13 2901 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		___504_p.x ___615_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	assign		___504_p.y ___615_p.y 	%argrw{"wr"}
	assign		___504_p.z ___615_p.z 	%argrw{"wr"}
	assign		___504_p.w ___615_p.w 	%argrw{"wr"}
	assign		___504_value $const14 	%argrw{"wr"}
	assign		___504_pwr $const14 	%argrw{"wr"}
	for		$tmp1059 2857 2860 2882 2884 	%argrw{"r"}
	assign		___505_i $const15 	%argrw{"wr"}
	assign		$tmp1057 detail 	%argrw{"wr"}
	le		$tmp1058 ___505_i $tmp1057 	%argrw{"wrr"}
	neq		$tmp1059 $tmp1058 $const15 	%argrw{"wrr"}
	functioncall	$const9 2868 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1061 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1061 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1062 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1062 2867 2867 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1060 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1060 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1063 ___504_pwr $tmp1060 	%line{228} %argrw{"wrr"}
	add		$tmp1064 $tmp1063 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1064 	%argrw{"wrr"}
	mul		___504_pwr ___504_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2882 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1065.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1065.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1065.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1065.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2882 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___504_p.x ___504_p.x $tmp1065.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___504_p.y ___504_p.y $tmp1065.y 	%argrw{"wrr"}
	mul		___504_p.z ___504_p.z $tmp1065.z 	%argrw{"wrr"}
	mul		___504_p.w ___504_p.w $tmp1065.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		$tmp1066 ___505_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	add		___505_i ___505_i $const16 	%argrw{"wrr"}
	floor		$tmp1067 detail 	%argrw{"wr"}
	sub		___504_rmd detail $tmp1067 	%argrw{"wrr"}
	neq		$tmp1068 ___504_rmd $const1 	%argrw{"wrr"}
	if		$tmp1068 2900 2900 	%argrw{"r"}
	mul		$tmp1069 ___504_rmd ___504_pwr 	%argrw{"wrr"}
	functioncall	$const9 2897 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1071 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1071 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1072 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1072 2896 2896 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1070 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1070 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1073 $tmp1069 $tmp1070 	%line{228} %argrw{"wrr"}
	add		$tmp1074 $tmp1073 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1074 	%argrw{"wrr"}
	assign		___615_value ___504_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1075 type $const17 	%argrw{"wrr"}
	if		$tmp1075 2985 3200 	%argrw{"r"}
	functioncall	$const18 2984 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	assign		___487_p.x ___615_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"wr"}
	assign		___487_p.y ___615_p.y 	%argrw{"wr"}
	assign		___487_p.z ___615_p.z 	%argrw{"wr"}
	assign		___487_p.w ___615_p.w 	%argrw{"wr"}
	assign		___487_fscale $const14 	%argrw{"wr"}
	assign		___487_amp $const14 	%argrw{"wr"}
	assign		___487_maxamp $const1 	%argrw{"wr"}
	assign		___487_sum $const1 	%argrw{"wr"}
	for		$tmp1078 2915 2918 2941 2943 	%argrw{"r"}
	assign		___488_i $const15 	%argrw{"wr"}
	assign		$tmp1076 detail 	%argrw{"wr"}
	le		$tmp1077 ___488_i $tmp1076 	%argrw{"wrr"}
	neq		$tmp1078 $tmp1077 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2928 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1080.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1080.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1080.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1080.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2928 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1079.x $tmp1080.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1079.y $tmp1080.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1079.z $tmp1080.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1079.w $tmp1080.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 2936 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1081 $tmp1079.x $tmp1079.y $tmp1079.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1081 $tmp1079.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1082 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1082 2935 2935 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1083 ___489_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp1083 	%argrw{"wrr"}
	add		___487_maxamp ___487_maxamp ___487_amp 	%argrw{"wrr"}
	mul		___487_amp ___487_amp roughness 	%argrw{"wrr"}
	mul		___487_fscale ___487_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp1084 ___488_i 	%argrw{"wr"}
	add		___488_i ___488_i $const16 	%argrw{"wrr"}
	floor		$tmp1085 detail 	%argrw{"wr"}
	sub		___487_rmd detail $tmp1085 	%argrw{"wrr"}
	neq		$tmp1086 ___487_rmd $const1 	%argrw{"wrr"}
	if		$tmp1086 2978 2984 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2957 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1088.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1088.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1088.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1088.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 2957 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1087.x $tmp1088.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1087.y $tmp1088.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1087.z $tmp1088.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1087.w $tmp1088.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 2965 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1089 $tmp1087.x $tmp1087.y $tmp1087.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1089 $tmp1087.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1090 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1090 2964 2964 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1091 ___490_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp1091 	%argrw{"wrr"}
	if		use_normalize 2976 2977 	%argrw{"r"}
	mul		$tmp1092 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1093 $tmp1092 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp1094 $tmp1093 $const19 	%argrw{"wrr"}
	mul		$tmp1095 $const19 ___490_sum2 	%argrw{"wrr"}
	add		$tmp1096 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp1097 $tmp1095 $tmp1096 	%argrw{"wrr"}
	add		$tmp1098 $tmp1097 $const19 	%argrw{"wrr"}
	mix		___615_value $tmp1094 $tmp1098 ___487_rmd 	%argrw{"wrrr"}
	mix		___615_value ___487_sum ___490_sum2 ___487_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 2982 2983 	%argrw{"r"}
	mul		$tmp1099 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1100 $tmp1099 ___487_maxamp 	%argrw{"wrr"}
	add		___615_value $tmp1100 $const19 	%argrw{"wrr"}
	assign		___615_value ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1101 type $const20 	%argrw{"wrr"}
	if		$tmp1101 3062 3200 	%argrw{"r"}
	functioncall	$const21 3061 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		___542_p.x ___615_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	assign		___542_p.y ___615_p.y 	%argrw{"wr"}
	assign		___542_p.z ___615_p.z 	%argrw{"wr"}
	assign		___542_p.w ___615_p.w 	%argrw{"wr"}
	assign		___542_pwr $const14 	%argrw{"wr"}
	assign		___542_value $const1 	%argrw{"wr"}
	assign		___542_weight $const14 	%argrw{"wr"}
	for		$tmp1107 2997 3005 3033 3035 	%argrw{"r"}
	assign		___543_i $const15 	%argrw{"wr"}
	gt		$tmp1102 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1103 $tmp1102 $const15 	%argrw{"wrr"}
	if		$tmp1103 3004 3004 	%argrw{"r"}
	assign		$tmp1104 detail 	%argrw{"wr"}
	le		$tmp1105 ___543_i $tmp1104 	%argrw{"wrr"}
	neq		$tmp1106 $tmp1105 $const15 	%argrw{"wrr"}
	assign		$tmp1103 $tmp1106 	%argrw{"wr"}
	neq		$tmp1107 $tmp1103 $const15 	%argrw{"wrr"}
	gt		$tmp1108 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1108 3008 3008 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3016 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1110 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1110 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1111 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1111 3015 3015 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1109 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1109 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1112 $tmp1109 Offset 	%line{242} %argrw{"wrr"}
	mul		___544_signal $tmp1112 ___542_pwr 	%argrw{"wrr"}
	mul		___542_pwr ___542_pwr roughness 	%argrw{"wrr"}
	mul		$tmp1113 ___542_weight ___544_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1113 	%argrw{"wrr"}
	mul		$tmp1114 Gain ___544_signal 	%argrw{"wrr"}
	mul		___542_weight ___542_weight $tmp1114 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3033 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1115.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1115.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1115.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1115.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3033 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___542_p.x ___542_p.x $tmp1115.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___542_p.y ___542_p.y $tmp1115.y 	%argrw{"wrr"}
	mul		___542_p.z ___542_p.z $tmp1115.z 	%argrw{"wrr"}
	mul		___542_p.w ___542_p.w $tmp1115.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		$tmp1116 ___543_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	add		___543_i ___543_i $const16 	%argrw{"wrr"}
	floor		$tmp1117 detail 	%argrw{"wr"}
	sub		___542_rmd detail $tmp1117 	%argrw{"wrr"}
	neq		$tmp1118 ___542_rmd $const1 	%argrw{"wrr"}
	neq		$tmp1119 $tmp1118 $const15 	%argrw{"wrr"}
	if		$tmp1119 3043 3043 	%argrw{"r"}
	gt		$tmp1120 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1121 $tmp1120 $const15 	%argrw{"wrr"}
	assign		$tmp1119 $tmp1121 	%argrw{"wr"}
	if		$tmp1119 3060 3060 	%argrw{"r"}
	gt		$tmp1122 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1122 3047 3047 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3055 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1124 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1124 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1125 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1125 3054 3054 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1123 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1123 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1126 $tmp1123 Offset 	%line{242} %argrw{"wrr"}
	mul		___546_signal $tmp1126 ___542_pwr 	%argrw{"wrr"}
	mul		$tmp1127 ___542_rmd ___542_weight 	%argrw{"wrr"}
	mul		$tmp1128 $tmp1127 ___546_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1128 	%argrw{"wrr"}
	assign		___615_value ___542_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1129 type $const23 	%argrw{"wrr"}
	if		$tmp1129 3121 3200 	%argrw{"r"}
	functioncall	$const24 3120 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	assign		___557_p.x ___615_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wr"}
	assign		___557_p.y ___615_p.y 	%argrw{"wr"}
	assign		___557_p.z ___615_p.z 	%argrw{"wr"}
	assign		___557_p.w ___615_p.w 	%argrw{"wr"}
	assign		___557_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3078 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1132 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1132 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1133 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1133 3077 3077 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1131 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1131 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1130 $tmp1131 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1130 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	assign		___557_value ___557_signal 	%argrw{"wr"}
	assign		___557_weight $const14 	%argrw{"wr"}
	for		$tmp1136 3085 3088 3117 3119 	%argrw{"r"}
	assign		___558_i $const16 	%argrw{"wr"}
	assign		$tmp1134 detail 	%argrw{"wr"}
	le		$tmp1135 ___558_i $tmp1134 	%argrw{"wrr"}
	neq		$tmp1136 $tmp1135 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3098 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1137.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1137.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1137.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1137.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3098 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___557_p.x ___557_p.x $tmp1137.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___557_p.y ___557_p.y $tmp1137.y 	%argrw{"wrr"}
	mul		___557_p.z ___557_p.z $tmp1137.z 	%argrw{"wrr"}
	mul		___557_p.w ___557_p.w $tmp1137.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	mul		$tmp1138 ___557_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wrr"}
	functioncall	$const3 3102 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1139 $tmp1138 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___557_weight $tmp1139 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	functioncall	$const9 3110 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1142 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1142 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1143 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1143 3109 3109 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1141 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1141 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1140 $tmp1141 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1140 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_weight 	%argrw{"wrr"}
	mul		$tmp1144 ___557_signal ___557_pwr 	%argrw{"wrr"}
	add		___557_value ___557_value $tmp1144 	%argrw{"wrr"}
	mul		___557_pwr ___557_pwr roughness 	%argrw{"wrr"}
	assign		$tmp1145 ___558_i 	%argrw{"wr"}
	add		___558_i ___558_i $const16 	%argrw{"wrr"}
	assign		___615_value ___557_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1146 type $const25 	%argrw{"wrr"}
	if		$tmp1146 3197 3200 	%argrw{"r"}
	functioncall	$const26 3196 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		___520_p.x ___615_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	assign		___520_p.y ___615_p.y 	%argrw{"wr"}
	assign		___520_p.z ___615_p.z 	%argrw{"wr"}
	assign		___520_p.w ___615_p.w 	%argrw{"wr"}
	assign		___520_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3137 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1148 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1148 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1149 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1149 3136 3136 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1147 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1147 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		___520_value Offset $tmp1147 	%line{235} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3148 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1150.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1150.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1150.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1150.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3148 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1150.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1150.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1150.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1150.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	for		$tmp1153 3150 3153 3176 3178 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"r"}
	assign		___521_i $const16 	%argrw{"wr"}
	assign		$tmp1151 detail 	%argrw{"wr"}
	le		$tmp1152 ___521_i $tmp1151 	%argrw{"wrr"}
	neq		$tmp1153 $tmp1152 $const15 	%argrw{"wrr"}
	functioncall	$const9 3161 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1155 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1155 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1156 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1156 3160 3160 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1154 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1154 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1157 $tmp1154 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1158 $tmp1157 ___520_pwr 	%argrw{"wrr"}
	mul		___522_increment $tmp1158 ___520_value 	%argrw{"wrr"}
	add		___520_value ___520_value ___522_increment 	%argrw{"wrr"}
	mul		___520_pwr ___520_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3176 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1159.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1159.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1159.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1159.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3176 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1159.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1159.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1159.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1159.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		$tmp1160 ___521_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	add		___521_i ___521_i $const16 	%argrw{"wrr"}
	floor		$tmp1161 detail 	%argrw{"wr"}
	sub		___520_rmd detail $tmp1161 	%argrw{"wrr"}
	neq		$tmp1162 ___520_rmd $const1 	%argrw{"wrr"}
	if		$tmp1162 3195 3195 	%argrw{"r"}
	functioncall	$const9 3190 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1164 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1164 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1165 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1165 3189 3189 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1163 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1163 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1166 $tmp1163 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1167 $tmp1166 ___520_pwr 	%argrw{"wrr"}
	mul		___523_increment $tmp1167 ___520_value 	%argrw{"wrr"}
	mul		$tmp1168 ___520_rmd ___523_increment 	%argrw{"wrr"}
	add		___520_value ___520_value $tmp1168 	%argrw{"wrr"}
	assign		___615_value ___520_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	error		$const27 	%argrw{"r"}
	assign		___615_value $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:219
#                 noise_select(p + random_vector4_offset(4.0),
	functioncall	$const39 3213 	%line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1172 $const8 $const36 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1173 $tmp1172 $const7 	%argrw{"wrr"}
	add		$tmp1171.x $const7 $tmp1173 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1174 $const8 $const36 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1175 $tmp1174 $const7 	%argrw{"wrr"}
	add		$tmp1171.y $const7 $tmp1175 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1176 $const8 $const36 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1177 $tmp1176 $const7 	%argrw{"wrr"}
	add		$tmp1171.z $const7 $tmp1177 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1178 $const8 $const36 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1179 $tmp1178 $const7 	%argrw{"wrr"}
	add		$tmp1171.w $const7 $tmp1179 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 3218 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1170.x ___615_p.x $tmp1171.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1170.y ___615_p.y $tmp1171.y 	%argrw{"wrr"}
	add		$tmp1170.z ___615_p.z $tmp1171.z 	%argrw{"wrr"}
	add		$tmp1170.w ___615_p.w $tmp1171.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:219
#                 noise_select(p + random_vector4_offset(4.0),
	functioncall	$const11 3573 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{219} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	eq		$tmp1180 type $const12 	%line{82} %argrw{"wrr"}
	if		$tmp1180 3275 3573 	%argrw{"r"}
	functioncall	$const13 3274 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		___504_p.x $tmp1170.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	assign		___504_p.y $tmp1170.y 	%argrw{"wr"}
	assign		___504_p.z $tmp1170.z 	%argrw{"wr"}
	assign		___504_p.w $tmp1170.w 	%argrw{"wr"}
	assign		___504_value $const14 	%argrw{"wr"}
	assign		___504_pwr $const14 	%argrw{"wr"}
	for		$tmp1183 3230 3233 3255 3257 	%argrw{"r"}
	assign		___505_i $const15 	%argrw{"wr"}
	assign		$tmp1181 detail 	%argrw{"wr"}
	le		$tmp1182 ___505_i $tmp1181 	%argrw{"wrr"}
	neq		$tmp1183 $tmp1182 $const15 	%argrw{"wrr"}
	functioncall	$const9 3241 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1185 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1185 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1186 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1186 3240 3240 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1184 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1184 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1187 ___504_pwr $tmp1184 	%line{228} %argrw{"wrr"}
	add		$tmp1188 $tmp1187 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1188 	%argrw{"wrr"}
	mul		___504_pwr ___504_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3255 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1189.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1189.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1189.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1189.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3255 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___504_p.x ___504_p.x $tmp1189.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___504_p.y ___504_p.y $tmp1189.y 	%argrw{"wrr"}
	mul		___504_p.z ___504_p.z $tmp1189.z 	%argrw{"wrr"}
	mul		___504_p.w ___504_p.w $tmp1189.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		$tmp1190 ___505_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	add		___505_i ___505_i $const16 	%argrw{"wrr"}
	floor		$tmp1191 detail 	%argrw{"wr"}
	sub		___504_rmd detail $tmp1191 	%argrw{"wrr"}
	neq		$tmp1192 ___504_rmd $const1 	%argrw{"wrr"}
	if		$tmp1192 3273 3273 	%argrw{"r"}
	mul		$tmp1193 ___504_rmd ___504_pwr 	%argrw{"wrr"}
	functioncall	$const9 3270 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1195 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1195 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1196 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1196 3269 3269 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1194 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1194 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1197 $tmp1193 $tmp1194 	%line{228} %argrw{"wrr"}
	add		$tmp1198 $tmp1197 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1198 	%argrw{"wrr"}
	assign		$tmp1169 ___504_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1199 type $const17 	%argrw{"wrr"}
	if		$tmp1199 3358 3573 	%argrw{"r"}
	functioncall	$const18 3357 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	assign		___487_p.x $tmp1170.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"wr"}
	assign		___487_p.y $tmp1170.y 	%argrw{"wr"}
	assign		___487_p.z $tmp1170.z 	%argrw{"wr"}
	assign		___487_p.w $tmp1170.w 	%argrw{"wr"}
	assign		___487_fscale $const14 	%argrw{"wr"}
	assign		___487_amp $const14 	%argrw{"wr"}
	assign		___487_maxamp $const1 	%argrw{"wr"}
	assign		___487_sum $const1 	%argrw{"wr"}
	for		$tmp1202 3288 3291 3314 3316 	%argrw{"r"}
	assign		___488_i $const15 	%argrw{"wr"}
	assign		$tmp1200 detail 	%argrw{"wr"}
	le		$tmp1201 ___488_i $tmp1200 	%argrw{"wrr"}
	neq		$tmp1202 $tmp1201 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3301 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1204.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1204.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1204.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1204.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3301 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1203.x $tmp1204.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1203.y $tmp1204.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1203.z $tmp1204.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1203.w $tmp1204.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 3309 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1205 $tmp1203.x $tmp1203.y $tmp1203.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1205 $tmp1203.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1206 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1206 3308 3308 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1207 ___489_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp1207 	%argrw{"wrr"}
	add		___487_maxamp ___487_maxamp ___487_amp 	%argrw{"wrr"}
	mul		___487_amp ___487_amp roughness 	%argrw{"wrr"}
	mul		___487_fscale ___487_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp1208 ___488_i 	%argrw{"wr"}
	add		___488_i ___488_i $const16 	%argrw{"wrr"}
	floor		$tmp1209 detail 	%argrw{"wr"}
	sub		___487_rmd detail $tmp1209 	%argrw{"wrr"}
	neq		$tmp1210 ___487_rmd $const1 	%argrw{"wrr"}
	if		$tmp1210 3351 3357 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3330 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1212.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1212.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1212.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1212.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3330 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1211.x $tmp1212.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1211.y $tmp1212.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1211.z $tmp1212.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1211.w $tmp1212.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 3338 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1213 $tmp1211.x $tmp1211.y $tmp1211.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1213 $tmp1211.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1214 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1214 3337 3337 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1215 ___490_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp1215 	%argrw{"wrr"}
	if		use_normalize 3349 3350 	%argrw{"r"}
	mul		$tmp1216 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1217 $tmp1216 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp1218 $tmp1217 $const19 	%argrw{"wrr"}
	mul		$tmp1219 $const19 ___490_sum2 	%argrw{"wrr"}
	add		$tmp1220 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp1221 $tmp1219 $tmp1220 	%argrw{"wrr"}
	add		$tmp1222 $tmp1221 $const19 	%argrw{"wrr"}
	mix		$tmp1169 $tmp1218 $tmp1222 ___487_rmd 	%argrw{"wrrr"}
	mix		$tmp1169 ___487_sum ___490_sum2 ___487_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 3355 3356 	%argrw{"r"}
	mul		$tmp1223 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1224 $tmp1223 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp1169 $tmp1224 $const19 	%argrw{"wrr"}
	assign		$tmp1169 ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1225 type $const20 	%argrw{"wrr"}
	if		$tmp1225 3435 3573 	%argrw{"r"}
	functioncall	$const21 3434 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		___542_p.x $tmp1170.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	assign		___542_p.y $tmp1170.y 	%argrw{"wr"}
	assign		___542_p.z $tmp1170.z 	%argrw{"wr"}
	assign		___542_p.w $tmp1170.w 	%argrw{"wr"}
	assign		___542_pwr $const14 	%argrw{"wr"}
	assign		___542_value $const1 	%argrw{"wr"}
	assign		___542_weight $const14 	%argrw{"wr"}
	for		$tmp1231 3370 3378 3406 3408 	%argrw{"r"}
	assign		___543_i $const15 	%argrw{"wr"}
	gt		$tmp1226 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1227 $tmp1226 $const15 	%argrw{"wrr"}
	if		$tmp1227 3377 3377 	%argrw{"r"}
	assign		$tmp1228 detail 	%argrw{"wr"}
	le		$tmp1229 ___543_i $tmp1228 	%argrw{"wrr"}
	neq		$tmp1230 $tmp1229 $const15 	%argrw{"wrr"}
	assign		$tmp1227 $tmp1230 	%argrw{"wr"}
	neq		$tmp1231 $tmp1227 $const15 	%argrw{"wrr"}
	gt		$tmp1232 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1232 3381 3381 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3389 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1234 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1234 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1235 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1235 3388 3388 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1233 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1233 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1236 $tmp1233 Offset 	%line{242} %argrw{"wrr"}
	mul		___544_signal $tmp1236 ___542_pwr 	%argrw{"wrr"}
	mul		___542_pwr ___542_pwr roughness 	%argrw{"wrr"}
	mul		$tmp1237 ___542_weight ___544_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1237 	%argrw{"wrr"}
	mul		$tmp1238 Gain ___544_signal 	%argrw{"wrr"}
	mul		___542_weight ___542_weight $tmp1238 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3406 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1239.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1239.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1239.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1239.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3406 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___542_p.x ___542_p.x $tmp1239.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___542_p.y ___542_p.y $tmp1239.y 	%argrw{"wrr"}
	mul		___542_p.z ___542_p.z $tmp1239.z 	%argrw{"wrr"}
	mul		___542_p.w ___542_p.w $tmp1239.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		$tmp1240 ___543_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	add		___543_i ___543_i $const16 	%argrw{"wrr"}
	floor		$tmp1241 detail 	%argrw{"wr"}
	sub		___542_rmd detail $tmp1241 	%argrw{"wrr"}
	neq		$tmp1242 ___542_rmd $const1 	%argrw{"wrr"}
	neq		$tmp1243 $tmp1242 $const15 	%argrw{"wrr"}
	if		$tmp1243 3416 3416 	%argrw{"r"}
	gt		$tmp1244 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1245 $tmp1244 $const15 	%argrw{"wrr"}
	assign		$tmp1243 $tmp1245 	%argrw{"wr"}
	if		$tmp1243 3433 3433 	%argrw{"r"}
	gt		$tmp1246 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1246 3420 3420 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3428 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1248 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1248 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1249 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1249 3427 3427 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1247 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1247 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1250 $tmp1247 Offset 	%line{242} %argrw{"wrr"}
	mul		___546_signal $tmp1250 ___542_pwr 	%argrw{"wrr"}
	mul		$tmp1251 ___542_rmd ___542_weight 	%argrw{"wrr"}
	mul		$tmp1252 $tmp1251 ___546_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1252 	%argrw{"wrr"}
	assign		$tmp1169 ___542_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1253 type $const23 	%argrw{"wrr"}
	if		$tmp1253 3494 3573 	%argrw{"r"}
	functioncall	$const24 3493 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	assign		___557_p.x $tmp1170.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wr"}
	assign		___557_p.y $tmp1170.y 	%argrw{"wr"}
	assign		___557_p.z $tmp1170.z 	%argrw{"wr"}
	assign		___557_p.w $tmp1170.w 	%argrw{"wr"}
	assign		___557_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3451 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1256 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1256 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1257 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1257 3450 3450 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1255 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1255 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1254 $tmp1255 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1254 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	assign		___557_value ___557_signal 	%argrw{"wr"}
	assign		___557_weight $const14 	%argrw{"wr"}
	for		$tmp1260 3458 3461 3490 3492 	%argrw{"r"}
	assign		___558_i $const16 	%argrw{"wr"}
	assign		$tmp1258 detail 	%argrw{"wr"}
	le		$tmp1259 ___558_i $tmp1258 	%argrw{"wrr"}
	neq		$tmp1260 $tmp1259 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3471 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1261.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1261.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1261.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1261.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3471 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___557_p.x ___557_p.x $tmp1261.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___557_p.y ___557_p.y $tmp1261.y 	%argrw{"wrr"}
	mul		___557_p.z ___557_p.z $tmp1261.z 	%argrw{"wrr"}
	mul		___557_p.w ___557_p.w $tmp1261.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	mul		$tmp1262 ___557_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wrr"}
	functioncall	$const3 3475 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1263 $tmp1262 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___557_weight $tmp1263 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	functioncall	$const9 3483 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1266 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1266 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1267 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1267 3482 3482 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1265 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1265 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1264 $tmp1265 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1264 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_weight 	%argrw{"wrr"}
	mul		$tmp1268 ___557_signal ___557_pwr 	%argrw{"wrr"}
	add		___557_value ___557_value $tmp1268 	%argrw{"wrr"}
	mul		___557_pwr ___557_pwr roughness 	%argrw{"wrr"}
	assign		$tmp1269 ___558_i 	%argrw{"wr"}
	add		___558_i ___558_i $const16 	%argrw{"wrr"}
	assign		$tmp1169 ___557_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1270 type $const25 	%argrw{"wrr"}
	if		$tmp1270 3570 3573 	%argrw{"r"}
	functioncall	$const26 3569 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		___520_p.x $tmp1170.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	assign		___520_p.y $tmp1170.y 	%argrw{"wr"}
	assign		___520_p.z $tmp1170.z 	%argrw{"wr"}
	assign		___520_p.w $tmp1170.w 	%argrw{"wr"}
	assign		___520_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3510 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1272 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1272 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1273 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1273 3509 3509 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1271 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1271 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		___520_value Offset $tmp1271 	%line{235} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3521 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1274.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1274.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1274.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1274.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3521 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1274.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1274.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1274.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1274.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	for		$tmp1277 3523 3526 3549 3551 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"r"}
	assign		___521_i $const16 	%argrw{"wr"}
	assign		$tmp1275 detail 	%argrw{"wr"}
	le		$tmp1276 ___521_i $tmp1275 	%argrw{"wrr"}
	neq		$tmp1277 $tmp1276 $const15 	%argrw{"wrr"}
	functioncall	$const9 3534 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1279 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1279 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1280 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1280 3533 3533 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1278 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1278 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1281 $tmp1278 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1282 $tmp1281 ___520_pwr 	%argrw{"wrr"}
	mul		___522_increment $tmp1282 ___520_value 	%argrw{"wrr"}
	add		___520_value ___520_value ___522_increment 	%argrw{"wrr"}
	mul		___520_pwr ___520_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3549 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1283.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1283.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1283.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1283.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3549 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1283.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1283.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1283.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1283.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		$tmp1284 ___521_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	add		___521_i ___521_i $const16 	%argrw{"wrr"}
	floor		$tmp1285 detail 	%argrw{"wr"}
	sub		___520_rmd detail $tmp1285 	%argrw{"wrr"}
	neq		$tmp1286 ___520_rmd $const1 	%argrw{"wrr"}
	if		$tmp1286 3568 3568 	%argrw{"r"}
	functioncall	$const9 3563 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1288 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1288 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1289 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1289 3562 3562 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1287 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1287 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1290 $tmp1287 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1291 $tmp1290 ___520_pwr 	%argrw{"wrr"}
	mul		___523_increment $tmp1291 ___520_value 	%argrw{"wrr"}
	mul		$tmp1292 ___520_rmd ___523_increment 	%argrw{"wrr"}
	add		___520_value ___520_value $tmp1292 	%argrw{"wrr"}
	assign		$tmp1169 ___520_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	error		$const27 	%argrw{"r"}
	assign		$tmp1169 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:227
#                 noise_select(p + random_vector4_offset(5.0),
	functioncall	$const39 3586 	%line{227} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:71
#   return vector4(100.0 + noise("hash", seed, 0.0) * 100.0,
	noise		$tmp1296 $const8 $const40 $const1 	%line{71} %argrw{"wrrr"}
	mul		$tmp1297 $tmp1296 $const7 	%argrw{"wrr"}
	add		$tmp1295.x $const7 $tmp1297 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:72
#                  100.0 + noise("hash", seed, 1.0) * 100.0,
	noise		$tmp1298 $const8 $const40 $const14 	%line{72} %argrw{"wrrr"}
	mul		$tmp1299 $tmp1298 $const7 	%argrw{"wrr"}
	add		$tmp1295.y $const7 $tmp1299 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:73
#                  100.0 + noise("hash", seed, 2.0) * 100.0,
	noise		$tmp1300 $const8 $const40 $const28 	%line{73} %argrw{"wrrr"}
	mul		$tmp1301 $tmp1300 $const7 	%argrw{"wrr"}
	add		$tmp1295.z $const7 $tmp1301 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:74
#                  100.0 + noise("hash", seed, 3.0) * 100.0);
	noise		$tmp1302 $const8 $const40 $const33 	%line{74} %argrw{"wrrr"}
	mul		$tmp1303 $tmp1302 $const7 	%argrw{"wrr"}
	add		$tmp1295.w $const7 $tmp1303 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const31 3591 	%line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:31
#     return vector4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
	add		$tmp1294.x ___615_p.x $tmp1295.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{31} %argrw{"wrr"}
	add		$tmp1294.y ___615_p.y $tmp1295.y 	%argrw{"wrr"}
	add		$tmp1294.z ___615_p.z $tmp1295.z 	%argrw{"wrr"}
	add		$tmp1294.w ___615_p.w $tmp1295.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:227
#                 noise_select(p + random_vector4_offset(5.0),
	functioncall	$const11 3946 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{227} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	eq		$tmp1304 type $const12 	%line{82} %argrw{"wrr"}
	if		$tmp1304 3648 3946 	%argrw{"r"}
	functioncall	$const13 3647 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		___504_p.x $tmp1294.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	assign		___504_p.y $tmp1294.y 	%argrw{"wr"}
	assign		___504_p.z $tmp1294.z 	%argrw{"wr"}
	assign		___504_p.w $tmp1294.w 	%argrw{"wr"}
	assign		___504_value $const14 	%argrw{"wr"}
	assign		___504_pwr $const14 	%argrw{"wr"}
	for		$tmp1307 3603 3606 3628 3630 	%argrw{"r"}
	assign		___505_i $const15 	%argrw{"wr"}
	assign		$tmp1305 detail 	%argrw{"wr"}
	le		$tmp1306 ___505_i $tmp1305 	%argrw{"wrr"}
	neq		$tmp1307 $tmp1306 $const15 	%argrw{"wrr"}
	functioncall	$const9 3614 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1309 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1309 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1310 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1310 3613 3613 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1308 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1308 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1311 ___504_pwr $tmp1308 	%line{228} %argrw{"wrr"}
	add		$tmp1312 $tmp1311 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1312 	%argrw{"wrr"}
	mul		___504_pwr ___504_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3628 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1313.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1313.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1313.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1313.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3628 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___504_p.x ___504_p.x $tmp1313.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___504_p.y ___504_p.y $tmp1313.y 	%argrw{"wrr"}
	mul		___504_p.z ___504_p.z $tmp1313.z 	%argrw{"wrr"}
	mul		___504_p.w ___504_p.w $tmp1313.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	assign		$tmp1314 ___505_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{228} %argrw{"wr"}
	add		___505_i ___505_i $const16 	%argrw{"wrr"}
	floor		$tmp1315 detail 	%argrw{"wr"}
	sub		___504_rmd detail $tmp1315 	%argrw{"wrr"}
	neq		$tmp1316 ___504_rmd $const1 	%argrw{"wrr"}
	if		$tmp1316 3646 3646 	%argrw{"r"}
	mul		$tmp1317 ___504_rmd ___504_pwr 	%argrw{"wrr"}
	functioncall	$const9 3643 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1319 ___504_p.x ___504_p.y ___504_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1319 ___504_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1320 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1320 3642 3642 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1318 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1318 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:228
# NOISE_MULTI_FRACTAL(vector4)
	mul		$tmp1321 $tmp1317 $tmp1318 	%line{228} %argrw{"wrr"}
	add		$tmp1322 $tmp1321 $const14 	%argrw{"wrr"}
	mul		___504_value ___504_value $tmp1322 	%argrw{"wrr"}
	assign		$tmp1293 ___504_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1323 type $const17 	%argrw{"wrr"}
	if		$tmp1323 3731 3946 	%argrw{"r"}
	functioncall	$const18 3730 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	assign		___487_p.x $tmp1294.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"wr"}
	assign		___487_p.y $tmp1294.y 	%argrw{"wr"}
	assign		___487_p.z $tmp1294.z 	%argrw{"wr"}
	assign		___487_p.w $tmp1294.w 	%argrw{"wr"}
	assign		___487_fscale $const14 	%argrw{"wr"}
	assign		___487_amp $const14 	%argrw{"wr"}
	assign		___487_maxamp $const1 	%argrw{"wr"}
	assign		___487_sum $const1 	%argrw{"wr"}
	for		$tmp1326 3661 3664 3687 3689 	%argrw{"r"}
	assign		___488_i $const15 	%argrw{"wr"}
	assign		$tmp1324 detail 	%argrw{"wr"}
	le		$tmp1325 ___488_i $tmp1324 	%argrw{"wrr"}
	neq		$tmp1326 $tmp1325 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3674 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1328.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1328.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1328.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1328.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3674 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1327.x $tmp1328.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1327.y $tmp1328.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1327.z $tmp1328.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1327.w $tmp1328.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 3682 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1329 $tmp1327.x $tmp1327.y $tmp1327.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1329 $tmp1327.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1330 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1330 3681 3681 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___489_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___489_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1331 ___489_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___487_sum ___487_sum $tmp1331 	%argrw{"wrr"}
	add		___487_maxamp ___487_maxamp ___487_amp 	%argrw{"wrr"}
	mul		___487_amp ___487_amp roughness 	%argrw{"wrr"}
	mul		___487_fscale ___487_fscale Lacunarity 	%argrw{"wrr"}
	assign		$tmp1332 ___488_i 	%argrw{"wr"}
	add		___488_i ___488_i $const16 	%argrw{"wrr"}
	floor		$tmp1333 detail 	%argrw{"wr"}
	sub		___487_rmd detail $tmp1333 	%argrw{"wrr"}
	neq		$tmp1334 ___487_rmd $const1 	%argrw{"wrr"}
	if		$tmp1334 3724 3730 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3703 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:101
#     return vector4(a, a, a, a) * b;
	assign		$tmp1336.x ___487_fscale 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{101} %argrw{"wr"}
	assign		$tmp1336.y ___487_fscale 	%argrw{"wr"}
	assign		$tmp1336.z ___487_fscale 	%argrw{"wr"}
	assign		$tmp1336.w ___487_fscale 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3703 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		$tmp1335.x $tmp1336.x ___487_p.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		$tmp1335.y $tmp1336.y ___487_p.y 	%argrw{"wrr"}
	mul		$tmp1335.z $tmp1336.z ___487_p.z 	%argrw{"wrr"}
	mul		$tmp1335.w $tmp1336.w ___487_p.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	functioncall	$const9 3711 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{221} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1337 $tmp1335.x $tmp1335.y $tmp1335.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1337 $tmp1335.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1338 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1338 3710 3710 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		___490_t $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		___490_t ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:221
# NOISE_FBM(vector4)
	mul		$tmp1339 ___490_t ___487_amp 	%line{221} %argrw{"wrr"}
	add		___490_sum2 ___487_sum $tmp1339 	%argrw{"wrr"}
	if		use_normalize 3722 3723 	%argrw{"r"}
	mul		$tmp1340 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1341 $tmp1340 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp1342 $tmp1341 $const19 	%argrw{"wrr"}
	mul		$tmp1343 $const19 ___490_sum2 	%argrw{"wrr"}
	add		$tmp1344 ___487_maxamp ___487_amp 	%argrw{"wrr"}
	div		$tmp1345 $tmp1343 $tmp1344 	%argrw{"wrr"}
	add		$tmp1346 $tmp1345 $const19 	%argrw{"wrr"}
	mix		$tmp1293 $tmp1342 $tmp1346 ___487_rmd 	%argrw{"wrrr"}
	mix		$tmp1293 ___487_sum ___490_sum2 ___487_rmd 	%argrw{"wrrr"}
	return
	if		use_normalize 3728 3729 	%argrw{"r"}
	mul		$tmp1347 $const19 ___487_sum 	%argrw{"wrr"}
	div		$tmp1348 $tmp1347 ___487_maxamp 	%argrw{"wrr"}
	add		$tmp1293 $tmp1348 $const19 	%argrw{"wrr"}
	assign		$tmp1293 ___487_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1349 type $const20 	%argrw{"wrr"}
	if		$tmp1349 3808 3946 	%argrw{"r"}
	functioncall	$const21 3807 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		___542_p.x $tmp1294.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	assign		___542_p.y $tmp1294.y 	%argrw{"wr"}
	assign		___542_p.z $tmp1294.z 	%argrw{"wr"}
	assign		___542_p.w $tmp1294.w 	%argrw{"wr"}
	assign		___542_pwr $const14 	%argrw{"wr"}
	assign		___542_value $const1 	%argrw{"wr"}
	assign		___542_weight $const14 	%argrw{"wr"}
	for		$tmp1355 3743 3751 3779 3781 	%argrw{"r"}
	assign		___543_i $const15 	%argrw{"wr"}
	gt		$tmp1350 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1351 $tmp1350 $const15 	%argrw{"wrr"}
	if		$tmp1351 3750 3750 	%argrw{"r"}
	assign		$tmp1352 detail 	%argrw{"wr"}
	le		$tmp1353 ___543_i $tmp1352 	%argrw{"wrr"}
	neq		$tmp1354 $tmp1353 $const15 	%argrw{"wrr"}
	assign		$tmp1351 $tmp1354 	%argrw{"wr"}
	neq		$tmp1355 $tmp1351 $const15 	%argrw{"wrr"}
	gt		$tmp1356 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1356 3754 3754 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3762 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1358 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1358 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1359 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1359 3761 3761 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1357 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1357 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1360 $tmp1357 Offset 	%line{242} %argrw{"wrr"}
	mul		___544_signal $tmp1360 ___542_pwr 	%argrw{"wrr"}
	mul		___542_pwr ___542_pwr roughness 	%argrw{"wrr"}
	mul		$tmp1361 ___542_weight ___544_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1361 	%argrw{"wrr"}
	mul		$tmp1362 Gain ___544_signal 	%argrw{"wrr"}
	mul		___542_weight ___542_weight $tmp1362 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3779 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1363.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1363.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1363.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1363.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3779 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___542_p.x ___542_p.x $tmp1363.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___542_p.y ___542_p.y $tmp1363.y 	%argrw{"wrr"}
	mul		___542_p.z ___542_p.z $tmp1363.z 	%argrw{"wrr"}
	mul		___542_p.w ___542_p.w $tmp1363.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	assign		$tmp1364 ___543_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{242} %argrw{"wr"}
	add		___543_i ___543_i $const16 	%argrw{"wrr"}
	floor		$tmp1365 detail 	%argrw{"wr"}
	sub		___542_rmd detail $tmp1365 	%argrw{"wrr"}
	neq		$tmp1366 ___542_rmd $const1 	%argrw{"wrr"}
	neq		$tmp1367 $tmp1366 $const15 	%argrw{"wrr"}
	if		$tmp1367 3789 3789 	%argrw{"r"}
	gt		$tmp1368 ___542_weight $const22 	%argrw{"wrr"}
	neq		$tmp1369 $tmp1368 $const15 	%argrw{"wrr"}
	assign		$tmp1367 $tmp1369 	%argrw{"wr"}
	if		$tmp1367 3806 3806 	%argrw{"r"}
	gt		$tmp1370 ___542_weight $const14 	%argrw{"wrr"}
	if		$tmp1370 3793 3793 	%argrw{"r"}
	assign		___542_weight $const14 	%argrw{"wr"}
	functioncall	$const9 3801 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1372 ___542_p.x ___542_p.y ___542_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1372 ___542_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1373 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1373 3800 3800 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1371 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1371 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:242
# NOISE_HYBRID_MULTI_FRACTAL(vector4)
	add		$tmp1374 $tmp1371 Offset 	%line{242} %argrw{"wrr"}
	mul		___546_signal $tmp1374 ___542_pwr 	%argrw{"wrr"}
	mul		$tmp1375 ___542_rmd ___542_weight 	%argrw{"wrr"}
	mul		$tmp1376 $tmp1375 ___546_signal 	%argrw{"wrr"}
	add		___542_value ___542_value $tmp1376 	%argrw{"wrr"}
	assign		$tmp1293 ___542_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1377 type $const23 	%argrw{"wrr"}
	if		$tmp1377 3867 3946 	%argrw{"r"}
	functioncall	$const24 3866 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	assign		___557_p.x $tmp1294.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wr"}
	assign		___557_p.y $tmp1294.y 	%argrw{"wr"}
	assign		___557_p.z $tmp1294.z 	%argrw{"wr"}
	assign		___557_p.w $tmp1294.w 	%argrw{"wr"}
	assign		___557_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3824 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1380 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1380 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1381 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1381 3823 3823 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1379 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1379 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1378 $tmp1379 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1378 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	assign		___557_value ___557_signal 	%argrw{"wr"}
	assign		___557_weight $const14 	%argrw{"wr"}
	for		$tmp1384 3831 3834 3863 3865 	%argrw{"r"}
	assign		___558_i $const16 	%argrw{"wr"}
	assign		$tmp1382 detail 	%argrw{"wr"}
	le		$tmp1383 ___558_i $tmp1382 	%argrw{"wrr"}
	neq		$tmp1384 $tmp1383 $const15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3844 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1385.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1385.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1385.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1385.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3844 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___557_p.x ___557_p.x $tmp1385.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___557_p.y ___557_p.y $tmp1385.y 	%argrw{"wrr"}
	mul		___557_p.z ___557_p.z $tmp1385.z 	%argrw{"wrr"}
	mul		___557_p.w ___557_p.w $tmp1385.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	mul		$tmp1386 ___557_signal Gain 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"wrr"}
	functioncall	$const3 3848 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1387 $tmp1386 $const14 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		___557_weight $tmp1387 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	functioncall	$const9 3856 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{249} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1390 ___557_p.x ___557_p.y ___557_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1390 ___557_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1391 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1391 3855 3855 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1389 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1389 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:249
# NOISE_RIDGED_MULTI_FRACTAL(vector4)
	fabs		$tmp1388 $tmp1389 	%line{249} %argrw{"wr"}
	sub		___557_signal Offset $tmp1388 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_signal 	%argrw{"wrr"}
	mul		___557_signal ___557_signal ___557_weight 	%argrw{"wrr"}
	mul		$tmp1392 ___557_signal ___557_pwr 	%argrw{"wrr"}
	add		___557_value ___557_value $tmp1392 	%argrw{"wrr"}
	mul		___557_pwr ___557_pwr roughness 	%argrw{"wrr"}
	assign		$tmp1393 ___558_i 	%argrw{"wr"}
	add		___558_i ___558_i $const16 	%argrw{"wrr"}
	assign		$tmp1293 ___557_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	eq		$tmp1394 type $const25 	%argrw{"wrr"}
	if		$tmp1394 3943 3946 	%argrw{"r"}
	functioncall	$const26 3942 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		___520_p.x $tmp1294.x 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	assign		___520_p.y $tmp1294.y 	%argrw{"wr"}
	assign		___520_p.z $tmp1294.z 	%argrw{"wr"}
	assign		___520_p.w $tmp1294.w 	%argrw{"wr"}
	assign		___520_pwr roughness 	%argrw{"wr"}
	functioncall	$const9 3883 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1396 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1396 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1397 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1397 3882 3882 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1395 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1395 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		___520_value Offset $tmp1395 	%line{235} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3894 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1398.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1398.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1398.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1398.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3894 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1398.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1398.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1398.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1398.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	for		$tmp1401 3896 3899 3922 3924 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"r"}
	assign		___521_i $const16 	%argrw{"wr"}
	assign		$tmp1399 detail 	%argrw{"wr"}
	le		$tmp1400 ___521_i $tmp1399 	%argrw{"wrr"}
	neq		$tmp1401 $tmp1400 $const15 	%argrw{"wrr"}
	functioncall	$const9 3907 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1403 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1403 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1404 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1404 3906 3906 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1402 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1402 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1405 $tmp1402 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1406 $tmp1405 ___520_pwr 	%argrw{"wrr"}
	mul		___522_increment $tmp1406 ___520_value 	%argrw{"wrr"}
	add		___520_value ___520_value ___522_increment 	%argrw{"wrr"}
	mul		___520_pwr ___520_pwr roughness 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3922 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:91
#     return a * vector4(b, b, b, b);
	assign		$tmp1407.x Lacunarity 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{91} %argrw{"wr"}
	assign		$tmp1407.y Lacunarity 	%argrw{"wr"}
	assign		$tmp1407.z Lacunarity 	%argrw{"wr"}
	assign		$tmp1407.w Lacunarity 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:301
# 
	functioncall	$const32 3922 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{301} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h:81
#     return vector4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
	mul		___520_p.x ___520_p.x $tmp1407.x 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/vector4.h"} %line{81} %argrw{"wrr"}
	mul		___520_p.y ___520_p.y $tmp1407.y 	%argrw{"wrr"}
	mul		___520_p.z ___520_p.z $tmp1407.z 	%argrw{"wrr"}
	mul		___520_p.w ___520_p.w $tmp1407.w 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	assign		$tmp1408 ___521_i 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{235} %argrw{"wr"}
	add		___521_i ___521_i $const16 	%argrw{"wrr"}
	floor		$tmp1409 detail 	%argrw{"wr"}
	sub		___520_rmd detail $tmp1409 	%argrw{"wrr"}
	neq		$tmp1410 ___520_rmd $const1 	%argrw{"wrr"}
	if		$tmp1410 3941 3941 	%argrw{"r"}
	functioncall	$const9 3936 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:75
#   float f = noise("snoise", vector3(p.x, p.y, p.z), p.w);
	point		$tmp1412 ___520_p.x ___520_p.y ___520_p.z 	%line{75} %argrw{"wrrr"}
	noise		___470_f $const10 $tmp1412 ___520_p.w 	%argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:76
#   if (isinf(f)) {
	isinf		$tmp1413 ___470_f 	%line{76} %argrw{"wr"}
	if		$tmp1413 3935 3935 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:77
#     return 0.0;
	assign		$tmp1411 $const1 	%line{77} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:79
#   return f;
	assign		$tmp1411 ___470_f 	%line{79} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:235
# NOISE_HETERO_TERRAIN(vector4)
	add		$tmp1414 $tmp1411 Offset 	%line{235} %argrw{"wrr"}
	mul		$tmp1415 $tmp1414 ___520_pwr 	%argrw{"wrr"}
	mul		___523_increment $tmp1415 ___520_value 	%argrw{"wrr"}
	mul		$tmp1416 ___520_rmd ___523_increment 	%argrw{"wrr"}
	add		___520_value ___520_value $tmp1416 	%argrw{"wrr"}
	assign		$tmp1293 ___520_value 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:82
# NOISE_SELECT(vector4)
	return	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl"} %line{82}
	error		$const27 	%argrw{"r"}
	assign		$tmp1293 $const1 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:218
#   Color = color(value,
	color		Color ___615_value $tmp1169 $tmp1293 	%line{218} %argrw{"wrrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:235
#   return value;
	assign		Fac ___615_value 	%line{235} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise_texture.osl:298
#     error("Unknown Dimension!");
	error		$const41 	%line{298} %argrw{"r"}
	end
