OpenShadingLanguage 1.00
# Compiled by oslc 1.13.7.0dev
# options: -q -O2 -I/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders -I/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders -o /Users/blender/git/blender-v410/build_arm64_release/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.oso
shader node_glossy_bsdf
param	color	Color	0.800000012 0.800000012 0.800000012		%read{77,80} %write{2147483647,-1}
param	string	distribution	"ggx"		%read{75,79} %write{2147483647,-1}
param	float	Roughness	0.200000003		%read{1,1} %write{2147483647,-1}
param	float	Anisotropy	0		%read{3,3} %write{2147483647,-1}
param	float	Rotation	0		%read{11,13} %write{2147483647,-1}
param	normal	Normal	0 0 0		%read{15,79} %write{0,0} %initexpr
param	normal	Tangent	0 0 0		%read{5,5} %write{2147483647,-1}
oparam	closure color	BSDF			%read{2147483647,-1} %write{78,80}
global	normal	N	%read{0,0} %write{2147483647,-1}
local	vector	___257_axis	%read{19,21} %write{16,16}
local	float	___257_cosang	%read{18,59} %write{17,17}
local	float	___257_sinang	%read{29,54} %write{17,17}
local	float	___257_cosang1	%read{28,53} %write{18,18}
local	float	___257_x	%read{22,54} %write{19,19}
local	float	___257_y	%read{27,52} %write{20,20}
local	float	___257_z	%read{29,57} %write{21,21}
local	matrix	___257_M	%read{63,63} %write{61,61}
local	float	roughness	%read{9,74} %write{1,1}
local	float	roughness_u	%read{77,79} %write{9,72}
local	float	roughness_v	%read{77,79} %write{10,74}
local	float	aniso	%read{6,73} %write{4,4}
local	vector	T	%read{62,79} %write{5,64}
const	float	$const1	-0.99000001		%read{4,4} %write{2147483647,-1}
const	float	$const2	0.99000001		%read{3,3} %write{2147483647,-1}
const	string	$const3	"clamp"		%read{2,2} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
temp	float	$tmp2	%read{7,7} %write{6,6}
const	float	$const4	9.99999975e-05		%read{7,7} %write{2147483647,-1}
temp	int	$tmp3	%read{8,8} %write{7,7}
const	float	$const5	0		%read{11,79} %write{2147483647,-1}
temp	int	$tmp4	%read{12,12} %write{11,11}
const	float	$const6	6.28318548		%read{13,13} %write{2147483647,-1}
temp	float	$tmp5	%read{17,17} %write{13,13}
const	point	$const7	0 0 0		%read{15,64} %write{2147483647,-1}
const	string	$const8	"rotate"		%read{14,14} %write{2147483647,-1}
temp	vector	$tmp7	%read{16,16} %write{15,15}
const	float	$const9	1		%read{18,73} %write{2147483647,-1}
const	int	$const10	0		%read{19,79} %write{2147483647,-1}
const	int	$const11	1		%read{20,20} %write{2147483647,-1}
const	int	$const12	2		%read{21,21} %write{2147483647,-1}
temp	float	$tmp8	%read{26,26} %write{22,22}
temp	float	$tmp9	%read{24,24} %write{23,23}
temp	float	$tmp10	%read{25,25} %write{24,24}
temp	float	$tmp11	%read{26,26} %write{25,25}
temp	float	$tmp12	%read{61,61} %write{26,26}
temp	float	$tmp13	%read{28,28} %write{27,27}
temp	float	$tmp14	%read{30,30} %write{28,28}
temp	float	$tmp15	%read{30,30} %write{29,29}
temp	float	$tmp16	%read{61,61} %write{30,30}
temp	float	$tmp17	%read{32,32} %write{31,31}
temp	float	$tmp18	%read{34,34} %write{32,32}
temp	float	$tmp19	%read{34,34} %write{33,33}
temp	float	$tmp20	%read{61,61} %write{34,34}
temp	float	$tmp21	%read{36,36} %write{35,35}
temp	float	$tmp22	%read{38,38} %write{36,36}
temp	float	$tmp23	%read{38,38} %write{37,37}
temp	float	$tmp24	%read{61,61} %write{38,38}
temp	float	$tmp25	%read{43,43} %write{39,39}
temp	float	$tmp26	%read{41,41} %write{40,40}
temp	float	$tmp27	%read{42,42} %write{41,41}
temp	float	$tmp28	%read{43,43} %write{42,42}
temp	float	$tmp29	%read{61,61} %write{43,43}
temp	float	$tmp30	%read{45,45} %write{44,44}
temp	float	$tmp31	%read{47,47} %write{45,45}
temp	float	$tmp32	%read{47,47} %write{46,46}
temp	float	$tmp33	%read{61,61} %write{47,47}
temp	float	$tmp34	%read{49,49} %write{48,48}
temp	float	$tmp35	%read{51,51} %write{49,49}
temp	float	$tmp36	%read{51,51} %write{50,50}
temp	float	$tmp37	%read{61,61} %write{51,51}
temp	float	$tmp38	%read{53,53} %write{52,52}
temp	float	$tmp39	%read{55,55} %write{53,53}
temp	float	$tmp40	%read{55,55} %write{54,54}
temp	float	$tmp41	%read{61,61} %write{55,55}
temp	float	$tmp42	%read{60,60} %write{56,56}
temp	float	$tmp43	%read{58,58} %write{57,57}
temp	float	$tmp44	%read{59,59} %write{58,58}
temp	float	$tmp45	%read{60,60} %write{59,59}
temp	float	$tmp46	%read{61,61} %write{60,60}
temp	vector	$tmp47	%read{64,64} %write{63,63}
temp	vector	$tmp48	%read{63,63} %write{62,62}
temp	int	$tmp49	%read{66,66} %write{65,65}
temp	float	$tmp50	%read{68,68} %write{67,67}
temp	float	$tmp51	%read{70,70} %write{69,69}
temp	float	$tmp52	%read{72,72} %write{71,71}
temp	float	$tmp53	%read{74,74} %write{73,73}
const	string	$const13	"Multiscatter GGX"		%read{75,75} %write{2147483647,-1}
temp	int	$tmp54	%read{76,76} %write{75,75}
temp	closure color	$tmp55	%read{78,78} %write{77,77}
const	string	$const14	"microfacet_multi_ggx_aniso"		%read{77,77} %write{2147483647,-1}
temp	closure color	$tmp56	%read{80,80} %write{79,79}
const	string	$const15	"microfacet"		%read{79,79} %write{2147483647,-1}
code Normal
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:13
#                         normal Normal = N,
	assign		Normal N 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl"} %line{13} %argrw{"wr"}
code ___main___
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:18
#   float roughness = Roughness * Roughness;
	mul		roughness Roughness Roughness 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl"} %line{18} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:20
#   float aniso = clamp(Anisotropy, -0.99, 0.99);
	functioncall	$const3 5 	%line{20} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:141
# float  clamp (float x, float minval, float maxval) { return max(min(x,maxval),minval); }
	min		$tmp1 Anisotropy $const2 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{141} %argrw{"wrr"}
	max		aniso $tmp1 $const1 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:23
#   vector T = Tangent;
	assign		T Tangent 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl"} %line{23} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:25
#   if (abs(aniso) <= 1e-4) {
	abs		$tmp2 aniso 	%line{25} %argrw{"wr"}
	le		$tmp3 $tmp2 $const4 	%argrw{"wrr"}
	if		$tmp3 11 75 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:26
#     roughness_u = roughness;
	assign		roughness_u roughness 	%line{26} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:27
#     roughness_v = roughness;
	assign		roughness_v roughness 	%line{27} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:30
#     if (Rotation != 0.0)
	neq		$tmp4 Rotation $const5 	%line{30} %argrw{"wrr"}
	if		$tmp4 65 65 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:31
#       T = rotate(T, Rotation * M_2PI, point(0.0, 0.0, 0.0), Normal);
	mul		$tmp5 Rotation $const6 	%line{31} %argrw{"wrr"}
	functioncall	$const8 65 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:270
#     vector axis = normalize (b - a);
	sub		$tmp7 Normal $const7 	%filename{"/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h"} %line{270} %argrw{"wrr"}
	normalize	___257_axis $tmp7 	%argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:272
#     sincos (angle, sinang, cosang);
	sincos		$tmp5 ___257_sinang ___257_cosang 	%line{272} %argrw{"rww"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:273
#     float cosang1 = 1.0 - cosang;
	sub		___257_cosang1 $const9 ___257_cosang 	%line{273} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:274
#     float x = axis[0], y = axis[1], z = axis[2];
	compref		___257_x ___257_axis $const10 	%line{274} %argrw{"wrr"}
	compref		___257_y ___257_axis $const11 	%argrw{"wrr"}
	compref		___257_z ___257_axis $const12 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	mul		$tmp8 ___257_x ___257_x 	%line{275} %argrw{"wrr"}
	mul		$tmp9 ___257_x ___257_x 	%argrw{"wrr"}
	sub		$tmp10 $const9 $tmp9 	%argrw{"wrr"}
	mul		$tmp11 $tmp10 ___257_cosang 	%argrw{"wrr"}
	add		$tmp12 $tmp8 $tmp11 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:276
#                        x * y * cosang1 + z * sinang,
	mul		$tmp13 ___257_x ___257_y 	%line{276} %argrw{"wrr"}
	mul		$tmp14 $tmp13 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp15 ___257_z ___257_sinang 	%argrw{"wrr"}
	add		$tmp16 $tmp14 $tmp15 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:277
#                        x * z * cosang1 - y * sinang,
	mul		$tmp17 ___257_x ___257_z 	%line{277} %argrw{"wrr"}
	mul		$tmp18 $tmp17 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp19 ___257_y ___257_sinang 	%argrw{"wrr"}
	sub		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:279
#                        x * y * cosang1 - z * sinang,
	mul		$tmp21 ___257_x ___257_y 	%line{279} %argrw{"wrr"}
	mul		$tmp22 $tmp21 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp23 ___257_z ___257_sinang 	%argrw{"wrr"}
	sub		$tmp24 $tmp22 $tmp23 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:280
#                        y * y + (1.0 - y * y) * cosang,
	mul		$tmp25 ___257_y ___257_y 	%line{280} %argrw{"wrr"}
	mul		$tmp26 ___257_y ___257_y 	%argrw{"wrr"}
	sub		$tmp27 $const9 $tmp26 	%argrw{"wrr"}
	mul		$tmp28 $tmp27 ___257_cosang 	%argrw{"wrr"}
	add		$tmp29 $tmp25 $tmp28 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:281
#                        y * z * cosang1 + x * sinang,
	mul		$tmp30 ___257_y ___257_z 	%line{281} %argrw{"wrr"}
	mul		$tmp31 $tmp30 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp32 ___257_x ___257_sinang 	%argrw{"wrr"}
	add		$tmp33 $tmp31 $tmp32 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:283
#                        x * z * cosang1 + y * sinang,
	mul		$tmp34 ___257_x ___257_z 	%line{283} %argrw{"wrr"}
	mul		$tmp35 $tmp34 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp36 ___257_y ___257_sinang 	%argrw{"wrr"}
	add		$tmp37 $tmp35 $tmp36 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:284
#                        y * z * cosang1 - x * sinang,
	mul		$tmp38 ___257_y ___257_z 	%line{284} %argrw{"wrr"}
	mul		$tmp39 $tmp38 ___257_cosang1 	%argrw{"wrr"}
	mul		$tmp40 ___257_x ___257_sinang 	%argrw{"wrr"}
	sub		$tmp41 $tmp39 $tmp40 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:285
#                        z * z + (1.0 - z * z) * cosang,
	mul		$tmp42 ___257_z ___257_z 	%line{285} %argrw{"wrr"}
	mul		$tmp43 ___257_z ___257_z 	%argrw{"wrr"}
	sub		$tmp44 $const9 $tmp43 	%argrw{"wrr"}
	mul		$tmp45 $tmp44 ___257_cosang 	%argrw{"wrr"}
	add		$tmp46 $tmp42 $tmp45 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:275
#     matrix M = matrix (x * x + (1.0 - x * x) * cosang,
	matrix		___257_M $tmp12 $tmp16 $tmp20 $const5 $tmp24 $tmp29 $tmp33 $const5 $tmp37 $tmp41 $tmp46 $const5 $const5 $const5 $const5 $const9 	%line{275} %argrw{"wrrrrrrrrrrrrrrrr"}
# /Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders/stdosl.h:288
#     return transform (M, p-a) + a;
	sub		$tmp48 T $const7 	%line{288} %argrw{"wrr"}
	transformv	$tmp47 ___257_M $tmp48 	%argrw{"wrr"}
	add		T $tmp47 $const7 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:33
#     if (aniso < 0.0) {
	lt		$tmp49 aniso $const5 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl"} %line{33} %argrw{"wrr"}
	if		$tmp49 71 75 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:34
#       roughness_u = roughness / (1.0 + aniso);
	add		$tmp50 $const9 aniso 	%line{34} %argrw{"wrr"}
	div		roughness_u roughness $tmp50 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:35
#       roughness_v = roughness * (1.0 + aniso);
	add		$tmp51 $const9 aniso 	%line{35} %argrw{"wrr"}
	mul		roughness_v roughness $tmp51 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:38
#       roughness_u = roughness * (1.0 - aniso);
	sub		$tmp52 $const9 aniso 	%line{38} %argrw{"wrr"}
	mul		roughness_u roughness $tmp52 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:39
#       roughness_v = roughness / (1.0 - aniso);
	sub		$tmp53 $const9 aniso 	%line{39} %argrw{"wrr"}
	div		roughness_v roughness $tmp53 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:43
#   if (distribution == "Multiscatter GGX")
	eq		$tmp54 distribution $const13 	%line{43} %argrw{"wrr"}
	if		$tmp54 79 81 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:44
#     BSDF = Color * microfacet_multi_ggx_aniso(Normal, T, roughness_u, roughness_v, Color);
	closure		$tmp55 $const14 Normal T roughness_u roughness_v Color 	%line{44} %argrw{"wrrrrrr"}
	mul		BSDF $tmp55 Color 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_glossy_bsdf.osl:46
#     BSDF = Color * microfacet(distribution, Normal, T, roughness_u, roughness_v, 0.0, 0);
	closure		$tmp56 $const15 distribution Normal T roughness_u roughness_v $const5 $const10 	%line{46} %argrw{"wrrrrrrrr"}
	mul		BSDF $tmp56 Color 	%argrw{"wrr"}
	end
