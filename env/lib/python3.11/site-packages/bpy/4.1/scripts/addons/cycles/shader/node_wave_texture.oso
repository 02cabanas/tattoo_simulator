OpenShadingLanguage 1.00
# Compiled by oslc 1.13.7.0dev
# options: -q -O2 -I/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders -I/Users/blender/git/blender-v410/blender.git/lib/macos_arm64/osl/share/OSL/shaders -o /Users/blender/git/blender-v410/build_arm64_release/intern/cycles/kernel/osl/shaders/node_wave_texture.oso
shader node_wave_texture
param	int	use_mapping	0		%read{2,2} %write{2147483647,-1}
param	matrix	mapping	0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0		%read{3,3} %write{2147483647,-1}
param	string	wave_type	"bands"		%read{9,29} %write{2147483647,-1}
param	string	bands_direction	"x"		%read{11,19} %write{2147483647,-1}
param	string	rings_direction	"x"		%read{32,38} %write{2147483647,-1}
param	string	profile	"sine"		%read{108,115} %write{2147483647,-1}
param	float	Scale	5		%read{4,4} %write{2147483647,-1}
param	float	Distortion	0		%read{44,106} %write{2147483647,-1}
param	float	Detail	2		%read{55,74} %write{2147483647,-1}
param	float	DetailScale	1		%read{46,46} %write{2147483647,-1}
param	float	DetailRoughness	0.5		%read{69,69} %write{2147483647,-1}
param	float	PhaseOffset	0		%read{43,43} %write{2147483647,-1}
param	point	Vector	0 0 0		%read{1,1} %write{0,0} %initexpr
oparam	float	Fac	0		%read{128,128} %write{113,126}
oparam	color	Color	0 0 0		%read{2147483647,-1} %write{128,128}
global	point	P	%read{0,0} %write{2147483647,-1}
local	float	___468_f	%read{55,84} %write{55,79}
local	point	___482_p	%read{55,77} %write{48,48}
local	float	___482_fscale	%read{55,77} %write{49,72}
local	float	___482_amp	%read{55,92} %write{50,72}
local	float	___482_maxamp	%read{55,100} %write{51,72}
local	float	___482_sum	%read{55,102} %write{52,72}
local	int	___483_i	%read{55,72} %write{54,72}
local	float	___484_t	%read{55,72} %write{55,72}
local	float	___482_rmd	%read{75,96} %write{74,74}
local	float	___485_t	%read{85,85} %write{82,84}
local	float	___485_sum2	%read{91,96} %write{86,86}
local	point	___577_p	%read{13,46} %write{7,7}
local	float	___577_n	%read{43,124} %write{8,121}
local	point	___583_rp	%read{34,41} %write{31,40}
local	point	p	%read{3,4} %write{1,3}
temp	point	$tmp1	%read{6,6} %write{4,4}
const	string	$const1	"wave"		%read{5,5} %write{2147483647,-1}
const	float	$const2	9.99999997e-07		%read{6,6} %write{2147483647,-1}
temp	point	$tmp2	%read{7,7} %write{6,6}
const	float	$const3	0.999998987		%read{7,7} %write{2147483647,-1}
const	float	$const4	0		%read{8,82} %write{2147483647,-1}
const	string	$const5	"bands"		%read{9,9} %write{2147483647,-1}
temp	int	$tmp3	%read{10,10} %write{9,9}
const	string	$const6	"x"		%read{11,32} %write{2147483647,-1}
temp	int	$tmp4	%read{12,12} %write{11,11}
const	int	$const7	0		%read{13,57} %write{2147483647,-1}
temp	float	$tmp5	%read{14,14} %write{13,13}
const	float	$const8	20		%read{14,42} %write{2147483647,-1}
const	string	$const9	"y"		%read{15,35} %write{2147483647,-1}
temp	int	$tmp6	%read{16,16} %write{15,15}
const	int	$const10	1		%read{17,98} %write{2147483647,-1}
temp	float	$tmp7	%read{18,18} %write{17,17}
const	string	$const11	"z"		%read{19,38} %write{2147483647,-1}
temp	int	$tmp8	%read{20,20} %write{19,19}
const	int	$const12	2		%read{21,26} %write{2147483647,-1}
temp	float	$tmp9	%read{22,22} %write{21,21}
temp	float	$tmp10	%read{25,25} %write{23,23}
temp	float	$tmp11	%read{25,25} %write{24,24}
temp	float	$tmp12	%read{27,27} %write{25,25}
temp	float	$tmp13	%read{27,27} %write{26,26}
temp	float	$tmp14	%read{28,28} %write{27,27}
const	float	$const13	10		%read{28,28} %write{2147483647,-1}
const	string	$const14	"rings"		%read{29,29} %write{2147483647,-1}
temp	int	$tmp15	%read{30,30} %write{29,29}
temp	int	$tmp16	%read{33,33} %write{32,32}
const	point	$const15	0 1 1		%read{34,34} %write{2147483647,-1}
temp	int	$tmp18	%read{36,36} %write{35,35}
const	point	$const16	1 0 1		%read{37,37} %write{2147483647,-1}
temp	int	$tmp20	%read{39,39} %write{38,38}
const	point	$const17	1 1 0		%read{40,40} %write{2147483647,-1}
temp	float	$tmp22	%read{42,42} %write{41,41}
temp	int	$tmp23	%read{45,45} %write{44,44}
temp	float	$tmp24	%read{104,104} %write{95,102}
temp	point	$tmp25	%read{48,48} %write{46,46}
const	float	$const18	2		%read{70,126} %write{2147483647,-1}
const	string	$const19	"noise_fbm"		%read{47,47} %write{2147483647,-1}
const	float	$const20	1		%read{49,105} %write{2147483647,-1}
temp	int	$tmp26	%read{55,72} %write{55,72}
temp	int	$tmp27	%read{55,72} %write{55,72}
temp	int	$tmp28	%read{53,72} %write{54,72}
temp	point	$tmp29	%read{55,72} %write{55,72}
const	string	$const21	"safe_snoise"		%read{59,78} %write{2147483647,-1}
const	string	$const22	"snoise"		%read{60,79} %write{2147483647,-1}
temp	int	$tmp30	%read{55,72} %write{55,72}
temp	float	$tmp31	%read{55,72} %write{55,72}
temp	int	$tmp32	%read{2147483647,-1} %write{55,72}
temp	float	$tmp33	%read{74,74} %write{73,73}
temp	int	$tmp34	%read{76,76} %write{75,75}
temp	point	$tmp35	%read{79,79} %write{77,77}
temp	int	$tmp36	%read{81,81} %write{80,80}
temp	float	$tmp37	%read{86,86} %write{85,85}
const	float	$const23	0.5		%read{88,122} %write{2147483647,-1}
temp	float	$tmp38	%read{89,89} %write{88,88}
temp	float	$tmp39	%read{90,90} %write{89,89}
temp	float	$tmp40	%read{95,95} %write{90,90}
temp	float	$tmp41	%read{93,93} %write{91,91}
temp	float	$tmp42	%read{93,93} %write{92,92}
temp	float	$tmp43	%read{94,94} %write{93,93}
temp	float	$tmp44	%read{95,95} %write{94,94}
temp	float	$tmp45	%read{100,100} %write{99,99}
temp	float	$tmp46	%read{101,101} %write{100,100}
temp	float	$tmp47	%read{105,105} %write{104,104}
temp	float	$tmp48	%read{106,106} %write{105,105}
temp	float	$tmp49	%read{107,107} %write{106,106}
const	string	$const24	"sine"		%read{108,108} %write{2147483647,-1}
temp	int	$tmp50	%read{109,109} %write{108,108}
temp	float	$tmp51	%read{112,112} %write{111,111}
const	float	$const25	1.57079637		%read{110,110} %write{2147483647,-1}
temp	float	$tmp52	%read{111,111} %write{110,110}
temp	float	$tmp53	%read{113,113} %write{112,112}
const	string	$const26	"saw"		%read{115,115} %write{2147483647,-1}
temp	int	$tmp54	%read{116,116} %write{115,115}
const	float	$const27	6.28318548		%read{117,121} %write{2147483647,-1}
temp	float	$tmp55	%read{119,119} %write{118,118}
temp	float	$tmp56	%read{126,126} %write{125,125}
temp	float	$tmp57	%read{124,124} %write{123,123}
temp	float	$tmp58	%read{123,123} %write{122,122}
temp	float	$tmp59	%read{125,125} %write{124,124}
code Vector
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:87
#                          point Vector = P,
	assign		Vector P 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl"} %line{87} %argrw{"wr"}
code ___main___
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:91
#   point p = Vector;
	assign		p Vector 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl"} %line{91} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:93
#   if (use_mapping)
	if		use_mapping 4 4 	%line{93} %argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:94
#     p = transform(mapping, p);
	transform	p mapping p 	%line{94} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:96
#   Fac = wave(p * Scale,
	mul		$tmp1 p Scale 	%line{96} %argrw{"wrr"}
	functioncall	$const1 128 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:22
#   point p = (p_input + 0.000001) * 0.999999;
	add		$tmp2 $tmp1 $const2 	%line{22} %argrw{"wrr"}
	mul		___577_p $tmp2 $const3 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:24
#   float n = 0.0;
	assign		___577_n $const4 	%line{24} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:26
#   if (type == "bands") {
	eq		$tmp3 wave_type $const5 	%line{26} %argrw{"wrr"}
	if		$tmp3 29 43 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:27
#     if (bands_direction == "x") {
	eq		$tmp4 bands_direction $const6 	%line{27} %argrw{"wrr"}
	if		$tmp4 15 29 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:28
#       n = p[0] * 20.0;
	compref		$tmp5 ___577_p $const7 	%line{28} %argrw{"wrr"}
	mul		___577_n $tmp5 $const8 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:30
#     else if (bands_direction == "y") {
	eq		$tmp6 bands_direction $const9 	%line{30} %argrw{"wrr"}
	if		$tmp6 19 29 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:31
#       n = p[1] * 20.0;
	compref		$tmp7 ___577_p $const10 	%line{31} %argrw{"wrr"}
	mul		___577_n $tmp7 $const8 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:33
#     else if (bands_direction == "z") {
	eq		$tmp8 bands_direction $const11 	%line{33} %argrw{"wrr"}
	if		$tmp8 23 29 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:34
#       n = p[2] * 20.0;
	compref		$tmp9 ___577_p $const12 	%line{34} %argrw{"wrr"}
	mul		___577_n $tmp9 $const8 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:37
#       n = (p[0] + p[1] + p[2]) * 10.0;
	compref		$tmp10 ___577_p $const7 	%line{37} %argrw{"wrr"}
	compref		$tmp11 ___577_p $const10 	%argrw{"wrr"}
	add		$tmp12 $tmp10 $tmp11 	%argrw{"wrr"}
	compref		$tmp13 ___577_p $const12 	%argrw{"wrr"}
	add		$tmp14 $tmp12 $tmp13 	%argrw{"wrr"}
	mul		___577_n $tmp14 $const13 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:40
#   else if (type == "rings") {
	eq		$tmp15 wave_type $const14 	%line{40} %argrw{"wrr"}
	if		$tmp15 43 43 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:41
#     point rp = p;
	assign		___583_rp ___577_p 	%line{41} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:42
#     if (rings_direction == "x") {
	eq		$tmp16 rings_direction $const6 	%line{42} %argrw{"wrr"}
	if		$tmp16 35 41 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:43
#       rp *= point(0.0, 1.0, 1.0);
	mul		___583_rp ___583_rp $const15 	%line{43} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:45
#     else if (rings_direction == "y") {
	eq		$tmp18 rings_direction $const9 	%line{45} %argrw{"wrr"}
	if		$tmp18 38 41 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:46
#       rp *= point(1.0, 0.0, 1.0);
	mul		___583_rp ___583_rp $const16 	%line{46} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:48
#     else if (rings_direction == "z") {
	eq		$tmp20 rings_direction $const11 	%line{48} %argrw{"wrr"}
	if		$tmp20 41 41 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:49
#       rp *= point(1.0, 1.0, 0.0);
	mul		___583_rp ___583_rp $const17 	%line{49} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:53
#     n = length(rp) * 20.0;
	length		$tmp22 ___583_rp 	%line{53} %argrw{"wr"}
	mul		___577_n $tmp22 $const8 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:56
#   n += phase;
	add		___577_n ___577_n PhaseOffset 	%line{56} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:58
#   if (distortion != 0.0) {
	neq		$tmp23 Distortion $const4 	%line{58} %argrw{"wrr"}
	if		$tmp23 108 108 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:59
#     n = n + (distortion * (noise_fbm(p * dscale, detail, droughness, 2.0, 1) * 2.0 - 1.0));
	mul		$tmp25 ___577_p DetailScale 	%line{59} %argrw{"wrr"}
	functioncall	$const19 104 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	assign		___482_p $tmp25 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h"} %line{220} %argrw{"wr"}
	assign		___482_fscale $const20 	%argrw{"wr"}
	assign		___482_amp $const20 	%argrw{"wr"}
	assign		___482_maxamp $const4 	%argrw{"wr"}
	assign		___482_sum $const4 	%argrw{"wr"}
	for		$tmp28 55 58 71 73 	%argrw{"r"}
	assign		___483_i $const7 	%argrw{"wr"}
	assign		$tmp26 Detail 	%argrw{"wr"}
	le		$tmp27 ___483_i $tmp26 	%argrw{"wrr"}
	neq		$tmp28 $tmp27 $const7 	%argrw{"wrr"}
	mul		$tmp29 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const21 66 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const22 $tmp29 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp30 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp30 65 65 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___484_t $const4 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___484_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp31 ___484_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___482_sum ___482_sum $tmp31 	%argrw{"wrr"}
	add		___482_maxamp ___482_maxamp ___482_amp 	%argrw{"wrr"}
	mul		___482_amp ___482_amp DetailRoughness 	%argrw{"wrr"}
	mul		___482_fscale ___482_fscale $const18 	%argrw{"wrr"}
	assign		$tmp32 ___483_i 	%argrw{"wr"}
	add		___483_i ___483_i $const10 	%argrw{"wrr"}
	floor		$tmp33 Detail 	%argrw{"wr"}
	sub		___482_rmd Detail $tmp33 	%argrw{"wrr"}
	neq		$tmp34 ___482_rmd $const4 	%argrw{"wrr"}
	if		$tmp34 98 104 	%argrw{"r"}
	mul		$tmp35 ___482_fscale ___482_p 	%argrw{"wrr"}
	functioncall	$const21 85 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:66
#   float f = noise("snoise", p);
	noise		___468_f $const22 $tmp35 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:67
#   if (isinf(f)) {
	isinf		$tmp36 ___468_f 	%line{67} %argrw{"wr"}
	if		$tmp36 84 84 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:68
#     return 0.0;
	assign		___485_t $const4 	%line{68} %argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:70
#   return f;
	assign		___485_t ___468_f 	%line{70} %argrw{"wr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_noise.h:220
# NOISE_FBM(vector3)
	mul		$tmp37 ___485_t ___482_amp 	%line{220} %argrw{"wrr"}
	add		___485_sum2 ___482_sum $tmp37 	%argrw{"wrr"}
	if		$const10 96 97 	%argrw{"r"}
	mul		$tmp38 $const23 ___482_sum 	%argrw{"wrr"}
	div		$tmp39 $tmp38 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp40 $tmp39 $const23 	%argrw{"wrr"}
	mul		$tmp41 $const23 ___485_sum2 	%argrw{"wrr"}
	add		$tmp42 ___482_maxamp ___482_amp 	%argrw{"wrr"}
	div		$tmp43 $tmp41 $tmp42 	%argrw{"wrr"}
	add		$tmp44 $tmp43 $const23 	%argrw{"wrr"}
	mix		$tmp24 $tmp40 $tmp44 ___482_rmd 	%argrw{"wrrr"}
	mix		$tmp24 ___482_sum ___485_sum2 ___482_rmd 	%argrw{"wrrr"}
	return
	if		$const10 102 103 	%argrw{"r"}
	mul		$tmp45 $const23 ___482_sum 	%argrw{"wrr"}
	div		$tmp46 $tmp45 ___482_maxamp 	%argrw{"wrr"}
	add		$tmp24 $tmp46 $const23 	%argrw{"wrr"}
	assign		$tmp24 ___482_sum 	%argrw{"wr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:59
#     n = n + (distortion * (noise_fbm(p * dscale, detail, droughness, 2.0, 1) * 2.0 - 1.0));
	mul		$tmp47 $tmp24 $const18 	%filename{"/Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl"} %line{59} %argrw{"wrr"}
	sub		$tmp48 $tmp47 $const20 	%argrw{"wrr"}
	mul		$tmp49 Distortion $tmp48 	%argrw{"wrr"}
	add		___577_n ___577_n $tmp49 	%argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:62
#   if (profile == "sine") {
	eq		$tmp50 profile $const24 	%line{62} %argrw{"wrr"}
	if		$tmp50 115 128 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:63
#     return 0.5 + 0.5 * sin(n - M_PI_2);
	sub		$tmp52 ___577_n $const25 	%line{63} %argrw{"wrr"}
	sin		$tmp51 $tmp52 	%argrw{"wr"}
	mul		$tmp53 $const23 $tmp51 	%argrw{"wrr"}
	add		Fac $const23 $tmp53 	%argrw{"wrr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:65
#   else if (profile == "saw") {
	eq		$tmp54 profile $const26 	%line{65} %argrw{"wrr"}
	if		$tmp54 121 128 	%argrw{"r"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:66
#     n /= M_2PI;
	div		___577_n ___577_n $const27 	%line{66} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:67
#     return n - floor(n);
	floor		$tmp55 ___577_n 	%line{67} %argrw{"wr"}
	sub		Fac ___577_n $tmp55 	%argrw{"wrr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:70
#     n /= M_2PI;
	div		___577_n ___577_n $const27 	%line{70} %argrw{"wrr"}
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:71
#     return abs(n - floor(n + 0.5)) * 2.0;
	add		$tmp58 ___577_n $const23 	%line{71} %argrw{"wrr"}
	floor		$tmp57 $tmp58 	%argrw{"wr"}
	sub		$tmp59 ___577_n $tmp57 	%argrw{"wrr"}
	abs		$tmp56 $tmp59 	%argrw{"wr"}
	mul		Fac $tmp56 $const18 	%argrw{"wrr"}
	return
# /Users/blender/git/blender-v410/blender.git/intern/cycles/kernel/osl/shaders/node_wave_texture.osl:106
#   Color = Fac;
	assign		Color Fac 	%line{106} %argrw{"wr"}
	end
